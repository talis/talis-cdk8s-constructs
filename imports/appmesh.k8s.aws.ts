// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * BackendGroup is the Schema for the backendgroups API
 *
 * @schema BackendGroup
 */
export class BackendGroup extends ApiObject {
  /**
   * Returns the apiVersion and kind for "BackendGroup"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'appmesh.k8s.aws/v1beta2',
    kind: 'BackendGroup',
  }

  /**
   * Renders a Kubernetes manifest for "BackendGroup".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: BackendGroupProps = {}): any {
    return {
      ...BackendGroup.GVK,
      ...toJson_BackendGroupProps(props),
    };
  }

  /**
   * Defines a "BackendGroup" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: BackendGroupProps = {}) {
    super(scope, id, {
      ...BackendGroup.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...BackendGroup.GVK,
      ...toJson_BackendGroupProps(resolved),
    };
  }
}

/**
 * BackendGroup is the Schema for the backendgroups API
 *
 * @schema BackendGroup
 */
export interface BackendGroupProps {
  /**
   * @schema BackendGroup#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * BackendGroupSpec defines the desired state of BackendGroup
   *
   * @schema BackendGroup#spec
   */
  readonly spec?: BackendGroupSpec;

}

/**
 * Converts an object of type 'BackendGroupProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BackendGroupProps(obj: BackendGroupProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_BackendGroupSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * BackendGroupSpec defines the desired state of BackendGroup
 *
 * @schema BackendGroupSpec
 */
export interface BackendGroupSpec {
  /**
   * A reference to k8s Mesh CR that this BackendGroup belongs to. The admission controller populates it using Meshes's selector, and prevents users from setting this field.
   * Populated by the system. Read-only.
   *
   * @schema BackendGroupSpec#meshRef
   */
  readonly meshRef?: BackendGroupSpecMeshRef;

  /**
   * VirtualServices defines the set of virtual services in this BackendGroup.
   *
   * @schema BackendGroupSpec#virtualservices
   */
  readonly virtualservices?: BackendGroupSpecVirtualservices[];

}

/**
 * Converts an object of type 'BackendGroupSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BackendGroupSpec(obj: BackendGroupSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'meshRef': toJson_BackendGroupSpecMeshRef(obj.meshRef),
    'virtualservices': obj.virtualservices?.map(y => toJson_BackendGroupSpecVirtualservices(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A reference to k8s Mesh CR that this BackendGroup belongs to. The admission controller populates it using Meshes's selector, and prevents users from setting this field.
 * Populated by the system. Read-only.
 *
 * @schema BackendGroupSpecMeshRef
 */
export interface BackendGroupSpecMeshRef {
  /**
   * Name is the name of Mesh CR
   *
   * @schema BackendGroupSpecMeshRef#name
   */
  readonly name: string;

  /**
   * UID is the UID of Mesh CR
   *
   * @schema BackendGroupSpecMeshRef#uid
   */
  readonly uid: string;

}

/**
 * Converts an object of type 'BackendGroupSpecMeshRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BackendGroupSpecMeshRef(obj: BackendGroupSpecMeshRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'uid': obj.uid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * VirtualServiceReference holds a reference to VirtualService.appmesh.k8s.aws
 *
 * @schema BackendGroupSpecVirtualservices
 */
export interface BackendGroupSpecVirtualservices {
  /**
   * Name is the name of VirtualService CR
   *
   * @schema BackendGroupSpecVirtualservices#name
   */
  readonly name: string;

  /**
   * Namespace is the namespace of VirtualService CR. If unspecified, defaults to the referencing object's namespace
   *
   * @schema BackendGroupSpecVirtualservices#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'BackendGroupSpecVirtualservices' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BackendGroupSpecVirtualservices(obj: BackendGroupSpecVirtualservices | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * GatewayRoute is the Schema for the gatewayroutes API
 *
 * @schema GatewayRoute
 */
export class GatewayRoute extends ApiObject {
  /**
   * Returns the apiVersion and kind for "GatewayRoute"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'appmesh.k8s.aws/v1beta2',
    kind: 'GatewayRoute',
  }

  /**
   * Renders a Kubernetes manifest for "GatewayRoute".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: GatewayRouteProps = {}): any {
    return {
      ...GatewayRoute.GVK,
      ...toJson_GatewayRouteProps(props),
    };
  }

  /**
   * Defines a "GatewayRoute" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: GatewayRouteProps = {}) {
    super(scope, id, {
      ...GatewayRoute.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...GatewayRoute.GVK,
      ...toJson_GatewayRouteProps(resolved),
    };
  }
}

/**
 * GatewayRoute is the Schema for the gatewayroutes API
 *
 * @schema GatewayRoute
 */
export interface GatewayRouteProps {
  /**
   * @schema GatewayRoute#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * GatewayRouteSpec defines the desired state of GatewayRoute refers to https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_gateways.html
   *
   * @schema GatewayRoute#spec
   */
  readonly spec?: GatewayRouteSpec;

}

/**
 * Converts an object of type 'GatewayRouteProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteProps(obj: GatewayRouteProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_GatewayRouteSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * GatewayRouteSpec defines the desired state of GatewayRoute refers to https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_gateways.html
 *
 * @schema GatewayRouteSpec
 */
export interface GatewayRouteSpec {
  /**
   * AWSName is the AppMesh GatewayRoute object's name. If unspecified or empty, it defaults to be "${name}_${namespace}" of k8s GatewayRoute
   *
   * @schema GatewayRouteSpec#awsName
   */
  readonly awsName?: string;

  /**
   * An object that represents the specification of a gRPC gatewayRoute.
   *
   * @schema GatewayRouteSpec#grpcRoute
   */
  readonly grpcRoute?: GatewayRouteSpecGrpcRoute;

  /**
   * An object that represents the specification of an HTTP/2 gatewayRoute.
   *
   * @schema GatewayRouteSpec#http2Route
   */
  readonly http2Route?: GatewayRouteSpecHttp2Route;

  /**
   * An object that represents the specification of an HTTP gatewayRoute.
   *
   * @schema GatewayRouteSpec#httpRoute
   */
  readonly httpRoute?: GatewayRouteSpecHttpRoute;

  /**
   * A reference to k8s Mesh CR that this GatewayRoute belongs to. The admission controller populates it using Meshes's selector, and prevents users from setting this field.
   * Populated by the system. Read-only.
   *
   * @schema GatewayRouteSpec#meshRef
   */
  readonly meshRef?: GatewayRouteSpecMeshRef;

  /**
   * Priority for the gatewayroute. Default Priority is 1000 which is lowest priority
   *
   * @schema GatewayRouteSpec#priority
   */
  readonly priority?: number;

  /**
   * A reference to k8s VirtualGateway CR that this GatewayRoute belongs to. The admission controller populates it using VirtualGateway's selector, and prevents users from setting this field.
   * Populated by the system. Read-only.
   *
   * @schema GatewayRouteSpec#virtualGatewayRef
   */
  readonly virtualGatewayRef?: GatewayRouteSpecVirtualGatewayRef;

}

/**
 * Converts an object of type 'GatewayRouteSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpec(obj: GatewayRouteSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'awsName': obj.awsName,
    'grpcRoute': toJson_GatewayRouteSpecGrpcRoute(obj.grpcRoute),
    'http2Route': toJson_GatewayRouteSpecHttp2Route(obj.http2Route),
    'httpRoute': toJson_GatewayRouteSpecHttpRoute(obj.httpRoute),
    'meshRef': toJson_GatewayRouteSpecMeshRef(obj.meshRef),
    'priority': obj.priority,
    'virtualGatewayRef': toJson_GatewayRouteSpecVirtualGatewayRef(obj.virtualGatewayRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents the specification of a gRPC gatewayRoute.
 *
 * @schema GatewayRouteSpecGrpcRoute
 */
export interface GatewayRouteSpecGrpcRoute {
  /**
   * An object that represents the action to take if a match is determined.
   *
   * @schema GatewayRouteSpecGrpcRoute#action
   */
  readonly action: GatewayRouteSpecGrpcRouteAction;

  /**
   * An object that represents the criteria for determining a request match.
   *
   * @schema GatewayRouteSpecGrpcRoute#match
   */
  readonly match: GatewayRouteSpecGrpcRouteMatch;

}

/**
 * Converts an object of type 'GatewayRouteSpecGrpcRoute' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecGrpcRoute(obj: GatewayRouteSpecGrpcRoute | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'action': toJson_GatewayRouteSpecGrpcRouteAction(obj.action),
    'match': toJson_GatewayRouteSpecGrpcRouteMatch(obj.match),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents the specification of an HTTP/2 gatewayRoute.
 *
 * @schema GatewayRouteSpecHttp2Route
 */
export interface GatewayRouteSpecHttp2Route {
  /**
   * An object that represents the action to take if a match is determined.
   *
   * @schema GatewayRouteSpecHttp2Route#action
   */
  readonly action: GatewayRouteSpecHttp2RouteAction;

  /**
   * An object that represents the criteria for determining a request match.
   *
   * @schema GatewayRouteSpecHttp2Route#match
   */
  readonly match: GatewayRouteSpecHttp2RouteMatch;

}

/**
 * Converts an object of type 'GatewayRouteSpecHttp2Route' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecHttp2Route(obj: GatewayRouteSpecHttp2Route | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'action': toJson_GatewayRouteSpecHttp2RouteAction(obj.action),
    'match': toJson_GatewayRouteSpecHttp2RouteMatch(obj.match),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents the specification of an HTTP gatewayRoute.
 *
 * @schema GatewayRouteSpecHttpRoute
 */
export interface GatewayRouteSpecHttpRoute {
  /**
   * An object that represents the action to take if a match is determined.
   *
   * @schema GatewayRouteSpecHttpRoute#action
   */
  readonly action: GatewayRouteSpecHttpRouteAction;

  /**
   * An object that represents the criteria for determining a request match.
   *
   * @schema GatewayRouteSpecHttpRoute#match
   */
  readonly match: GatewayRouteSpecHttpRouteMatch;

}

/**
 * Converts an object of type 'GatewayRouteSpecHttpRoute' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecHttpRoute(obj: GatewayRouteSpecHttpRoute | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'action': toJson_GatewayRouteSpecHttpRouteAction(obj.action),
    'match': toJson_GatewayRouteSpecHttpRouteMatch(obj.match),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A reference to k8s Mesh CR that this GatewayRoute belongs to. The admission controller populates it using Meshes's selector, and prevents users from setting this field.
 * Populated by the system. Read-only.
 *
 * @schema GatewayRouteSpecMeshRef
 */
export interface GatewayRouteSpecMeshRef {
  /**
   * Name is the name of Mesh CR
   *
   * @schema GatewayRouteSpecMeshRef#name
   */
  readonly name: string;

  /**
   * UID is the UID of Mesh CR
   *
   * @schema GatewayRouteSpecMeshRef#uid
   */
  readonly uid: string;

}

/**
 * Converts an object of type 'GatewayRouteSpecMeshRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecMeshRef(obj: GatewayRouteSpecMeshRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'uid': obj.uid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A reference to k8s VirtualGateway CR that this GatewayRoute belongs to. The admission controller populates it using VirtualGateway's selector, and prevents users from setting this field.
 * Populated by the system. Read-only.
 *
 * @schema GatewayRouteSpecVirtualGatewayRef
 */
export interface GatewayRouteSpecVirtualGatewayRef {
  /**
   * Name is the name of VirtualGateway CR
   *
   * @schema GatewayRouteSpecVirtualGatewayRef#name
   */
  readonly name: string;

  /**
   * Namespace is the namespace of VirtualGateway CR. If unspecified, defaults to the referencing object's namespace
   *
   * @schema GatewayRouteSpecVirtualGatewayRef#namespace
   */
  readonly namespace?: string;

  /**
   * UID is the UID of VirtualGateway CR
   *
   * @schema GatewayRouteSpecVirtualGatewayRef#uid
   */
  readonly uid: string;

}

/**
 * Converts an object of type 'GatewayRouteSpecVirtualGatewayRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecVirtualGatewayRef(obj: GatewayRouteSpecVirtualGatewayRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
    'uid': obj.uid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents the action to take if a match is determined.
 *
 * @schema GatewayRouteSpecGrpcRouteAction
 */
export interface GatewayRouteSpecGrpcRouteAction {
  /**
   * GrpcGatewayRouteRewrite refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_GrpcGatewayRouteRewrite.html
   *
   * @schema GatewayRouteSpecGrpcRouteAction#rewrite
   */
  readonly rewrite?: GatewayRouteSpecGrpcRouteActionRewrite;

  /**
   * An object that represents the target that traffic is routed to when a request matches the route.
   *
   * @schema GatewayRouteSpecGrpcRouteAction#target
   */
  readonly target: GatewayRouteSpecGrpcRouteActionTarget;

}

/**
 * Converts an object of type 'GatewayRouteSpecGrpcRouteAction' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecGrpcRouteAction(obj: GatewayRouteSpecGrpcRouteAction | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'rewrite': toJson_GatewayRouteSpecGrpcRouteActionRewrite(obj.rewrite),
    'target': toJson_GatewayRouteSpecGrpcRouteActionTarget(obj.target),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents the criteria for determining a request match.
 *
 * @schema GatewayRouteSpecGrpcRouteMatch
 */
export interface GatewayRouteSpecGrpcRouteMatch {
  /**
   * The client specified Hostname to match on.
   *
   * @schema GatewayRouteSpecGrpcRouteMatch#hostname
   */
  readonly hostname?: GatewayRouteSpecGrpcRouteMatchHostname;

  /**
   * An object that represents the data to match from the request.
   *
   * @schema GatewayRouteSpecGrpcRouteMatch#metadata
   */
  readonly metadata?: GatewayRouteSpecGrpcRouteMatchMetadata[];

  /**
   * Specifies the port the request to be matched on
   *
   * @schema GatewayRouteSpecGrpcRouteMatch#port
   */
  readonly port?: number;

  /**
   * Either ServiceName or Hostname must be specified. Both are allowed as well The fully qualified domain name for the service to match from the request.
   *
   * @schema GatewayRouteSpecGrpcRouteMatch#serviceName
   */
  readonly serviceName?: string;

}

/**
 * Converts an object of type 'GatewayRouteSpecGrpcRouteMatch' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecGrpcRouteMatch(obj: GatewayRouteSpecGrpcRouteMatch | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'hostname': toJson_GatewayRouteSpecGrpcRouteMatchHostname(obj.hostname),
    'metadata': obj.metadata?.map(y => toJson_GatewayRouteSpecGrpcRouteMatchMetadata(y)),
    'port': obj.port,
    'serviceName': obj.serviceName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents the action to take if a match is determined.
 *
 * @schema GatewayRouteSpecHttp2RouteAction
 */
export interface GatewayRouteSpecHttp2RouteAction {
  /**
   * HTTPGatewayRouteRewrite refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HttpGatewayRouteRewrite.html
   *
   * @schema GatewayRouteSpecHttp2RouteAction#rewrite
   */
  readonly rewrite?: GatewayRouteSpecHttp2RouteActionRewrite;

  /**
   * An object that represents the target that traffic is routed to when a request matches the route.
   *
   * @schema GatewayRouteSpecHttp2RouteAction#target
   */
  readonly target: GatewayRouteSpecHttp2RouteActionTarget;

}

/**
 * Converts an object of type 'GatewayRouteSpecHttp2RouteAction' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecHttp2RouteAction(obj: GatewayRouteSpecHttp2RouteAction | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'rewrite': toJson_GatewayRouteSpecHttp2RouteActionRewrite(obj.rewrite),
    'target': toJson_GatewayRouteSpecHttp2RouteActionTarget(obj.target),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents the criteria for determining a request match.
 *
 * @schema GatewayRouteSpecHttp2RouteMatch
 */
export interface GatewayRouteSpecHttp2RouteMatch {
  /**
   * An object that represents the client request headers to match on.
   *
   * @schema GatewayRouteSpecHttp2RouteMatch#headers
   */
  readonly headers?: GatewayRouteSpecHttp2RouteMatchHeaders[];

  /**
   * The client specified Hostname to match on.
   *
   * @schema GatewayRouteSpecHttp2RouteMatch#hostname
   */
  readonly hostname?: GatewayRouteSpecHttp2RouteMatchHostname;

  /**
   * The client request method to match on.
   *
   * @schema GatewayRouteSpecHttp2RouteMatch#method
   */
  readonly method?: GatewayRouteSpecHttp2RouteMatchMethod;

  /**
   * Specified path of the request to be matched on
   *
   * @schema GatewayRouteSpecHttp2RouteMatch#path
   */
  readonly path?: GatewayRouteSpecHttp2RouteMatchPath;

  /**
   * Specifies the port the request to be matched on
   *
   * @schema GatewayRouteSpecHttp2RouteMatch#port
   */
  readonly port?: number;

  /**
   * Either Prefix or Hostname must be specified. Both are allowed as well. Specifies the prefix to match requests with
   *
   * @schema GatewayRouteSpecHttp2RouteMatch#prefix
   */
  readonly prefix?: string;

  /**
   * Client specified query parameters to match on
   *
   * @schema GatewayRouteSpecHttp2RouteMatch#queryParameters
   */
  readonly queryParameters?: GatewayRouteSpecHttp2RouteMatchQueryParameters[];

}

/**
 * Converts an object of type 'GatewayRouteSpecHttp2RouteMatch' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecHttp2RouteMatch(obj: GatewayRouteSpecHttp2RouteMatch | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'headers': obj.headers?.map(y => toJson_GatewayRouteSpecHttp2RouteMatchHeaders(y)),
    'hostname': toJson_GatewayRouteSpecHttp2RouteMatchHostname(obj.hostname),
    'method': obj.method,
    'path': toJson_GatewayRouteSpecHttp2RouteMatchPath(obj.path),
    'port': obj.port,
    'prefix': obj.prefix,
    'queryParameters': obj.queryParameters?.map(y => toJson_GatewayRouteSpecHttp2RouteMatchQueryParameters(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents the action to take if a match is determined.
 *
 * @schema GatewayRouteSpecHttpRouteAction
 */
export interface GatewayRouteSpecHttpRouteAction {
  /**
   * HTTPGatewayRouteRewrite refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HttpGatewayRouteRewrite.html
   *
   * @schema GatewayRouteSpecHttpRouteAction#rewrite
   */
  readonly rewrite?: GatewayRouteSpecHttpRouteActionRewrite;

  /**
   * An object that represents the target that traffic is routed to when a request matches the route.
   *
   * @schema GatewayRouteSpecHttpRouteAction#target
   */
  readonly target: GatewayRouteSpecHttpRouteActionTarget;

}

/**
 * Converts an object of type 'GatewayRouteSpecHttpRouteAction' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecHttpRouteAction(obj: GatewayRouteSpecHttpRouteAction | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'rewrite': toJson_GatewayRouteSpecHttpRouteActionRewrite(obj.rewrite),
    'target': toJson_GatewayRouteSpecHttpRouteActionTarget(obj.target),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents the criteria for determining a request match.
 *
 * @schema GatewayRouteSpecHttpRouteMatch
 */
export interface GatewayRouteSpecHttpRouteMatch {
  /**
   * An object that represents the client request headers to match on.
   *
   * @schema GatewayRouteSpecHttpRouteMatch#headers
   */
  readonly headers?: GatewayRouteSpecHttpRouteMatchHeaders[];

  /**
   * The client specified Hostname to match on.
   *
   * @schema GatewayRouteSpecHttpRouteMatch#hostname
   */
  readonly hostname?: GatewayRouteSpecHttpRouteMatchHostname;

  /**
   * The client request method to match on.
   *
   * @schema GatewayRouteSpecHttpRouteMatch#method
   */
  readonly method?: GatewayRouteSpecHttpRouteMatchMethod;

  /**
   * Specified path of the request to be matched on
   *
   * @schema GatewayRouteSpecHttpRouteMatch#path
   */
  readonly path?: GatewayRouteSpecHttpRouteMatchPath;

  /**
   * Specifies the port the request to be matched on
   *
   * @schema GatewayRouteSpecHttpRouteMatch#port
   */
  readonly port?: number;

  /**
   * Either Prefix or Hostname must be specified. Both are allowed as well. Specifies the prefix to match requests with
   *
   * @schema GatewayRouteSpecHttpRouteMatch#prefix
   */
  readonly prefix?: string;

  /**
   * Client specified query parameters to match on
   *
   * @schema GatewayRouteSpecHttpRouteMatch#queryParameters
   */
  readonly queryParameters?: GatewayRouteSpecHttpRouteMatchQueryParameters[];

}

/**
 * Converts an object of type 'GatewayRouteSpecHttpRouteMatch' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecHttpRouteMatch(obj: GatewayRouteSpecHttpRouteMatch | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'headers': obj.headers?.map(y => toJson_GatewayRouteSpecHttpRouteMatchHeaders(y)),
    'hostname': toJson_GatewayRouteSpecHttpRouteMatchHostname(obj.hostname),
    'method': obj.method,
    'path': toJson_GatewayRouteSpecHttpRouteMatchPath(obj.path),
    'port': obj.port,
    'prefix': obj.prefix,
    'queryParameters': obj.queryParameters?.map(y => toJson_GatewayRouteSpecHttpRouteMatchQueryParameters(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * GrpcGatewayRouteRewrite refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_GrpcGatewayRouteRewrite.html
 *
 * @schema GatewayRouteSpecGrpcRouteActionRewrite
 */
export interface GatewayRouteSpecGrpcRouteActionRewrite {
  /**
   * GatewayRouteHostnameRewrite refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_GatewayRouteHostnameRewrite.html ENABLE or DISABLE default behavior for Hostname rewrite
   *
   * @schema GatewayRouteSpecGrpcRouteActionRewrite#hostname
   */
  readonly hostname?: GatewayRouteSpecGrpcRouteActionRewriteHostname;

}

/**
 * Converts an object of type 'GatewayRouteSpecGrpcRouteActionRewrite' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecGrpcRouteActionRewrite(obj: GatewayRouteSpecGrpcRouteActionRewrite | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'hostname': toJson_GatewayRouteSpecGrpcRouteActionRewriteHostname(obj.hostname),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents the target that traffic is routed to when a request matches the route.
 *
 * @schema GatewayRouteSpecGrpcRouteActionTarget
 */
export interface GatewayRouteSpecGrpcRouteActionTarget {
  /**
   * Specifies the port of the gateway route target
   *
   * @schema GatewayRouteSpecGrpcRouteActionTarget#port
   */
  readonly port?: number;

  /**
   * The virtual service to associate with the gateway route target.
   *
   * @schema GatewayRouteSpecGrpcRouteActionTarget#virtualService
   */
  readonly virtualService: GatewayRouteSpecGrpcRouteActionTargetVirtualService;

}

/**
 * Converts an object of type 'GatewayRouteSpecGrpcRouteActionTarget' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecGrpcRouteActionTarget(obj: GatewayRouteSpecGrpcRouteActionTarget | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'port': obj.port,
    'virtualService': toJson_GatewayRouteSpecGrpcRouteActionTargetVirtualService(obj.virtualService),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The client specified Hostname to match on.
 *
 * @schema GatewayRouteSpecGrpcRouteMatchHostname
 */
export interface GatewayRouteSpecGrpcRouteMatchHostname {
  /**
   * The value sent by the client must match the specified value exactly.
   *
   * @schema GatewayRouteSpecGrpcRouteMatchHostname#exact
   */
  readonly exact?: string;

  /**
   * The value sent by the client must end with the specified characters.
   *
   * @schema GatewayRouteSpecGrpcRouteMatchHostname#suffix
   */
  readonly suffix?: string;

}

/**
 * Converts an object of type 'GatewayRouteSpecGrpcRouteMatchHostname' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecGrpcRouteMatchHostname(obj: GatewayRouteSpecGrpcRouteMatchHostname | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exact': obj.exact,
    'suffix': obj.suffix,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * GRPCGatewayRouteMetadata refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_GrpcGatewayRouteMetadata.html
 *
 * @schema GatewayRouteSpecGrpcRouteMatchMetadata
 */
export interface GatewayRouteSpecGrpcRouteMatchMetadata {
  /**
   * Specify True to match anything except the match criteria. The default value is False.
   *
   * @schema GatewayRouteSpecGrpcRouteMatchMetadata#invert
   */
  readonly invert?: boolean;

  /**
   * An object that represents the data to match from the request.
   *
   * @schema GatewayRouteSpecGrpcRouteMatchMetadata#match
   */
  readonly match?: GatewayRouteSpecGrpcRouteMatchMetadataMatch;

  /**
   * The name of the route.
   *
   * @schema GatewayRouteSpecGrpcRouteMatchMetadata#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'GatewayRouteSpecGrpcRouteMatchMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecGrpcRouteMatchMetadata(obj: GatewayRouteSpecGrpcRouteMatchMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'invert': obj.invert,
    'match': toJson_GatewayRouteSpecGrpcRouteMatchMetadataMatch(obj.match),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPGatewayRouteRewrite refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HttpGatewayRouteRewrite.html
 *
 * @schema GatewayRouteSpecHttp2RouteActionRewrite
 */
export interface GatewayRouteSpecHttp2RouteActionRewrite {
  /**
   * GatewayRouteHostnameRewrite refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_GatewayRouteHostnameRewrite.html ENABLE or DISABLE default behavior for Hostname rewrite
   *
   * @schema GatewayRouteSpecHttp2RouteActionRewrite#hostname
   */
  readonly hostname?: GatewayRouteSpecHttp2RouteActionRewriteHostname;

  /**
   * GatewayRoutePathRewrite refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HttpGatewayRoutePathRewrite.html
   *
   * @schema GatewayRouteSpecHttp2RouteActionRewrite#path
   */
  readonly path?: GatewayRouteSpecHttp2RouteActionRewritePath;

  /**
   * GatewayRoutePrefixRewrite refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HttpGatewayRoutePrefixRewrite.html
   *
   * @schema GatewayRouteSpecHttp2RouteActionRewrite#prefix
   */
  readonly prefix?: GatewayRouteSpecHttp2RouteActionRewritePrefix;

}

/**
 * Converts an object of type 'GatewayRouteSpecHttp2RouteActionRewrite' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecHttp2RouteActionRewrite(obj: GatewayRouteSpecHttp2RouteActionRewrite | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'hostname': toJson_GatewayRouteSpecHttp2RouteActionRewriteHostname(obj.hostname),
    'path': toJson_GatewayRouteSpecHttp2RouteActionRewritePath(obj.path),
    'prefix': toJson_GatewayRouteSpecHttp2RouteActionRewritePrefix(obj.prefix),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents the target that traffic is routed to when a request matches the route.
 *
 * @schema GatewayRouteSpecHttp2RouteActionTarget
 */
export interface GatewayRouteSpecHttp2RouteActionTarget {
  /**
   * Specifies the port of the gateway route target
   *
   * @schema GatewayRouteSpecHttp2RouteActionTarget#port
   */
  readonly port?: number;

  /**
   * The virtual service to associate with the gateway route target.
   *
   * @schema GatewayRouteSpecHttp2RouteActionTarget#virtualService
   */
  readonly virtualService: GatewayRouteSpecHttp2RouteActionTargetVirtualService;

}

/**
 * Converts an object of type 'GatewayRouteSpecHttp2RouteActionTarget' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecHttp2RouteActionTarget(obj: GatewayRouteSpecHttp2RouteActionTarget | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'port': obj.port,
    'virtualService': toJson_GatewayRouteSpecHttp2RouteActionTargetVirtualService(obj.virtualService),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPGatewayRouteHeader refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HttpGatewayRouteHeader.html
 *
 * @schema GatewayRouteSpecHttp2RouteMatchHeaders
 */
export interface GatewayRouteSpecHttp2RouteMatchHeaders {
  /**
   * Specify True to match anything except the match criteria. The default value is False.
   *
   * @schema GatewayRouteSpecHttp2RouteMatchHeaders#invert
   */
  readonly invert?: boolean;

  /**
   * The HeaderMatchMethod object.
   *
   * @schema GatewayRouteSpecHttp2RouteMatchHeaders#match
   */
  readonly match?: GatewayRouteSpecHttp2RouteMatchHeadersMatch;

  /**
   * A name for the HTTP header in the client request that will be matched on.
   *
   * @schema GatewayRouteSpecHttp2RouteMatchHeaders#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'GatewayRouteSpecHttp2RouteMatchHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecHttp2RouteMatchHeaders(obj: GatewayRouteSpecHttp2RouteMatchHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'invert': obj.invert,
    'match': toJson_GatewayRouteSpecHttp2RouteMatchHeadersMatch(obj.match),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The client specified Hostname to match on.
 *
 * @schema GatewayRouteSpecHttp2RouteMatchHostname
 */
export interface GatewayRouteSpecHttp2RouteMatchHostname {
  /**
   * The value sent by the client must match the specified value exactly.
   *
   * @schema GatewayRouteSpecHttp2RouteMatchHostname#exact
   */
  readonly exact?: string;

  /**
   * The value sent by the client must end with the specified characters.
   *
   * @schema GatewayRouteSpecHttp2RouteMatchHostname#suffix
   */
  readonly suffix?: string;

}

/**
 * Converts an object of type 'GatewayRouteSpecHttp2RouteMatchHostname' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecHttp2RouteMatchHostname(obj: GatewayRouteSpecHttp2RouteMatchHostname | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exact': obj.exact,
    'suffix': obj.suffix,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The client request method to match on.
 *
 * @schema GatewayRouteSpecHttp2RouteMatchMethod
 */
export enum GatewayRouteSpecHttp2RouteMatchMethod {
  /** CONNECT */
  CONNECT = "CONNECT",
  /** DELETE */
  DELETE = "DELETE",
  /** GET */
  GET = "GET",
  /** HEAD */
  HEAD = "HEAD",
  /** OPTIONS */
  OPTIONS = "OPTIONS",
  /** PATCH */
  PATCH = "PATCH",
  /** POST */
  POST = "POST",
  /** PUT */
  PUT = "PUT",
  /** TRACE */
  TRACE = "TRACE",
}

/**
 * Specified path of the request to be matched on
 *
 * @schema GatewayRouteSpecHttp2RouteMatchPath
 */
export interface GatewayRouteSpecHttp2RouteMatchPath {
  /**
   * The value sent by the client must match the specified value exactly.
   *
   * @schema GatewayRouteSpecHttp2RouteMatchPath#exact
   */
  readonly exact?: string;

  /**
   * The value sent by the client must end with the specified characters.
   *
   * @schema GatewayRouteSpecHttp2RouteMatchPath#regex
   */
  readonly regex?: string;

}

/**
 * Converts an object of type 'GatewayRouteSpecHttp2RouteMatchPath' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecHttp2RouteMatchPath(obj: GatewayRouteSpecHttp2RouteMatchPath | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exact': obj.exact,
    'regex': obj.regex,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPQueryParameters refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HttpQueryParameter.html
 *
 * @schema GatewayRouteSpecHttp2RouteMatchQueryParameters
 */
export interface GatewayRouteSpecHttp2RouteMatchQueryParameters {
  /**
   * The QueryMatchMethod object.
   *
   * @schema GatewayRouteSpecHttp2RouteMatchQueryParameters#match
   */
  readonly match?: GatewayRouteSpecHttp2RouteMatchQueryParametersMatch;

  /**
   * @schema GatewayRouteSpecHttp2RouteMatchQueryParameters#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'GatewayRouteSpecHttp2RouteMatchQueryParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecHttp2RouteMatchQueryParameters(obj: GatewayRouteSpecHttp2RouteMatchQueryParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'match': toJson_GatewayRouteSpecHttp2RouteMatchQueryParametersMatch(obj.match),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPGatewayRouteRewrite refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HttpGatewayRouteRewrite.html
 *
 * @schema GatewayRouteSpecHttpRouteActionRewrite
 */
export interface GatewayRouteSpecHttpRouteActionRewrite {
  /**
   * GatewayRouteHostnameRewrite refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_GatewayRouteHostnameRewrite.html ENABLE or DISABLE default behavior for Hostname rewrite
   *
   * @schema GatewayRouteSpecHttpRouteActionRewrite#hostname
   */
  readonly hostname?: GatewayRouteSpecHttpRouteActionRewriteHostname;

  /**
   * GatewayRoutePathRewrite refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HttpGatewayRoutePathRewrite.html
   *
   * @schema GatewayRouteSpecHttpRouteActionRewrite#path
   */
  readonly path?: GatewayRouteSpecHttpRouteActionRewritePath;

  /**
   * GatewayRoutePrefixRewrite refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HttpGatewayRoutePrefixRewrite.html
   *
   * @schema GatewayRouteSpecHttpRouteActionRewrite#prefix
   */
  readonly prefix?: GatewayRouteSpecHttpRouteActionRewritePrefix;

}

/**
 * Converts an object of type 'GatewayRouteSpecHttpRouteActionRewrite' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecHttpRouteActionRewrite(obj: GatewayRouteSpecHttpRouteActionRewrite | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'hostname': toJson_GatewayRouteSpecHttpRouteActionRewriteHostname(obj.hostname),
    'path': toJson_GatewayRouteSpecHttpRouteActionRewritePath(obj.path),
    'prefix': toJson_GatewayRouteSpecHttpRouteActionRewritePrefix(obj.prefix),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents the target that traffic is routed to when a request matches the route.
 *
 * @schema GatewayRouteSpecHttpRouteActionTarget
 */
export interface GatewayRouteSpecHttpRouteActionTarget {
  /**
   * Specifies the port of the gateway route target
   *
   * @schema GatewayRouteSpecHttpRouteActionTarget#port
   */
  readonly port?: number;

  /**
   * The virtual service to associate with the gateway route target.
   *
   * @schema GatewayRouteSpecHttpRouteActionTarget#virtualService
   */
  readonly virtualService: GatewayRouteSpecHttpRouteActionTargetVirtualService;

}

/**
 * Converts an object of type 'GatewayRouteSpecHttpRouteActionTarget' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecHttpRouteActionTarget(obj: GatewayRouteSpecHttpRouteActionTarget | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'port': obj.port,
    'virtualService': toJson_GatewayRouteSpecHttpRouteActionTargetVirtualService(obj.virtualService),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPGatewayRouteHeader refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HttpGatewayRouteHeader.html
 *
 * @schema GatewayRouteSpecHttpRouteMatchHeaders
 */
export interface GatewayRouteSpecHttpRouteMatchHeaders {
  /**
   * Specify True to match anything except the match criteria. The default value is False.
   *
   * @schema GatewayRouteSpecHttpRouteMatchHeaders#invert
   */
  readonly invert?: boolean;

  /**
   * The HeaderMatchMethod object.
   *
   * @schema GatewayRouteSpecHttpRouteMatchHeaders#match
   */
  readonly match?: GatewayRouteSpecHttpRouteMatchHeadersMatch;

  /**
   * A name for the HTTP header in the client request that will be matched on.
   *
   * @schema GatewayRouteSpecHttpRouteMatchHeaders#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'GatewayRouteSpecHttpRouteMatchHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecHttpRouteMatchHeaders(obj: GatewayRouteSpecHttpRouteMatchHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'invert': obj.invert,
    'match': toJson_GatewayRouteSpecHttpRouteMatchHeadersMatch(obj.match),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The client specified Hostname to match on.
 *
 * @schema GatewayRouteSpecHttpRouteMatchHostname
 */
export interface GatewayRouteSpecHttpRouteMatchHostname {
  /**
   * The value sent by the client must match the specified value exactly.
   *
   * @schema GatewayRouteSpecHttpRouteMatchHostname#exact
   */
  readonly exact?: string;

  /**
   * The value sent by the client must end with the specified characters.
   *
   * @schema GatewayRouteSpecHttpRouteMatchHostname#suffix
   */
  readonly suffix?: string;

}

/**
 * Converts an object of type 'GatewayRouteSpecHttpRouteMatchHostname' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecHttpRouteMatchHostname(obj: GatewayRouteSpecHttpRouteMatchHostname | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exact': obj.exact,
    'suffix': obj.suffix,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The client request method to match on.
 *
 * @schema GatewayRouteSpecHttpRouteMatchMethod
 */
export enum GatewayRouteSpecHttpRouteMatchMethod {
  /** CONNECT */
  CONNECT = "CONNECT",
  /** DELETE */
  DELETE = "DELETE",
  /** GET */
  GET = "GET",
  /** HEAD */
  HEAD = "HEAD",
  /** OPTIONS */
  OPTIONS = "OPTIONS",
  /** PATCH */
  PATCH = "PATCH",
  /** POST */
  POST = "POST",
  /** PUT */
  PUT = "PUT",
  /** TRACE */
  TRACE = "TRACE",
}

/**
 * Specified path of the request to be matched on
 *
 * @schema GatewayRouteSpecHttpRouteMatchPath
 */
export interface GatewayRouteSpecHttpRouteMatchPath {
  /**
   * The value sent by the client must match the specified value exactly.
   *
   * @schema GatewayRouteSpecHttpRouteMatchPath#exact
   */
  readonly exact?: string;

  /**
   * The value sent by the client must end with the specified characters.
   *
   * @schema GatewayRouteSpecHttpRouteMatchPath#regex
   */
  readonly regex?: string;

}

/**
 * Converts an object of type 'GatewayRouteSpecHttpRouteMatchPath' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecHttpRouteMatchPath(obj: GatewayRouteSpecHttpRouteMatchPath | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exact': obj.exact,
    'regex': obj.regex,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPQueryParameters refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HttpQueryParameter.html
 *
 * @schema GatewayRouteSpecHttpRouteMatchQueryParameters
 */
export interface GatewayRouteSpecHttpRouteMatchQueryParameters {
  /**
   * The QueryMatchMethod object.
   *
   * @schema GatewayRouteSpecHttpRouteMatchQueryParameters#match
   */
  readonly match?: GatewayRouteSpecHttpRouteMatchQueryParametersMatch;

  /**
   * @schema GatewayRouteSpecHttpRouteMatchQueryParameters#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'GatewayRouteSpecHttpRouteMatchQueryParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecHttpRouteMatchQueryParameters(obj: GatewayRouteSpecHttpRouteMatchQueryParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'match': toJson_GatewayRouteSpecHttpRouteMatchQueryParametersMatch(obj.match),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * GatewayRouteHostnameRewrite refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_GatewayRouteHostnameRewrite.html ENABLE or DISABLE default behavior for Hostname rewrite
 *
 * @schema GatewayRouteSpecGrpcRouteActionRewriteHostname
 */
export interface GatewayRouteSpecGrpcRouteActionRewriteHostname {
  /**
   * @schema GatewayRouteSpecGrpcRouteActionRewriteHostname#defaultTargetHostname
   */
  readonly defaultTargetHostname?: GatewayRouteSpecGrpcRouteActionRewriteHostnameDefaultTargetHostname;

}

/**
 * Converts an object of type 'GatewayRouteSpecGrpcRouteActionRewriteHostname' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecGrpcRouteActionRewriteHostname(obj: GatewayRouteSpecGrpcRouteActionRewriteHostname | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'defaultTargetHostname': obj.defaultTargetHostname,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The virtual service to associate with the gateway route target.
 *
 * @schema GatewayRouteSpecGrpcRouteActionTargetVirtualService
 */
export interface GatewayRouteSpecGrpcRouteActionTargetVirtualService {
  /**
   * Amazon Resource Name to AppMesh VirtualService object to associate with the gateway route virtual service target. Exactly one of 'virtualServiceRef' or 'virtualServiceARN' must be specified.
   *
   * @schema GatewayRouteSpecGrpcRouteActionTargetVirtualService#virtualServiceARN
   */
  readonly virtualServiceArn?: string;

  /**
   * Reference to Kubernetes VirtualService CR in cluster to associate with the gateway route virtual service target. Exactly one of 'virtualServiceRef' or 'virtualServiceARN' must be specified.
   *
   * @schema GatewayRouteSpecGrpcRouteActionTargetVirtualService#virtualServiceRef
   */
  readonly virtualServiceRef?: GatewayRouteSpecGrpcRouteActionTargetVirtualServiceVirtualServiceRef;

}

/**
 * Converts an object of type 'GatewayRouteSpecGrpcRouteActionTargetVirtualService' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecGrpcRouteActionTargetVirtualService(obj: GatewayRouteSpecGrpcRouteActionTargetVirtualService | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'virtualServiceARN': obj.virtualServiceArn,
    'virtualServiceRef': toJson_GatewayRouteSpecGrpcRouteActionTargetVirtualServiceVirtualServiceRef(obj.virtualServiceRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents the data to match from the request.
 *
 * @schema GatewayRouteSpecGrpcRouteMatchMetadataMatch
 */
export interface GatewayRouteSpecGrpcRouteMatchMetadataMatch {
  /**
   * The value sent by the client must match the specified value exactly.
   *
   * @schema GatewayRouteSpecGrpcRouteMatchMetadataMatch#exact
   */
  readonly exact?: string;

  /**
   * The value sent by the client must begin with the specified characters.
   *
   * @schema GatewayRouteSpecGrpcRouteMatchMetadataMatch#prefix
   */
  readonly prefix?: string;

  /**
   * An object that represents the range of values to match on
   *
   * @schema GatewayRouteSpecGrpcRouteMatchMetadataMatch#range
   */
  readonly range?: GatewayRouteSpecGrpcRouteMatchMetadataMatchRange;

  /**
   * The value sent by the client must include the specified characters.
   *
   * @schema GatewayRouteSpecGrpcRouteMatchMetadataMatch#regex
   */
  readonly regex?: string;

  /**
   * The value sent by the client must end with the specified characters.
   *
   * @schema GatewayRouteSpecGrpcRouteMatchMetadataMatch#suffix
   */
  readonly suffix?: string;

}

/**
 * Converts an object of type 'GatewayRouteSpecGrpcRouteMatchMetadataMatch' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecGrpcRouteMatchMetadataMatch(obj: GatewayRouteSpecGrpcRouteMatchMetadataMatch | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exact': obj.exact,
    'prefix': obj.prefix,
    'range': toJson_GatewayRouteSpecGrpcRouteMatchMetadataMatchRange(obj.range),
    'regex': obj.regex,
    'suffix': obj.suffix,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * GatewayRouteHostnameRewrite refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_GatewayRouteHostnameRewrite.html ENABLE or DISABLE default behavior for Hostname rewrite
 *
 * @schema GatewayRouteSpecHttp2RouteActionRewriteHostname
 */
export interface GatewayRouteSpecHttp2RouteActionRewriteHostname {
  /**
   * @schema GatewayRouteSpecHttp2RouteActionRewriteHostname#defaultTargetHostname
   */
  readonly defaultTargetHostname?: GatewayRouteSpecHttp2RouteActionRewriteHostnameDefaultTargetHostname;

}

/**
 * Converts an object of type 'GatewayRouteSpecHttp2RouteActionRewriteHostname' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecHttp2RouteActionRewriteHostname(obj: GatewayRouteSpecHttp2RouteActionRewriteHostname | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'defaultTargetHostname': obj.defaultTargetHostname,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * GatewayRoutePathRewrite refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HttpGatewayRoutePathRewrite.html
 *
 * @schema GatewayRouteSpecHttp2RouteActionRewritePath
 */
export interface GatewayRouteSpecHttp2RouteActionRewritePath {
  /**
   * @schema GatewayRouteSpecHttp2RouteActionRewritePath#exact
   */
  readonly exact?: string;

}

/**
 * Converts an object of type 'GatewayRouteSpecHttp2RouteActionRewritePath' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecHttp2RouteActionRewritePath(obj: GatewayRouteSpecHttp2RouteActionRewritePath | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exact': obj.exact,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * GatewayRoutePrefixRewrite refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HttpGatewayRoutePrefixRewrite.html
 *
 * @schema GatewayRouteSpecHttp2RouteActionRewritePrefix
 */
export interface GatewayRouteSpecHttp2RouteActionRewritePrefix {
  /**
   * @schema GatewayRouteSpecHttp2RouteActionRewritePrefix#defaultPrefix
   */
  readonly defaultPrefix?: GatewayRouteSpecHttp2RouteActionRewritePrefixDefaultPrefix;

  /**
   * When DefaultPrefix is specified, Value cannot be set
   *
   * @schema GatewayRouteSpecHttp2RouteActionRewritePrefix#value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'GatewayRouteSpecHttp2RouteActionRewritePrefix' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecHttp2RouteActionRewritePrefix(obj: GatewayRouteSpecHttp2RouteActionRewritePrefix | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'defaultPrefix': obj.defaultPrefix,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The virtual service to associate with the gateway route target.
 *
 * @schema GatewayRouteSpecHttp2RouteActionTargetVirtualService
 */
export interface GatewayRouteSpecHttp2RouteActionTargetVirtualService {
  /**
   * Amazon Resource Name to AppMesh VirtualService object to associate with the gateway route virtual service target. Exactly one of 'virtualServiceRef' or 'virtualServiceARN' must be specified.
   *
   * @schema GatewayRouteSpecHttp2RouteActionTargetVirtualService#virtualServiceARN
   */
  readonly virtualServiceArn?: string;

  /**
   * Reference to Kubernetes VirtualService CR in cluster to associate with the gateway route virtual service target. Exactly one of 'virtualServiceRef' or 'virtualServiceARN' must be specified.
   *
   * @schema GatewayRouteSpecHttp2RouteActionTargetVirtualService#virtualServiceRef
   */
  readonly virtualServiceRef?: GatewayRouteSpecHttp2RouteActionTargetVirtualServiceVirtualServiceRef;

}

/**
 * Converts an object of type 'GatewayRouteSpecHttp2RouteActionTargetVirtualService' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecHttp2RouteActionTargetVirtualService(obj: GatewayRouteSpecHttp2RouteActionTargetVirtualService | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'virtualServiceARN': obj.virtualServiceArn,
    'virtualServiceRef': toJson_GatewayRouteSpecHttp2RouteActionTargetVirtualServiceVirtualServiceRef(obj.virtualServiceRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The HeaderMatchMethod object.
 *
 * @schema GatewayRouteSpecHttp2RouteMatchHeadersMatch
 */
export interface GatewayRouteSpecHttp2RouteMatchHeadersMatch {
  /**
   * The value sent by the client must match the specified value exactly.
   *
   * @schema GatewayRouteSpecHttp2RouteMatchHeadersMatch#exact
   */
  readonly exact?: string;

  /**
   * The value sent by the client must begin with the specified characters.
   *
   * @schema GatewayRouteSpecHttp2RouteMatchHeadersMatch#prefix
   */
  readonly prefix?: string;

  /**
   * An object that represents the range of values to match on.
   *
   * @schema GatewayRouteSpecHttp2RouteMatchHeadersMatch#range
   */
  readonly range?: GatewayRouteSpecHttp2RouteMatchHeadersMatchRange;

  /**
   * The value sent by the client must include the specified characters.
   *
   * @schema GatewayRouteSpecHttp2RouteMatchHeadersMatch#regex
   */
  readonly regex?: string;

  /**
   * The value sent by the client must end with the specified characters.
   *
   * @schema GatewayRouteSpecHttp2RouteMatchHeadersMatch#suffix
   */
  readonly suffix?: string;

}

/**
 * Converts an object of type 'GatewayRouteSpecHttp2RouteMatchHeadersMatch' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecHttp2RouteMatchHeadersMatch(obj: GatewayRouteSpecHttp2RouteMatchHeadersMatch | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exact': obj.exact,
    'prefix': obj.prefix,
    'range': toJson_GatewayRouteSpecHttp2RouteMatchHeadersMatchRange(obj.range),
    'regex': obj.regex,
    'suffix': obj.suffix,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The QueryMatchMethod object.
 *
 * @schema GatewayRouteSpecHttp2RouteMatchQueryParametersMatch
 */
export interface GatewayRouteSpecHttp2RouteMatchQueryParametersMatch {
  /**
   * @schema GatewayRouteSpecHttp2RouteMatchQueryParametersMatch#exact
   */
  readonly exact?: string;

}

/**
 * Converts an object of type 'GatewayRouteSpecHttp2RouteMatchQueryParametersMatch' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecHttp2RouteMatchQueryParametersMatch(obj: GatewayRouteSpecHttp2RouteMatchQueryParametersMatch | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exact': obj.exact,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * GatewayRouteHostnameRewrite refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_GatewayRouteHostnameRewrite.html ENABLE or DISABLE default behavior for Hostname rewrite
 *
 * @schema GatewayRouteSpecHttpRouteActionRewriteHostname
 */
export interface GatewayRouteSpecHttpRouteActionRewriteHostname {
  /**
   * @schema GatewayRouteSpecHttpRouteActionRewriteHostname#defaultTargetHostname
   */
  readonly defaultTargetHostname?: GatewayRouteSpecHttpRouteActionRewriteHostnameDefaultTargetHostname;

}

/**
 * Converts an object of type 'GatewayRouteSpecHttpRouteActionRewriteHostname' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecHttpRouteActionRewriteHostname(obj: GatewayRouteSpecHttpRouteActionRewriteHostname | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'defaultTargetHostname': obj.defaultTargetHostname,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * GatewayRoutePathRewrite refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HttpGatewayRoutePathRewrite.html
 *
 * @schema GatewayRouteSpecHttpRouteActionRewritePath
 */
export interface GatewayRouteSpecHttpRouteActionRewritePath {
  /**
   * @schema GatewayRouteSpecHttpRouteActionRewritePath#exact
   */
  readonly exact?: string;

}

/**
 * Converts an object of type 'GatewayRouteSpecHttpRouteActionRewritePath' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecHttpRouteActionRewritePath(obj: GatewayRouteSpecHttpRouteActionRewritePath | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exact': obj.exact,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * GatewayRoutePrefixRewrite refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HttpGatewayRoutePrefixRewrite.html
 *
 * @schema GatewayRouteSpecHttpRouteActionRewritePrefix
 */
export interface GatewayRouteSpecHttpRouteActionRewritePrefix {
  /**
   * @schema GatewayRouteSpecHttpRouteActionRewritePrefix#defaultPrefix
   */
  readonly defaultPrefix?: GatewayRouteSpecHttpRouteActionRewritePrefixDefaultPrefix;

  /**
   * When DefaultPrefix is specified, Value cannot be set
   *
   * @schema GatewayRouteSpecHttpRouteActionRewritePrefix#value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'GatewayRouteSpecHttpRouteActionRewritePrefix' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecHttpRouteActionRewritePrefix(obj: GatewayRouteSpecHttpRouteActionRewritePrefix | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'defaultPrefix': obj.defaultPrefix,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The virtual service to associate with the gateway route target.
 *
 * @schema GatewayRouteSpecHttpRouteActionTargetVirtualService
 */
export interface GatewayRouteSpecHttpRouteActionTargetVirtualService {
  /**
   * Amazon Resource Name to AppMesh VirtualService object to associate with the gateway route virtual service target. Exactly one of 'virtualServiceRef' or 'virtualServiceARN' must be specified.
   *
   * @schema GatewayRouteSpecHttpRouteActionTargetVirtualService#virtualServiceARN
   */
  readonly virtualServiceArn?: string;

  /**
   * Reference to Kubernetes VirtualService CR in cluster to associate with the gateway route virtual service target. Exactly one of 'virtualServiceRef' or 'virtualServiceARN' must be specified.
   *
   * @schema GatewayRouteSpecHttpRouteActionTargetVirtualService#virtualServiceRef
   */
  readonly virtualServiceRef?: GatewayRouteSpecHttpRouteActionTargetVirtualServiceVirtualServiceRef;

}

/**
 * Converts an object of type 'GatewayRouteSpecHttpRouteActionTargetVirtualService' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecHttpRouteActionTargetVirtualService(obj: GatewayRouteSpecHttpRouteActionTargetVirtualService | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'virtualServiceARN': obj.virtualServiceArn,
    'virtualServiceRef': toJson_GatewayRouteSpecHttpRouteActionTargetVirtualServiceVirtualServiceRef(obj.virtualServiceRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The HeaderMatchMethod object.
 *
 * @schema GatewayRouteSpecHttpRouteMatchHeadersMatch
 */
export interface GatewayRouteSpecHttpRouteMatchHeadersMatch {
  /**
   * The value sent by the client must match the specified value exactly.
   *
   * @schema GatewayRouteSpecHttpRouteMatchHeadersMatch#exact
   */
  readonly exact?: string;

  /**
   * The value sent by the client must begin with the specified characters.
   *
   * @schema GatewayRouteSpecHttpRouteMatchHeadersMatch#prefix
   */
  readonly prefix?: string;

  /**
   * An object that represents the range of values to match on.
   *
   * @schema GatewayRouteSpecHttpRouteMatchHeadersMatch#range
   */
  readonly range?: GatewayRouteSpecHttpRouteMatchHeadersMatchRange;

  /**
   * The value sent by the client must include the specified characters.
   *
   * @schema GatewayRouteSpecHttpRouteMatchHeadersMatch#regex
   */
  readonly regex?: string;

  /**
   * The value sent by the client must end with the specified characters.
   *
   * @schema GatewayRouteSpecHttpRouteMatchHeadersMatch#suffix
   */
  readonly suffix?: string;

}

/**
 * Converts an object of type 'GatewayRouteSpecHttpRouteMatchHeadersMatch' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecHttpRouteMatchHeadersMatch(obj: GatewayRouteSpecHttpRouteMatchHeadersMatch | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exact': obj.exact,
    'prefix': obj.prefix,
    'range': toJson_GatewayRouteSpecHttpRouteMatchHeadersMatchRange(obj.range),
    'regex': obj.regex,
    'suffix': obj.suffix,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The QueryMatchMethod object.
 *
 * @schema GatewayRouteSpecHttpRouteMatchQueryParametersMatch
 */
export interface GatewayRouteSpecHttpRouteMatchQueryParametersMatch {
  /**
   * @schema GatewayRouteSpecHttpRouteMatchQueryParametersMatch#exact
   */
  readonly exact?: string;

}

/**
 * Converts an object of type 'GatewayRouteSpecHttpRouteMatchQueryParametersMatch' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecHttpRouteMatchQueryParametersMatch(obj: GatewayRouteSpecHttpRouteMatchQueryParametersMatch | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exact': obj.exact,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema GatewayRouteSpecGrpcRouteActionRewriteHostnameDefaultTargetHostname
 */
export enum GatewayRouteSpecGrpcRouteActionRewriteHostnameDefaultTargetHostname {
  /** ENABLED */
  ENABLED = "ENABLED",
  /** DISABLED */
  DISABLED = "DISABLED",
}

/**
 * Reference to Kubernetes VirtualService CR in cluster to associate with the gateway route virtual service target. Exactly one of 'virtualServiceRef' or 'virtualServiceARN' must be specified.
 *
 * @schema GatewayRouteSpecGrpcRouteActionTargetVirtualServiceVirtualServiceRef
 */
export interface GatewayRouteSpecGrpcRouteActionTargetVirtualServiceVirtualServiceRef {
  /**
   * Name is the name of VirtualService CR
   *
   * @schema GatewayRouteSpecGrpcRouteActionTargetVirtualServiceVirtualServiceRef#name
   */
  readonly name: string;

  /**
   * Namespace is the namespace of VirtualService CR. If unspecified, defaults to the referencing object's namespace
   *
   * @schema GatewayRouteSpecGrpcRouteActionTargetVirtualServiceVirtualServiceRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'GatewayRouteSpecGrpcRouteActionTargetVirtualServiceVirtualServiceRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecGrpcRouteActionTargetVirtualServiceVirtualServiceRef(obj: GatewayRouteSpecGrpcRouteActionTargetVirtualServiceVirtualServiceRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents the range of values to match on
 *
 * @schema GatewayRouteSpecGrpcRouteMatchMetadataMatchRange
 */
export interface GatewayRouteSpecGrpcRouteMatchMetadataMatchRange {
  /**
   * The end of the range.
   *
   * @schema GatewayRouteSpecGrpcRouteMatchMetadataMatchRange#end
   */
  readonly end: number;

  /**
   * The start of the range.
   *
   * @schema GatewayRouteSpecGrpcRouteMatchMetadataMatchRange#start
   */
  readonly start: number;

}

/**
 * Converts an object of type 'GatewayRouteSpecGrpcRouteMatchMetadataMatchRange' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecGrpcRouteMatchMetadataMatchRange(obj: GatewayRouteSpecGrpcRouteMatchMetadataMatchRange | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'end': obj.end,
    'start': obj.start,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema GatewayRouteSpecHttp2RouteActionRewriteHostnameDefaultTargetHostname
 */
export enum GatewayRouteSpecHttp2RouteActionRewriteHostnameDefaultTargetHostname {
  /** ENABLED */
  ENABLED = "ENABLED",
  /** DISABLED */
  DISABLED = "DISABLED",
}

/**
 * @schema GatewayRouteSpecHttp2RouteActionRewritePrefixDefaultPrefix
 */
export enum GatewayRouteSpecHttp2RouteActionRewritePrefixDefaultPrefix {
  /** ENABLED */
  ENABLED = "ENABLED",
  /** DISABLED */
  DISABLED = "DISABLED",
}

/**
 * Reference to Kubernetes VirtualService CR in cluster to associate with the gateway route virtual service target. Exactly one of 'virtualServiceRef' or 'virtualServiceARN' must be specified.
 *
 * @schema GatewayRouteSpecHttp2RouteActionTargetVirtualServiceVirtualServiceRef
 */
export interface GatewayRouteSpecHttp2RouteActionTargetVirtualServiceVirtualServiceRef {
  /**
   * Name is the name of VirtualService CR
   *
   * @schema GatewayRouteSpecHttp2RouteActionTargetVirtualServiceVirtualServiceRef#name
   */
  readonly name: string;

  /**
   * Namespace is the namespace of VirtualService CR. If unspecified, defaults to the referencing object's namespace
   *
   * @schema GatewayRouteSpecHttp2RouteActionTargetVirtualServiceVirtualServiceRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'GatewayRouteSpecHttp2RouteActionTargetVirtualServiceVirtualServiceRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecHttp2RouteActionTargetVirtualServiceVirtualServiceRef(obj: GatewayRouteSpecHttp2RouteActionTargetVirtualServiceVirtualServiceRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents the range of values to match on.
 *
 * @schema GatewayRouteSpecHttp2RouteMatchHeadersMatchRange
 */
export interface GatewayRouteSpecHttp2RouteMatchHeadersMatchRange {
  /**
   * The end of the range.
   *
   * @schema GatewayRouteSpecHttp2RouteMatchHeadersMatchRange#end
   */
  readonly end: number;

  /**
   * The start of the range.
   *
   * @schema GatewayRouteSpecHttp2RouteMatchHeadersMatchRange#start
   */
  readonly start: number;

}

/**
 * Converts an object of type 'GatewayRouteSpecHttp2RouteMatchHeadersMatchRange' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecHttp2RouteMatchHeadersMatchRange(obj: GatewayRouteSpecHttp2RouteMatchHeadersMatchRange | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'end': obj.end,
    'start': obj.start,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema GatewayRouteSpecHttpRouteActionRewriteHostnameDefaultTargetHostname
 */
export enum GatewayRouteSpecHttpRouteActionRewriteHostnameDefaultTargetHostname {
  /** ENABLED */
  ENABLED = "ENABLED",
  /** DISABLED */
  DISABLED = "DISABLED",
}

/**
 * @schema GatewayRouteSpecHttpRouteActionRewritePrefixDefaultPrefix
 */
export enum GatewayRouteSpecHttpRouteActionRewritePrefixDefaultPrefix {
  /** ENABLED */
  ENABLED = "ENABLED",
  /** DISABLED */
  DISABLED = "DISABLED",
}

/**
 * Reference to Kubernetes VirtualService CR in cluster to associate with the gateway route virtual service target. Exactly one of 'virtualServiceRef' or 'virtualServiceARN' must be specified.
 *
 * @schema GatewayRouteSpecHttpRouteActionTargetVirtualServiceVirtualServiceRef
 */
export interface GatewayRouteSpecHttpRouteActionTargetVirtualServiceVirtualServiceRef {
  /**
   * Name is the name of VirtualService CR
   *
   * @schema GatewayRouteSpecHttpRouteActionTargetVirtualServiceVirtualServiceRef#name
   */
  readonly name: string;

  /**
   * Namespace is the namespace of VirtualService CR. If unspecified, defaults to the referencing object's namespace
   *
   * @schema GatewayRouteSpecHttpRouteActionTargetVirtualServiceVirtualServiceRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'GatewayRouteSpecHttpRouteActionTargetVirtualServiceVirtualServiceRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecHttpRouteActionTargetVirtualServiceVirtualServiceRef(obj: GatewayRouteSpecHttpRouteActionTargetVirtualServiceVirtualServiceRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents the range of values to match on.
 *
 * @schema GatewayRouteSpecHttpRouteMatchHeadersMatchRange
 */
export interface GatewayRouteSpecHttpRouteMatchHeadersMatchRange {
  /**
   * The end of the range.
   *
   * @schema GatewayRouteSpecHttpRouteMatchHeadersMatchRange#end
   */
  readonly end: number;

  /**
   * The start of the range.
   *
   * @schema GatewayRouteSpecHttpRouteMatchHeadersMatchRange#start
   */
  readonly start: number;

}

/**
 * Converts an object of type 'GatewayRouteSpecHttpRouteMatchHeadersMatchRange' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayRouteSpecHttpRouteMatchHeadersMatchRange(obj: GatewayRouteSpecHttpRouteMatchHeadersMatchRange | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'end': obj.end,
    'start': obj.start,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * Mesh is the Schema for the meshes API
 *
 * @schema Mesh
 */
export class Mesh extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Mesh"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'appmesh.k8s.aws/v1beta2',
    kind: 'Mesh',
  }

  /**
   * Renders a Kubernetes manifest for "Mesh".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: MeshProps = {}): any {
    return {
      ...Mesh.GVK,
      ...toJson_MeshProps(props),
    };
  }

  /**
   * Defines a "Mesh" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: MeshProps = {}) {
    super(scope, id, {
      ...Mesh.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Mesh.GVK,
      ...toJson_MeshProps(resolved),
    };
  }
}

/**
 * Mesh is the Schema for the meshes API
 *
 * @schema Mesh
 */
export interface MeshProps {
  /**
   * @schema Mesh#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * MeshSpec defines the desired state of Mesh refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_MeshSpec.html
   *
   * @schema Mesh#spec
   */
  readonly spec?: MeshSpec;

}

/**
 * Converts an object of type 'MeshProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MeshProps(obj: MeshProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_MeshSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * MeshSpec defines the desired state of Mesh refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_MeshSpec.html
 *
 * @schema MeshSpec
 */
export interface MeshSpec {
  /**
   * AWSName is the AppMesh Mesh object's name. If unspecified or empty, it defaults to be "${name}" of k8s Mesh
   *
   * @schema MeshSpec#awsName
   */
  readonly awsName?: string;

  /**
   * The egress filter rules for the service mesh. If unspecified, default settings from AWS API will be applied. Refer to AWS Docs for default settings.
   *
   * @schema MeshSpec#egressFilter
   */
  readonly egressFilter?: MeshSpecEgressFilter;

  /**
   * The AWS IAM account ID of the service mesh owner. Required if the account ID is not your own.
   *
   * @schema MeshSpec#meshOwner
   */
  readonly meshOwner?: string;

  /**
   * @schema MeshSpec#meshServiceDiscovery
   */
  readonly meshServiceDiscovery?: MeshSpecMeshServiceDiscovery;

  /**
   * NamespaceSelector selects Namespaces using labels to designate mesh membership. This field follows standard label selector semantics: 	if present but empty, it selects all namespaces. 	if absent, it selects no namespace.
   *
   * @schema MeshSpec#namespaceSelector
   */
  readonly namespaceSelector?: MeshSpecNamespaceSelector;

}

/**
 * Converts an object of type 'MeshSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MeshSpec(obj: MeshSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'awsName': obj.awsName,
    'egressFilter': toJson_MeshSpecEgressFilter(obj.egressFilter),
    'meshOwner': obj.meshOwner,
    'meshServiceDiscovery': toJson_MeshSpecMeshServiceDiscovery(obj.meshServiceDiscovery),
    'namespaceSelector': toJson_MeshSpecNamespaceSelector(obj.namespaceSelector),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The egress filter rules for the service mesh. If unspecified, default settings from AWS API will be applied. Refer to AWS Docs for default settings.
 *
 * @schema MeshSpecEgressFilter
 */
export interface MeshSpecEgressFilter {
  /**
   * The egress filter type.
   *
   * @schema MeshSpecEgressFilter#type
   */
  readonly type: MeshSpecEgressFilterType;

}

/**
 * Converts an object of type 'MeshSpecEgressFilter' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MeshSpecEgressFilter(obj: MeshSpecEgressFilter | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema MeshSpecMeshServiceDiscovery
 */
export interface MeshSpecMeshServiceDiscovery {
  /**
   * The ipPreference for the mesh.
   *
   * @schema MeshSpecMeshServiceDiscovery#ipPreference
   */
  readonly ipPreference?: MeshSpecMeshServiceDiscoveryIpPreference;

}

/**
 * Converts an object of type 'MeshSpecMeshServiceDiscovery' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MeshSpecMeshServiceDiscovery(obj: MeshSpecMeshServiceDiscovery | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ipPreference': obj.ipPreference,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * NamespaceSelector selects Namespaces using labels to designate mesh membership. This field follows standard label selector semantics: 	if present but empty, it selects all namespaces. 	if absent, it selects no namespace.
 *
 * @schema MeshSpecNamespaceSelector
 */
export interface MeshSpecNamespaceSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema MeshSpecNamespaceSelector#matchExpressions
   */
  readonly matchExpressions?: MeshSpecNamespaceSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema MeshSpecNamespaceSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'MeshSpecNamespaceSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MeshSpecNamespaceSelector(obj: MeshSpecNamespaceSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_MeshSpecNamespaceSelectorMatchExpressions(y)),
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The egress filter type.
 *
 * @schema MeshSpecEgressFilterType
 */
export enum MeshSpecEgressFilterType {
  /** ALLOW_ALL */
  ALLOW_UNDERSCORE_ALL = "ALLOW_ALL",
  /** DROP_ALL */
  DROP_UNDERSCORE_ALL = "DROP_ALL",
}

/**
 * The ipPreference for the mesh.
 *
 * @schema MeshSpecMeshServiceDiscoveryIpPreference
 */
export enum MeshSpecMeshServiceDiscoveryIpPreference {
  /** IPv6_ONLY */
  I_PV6_UNDERSCORE_ONLY = "IPv6_ONLY",
  /** IPv4_ONLY */
  I_PV4_UNDERSCORE_ONLY = "IPv4_ONLY",
}

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema MeshSpecNamespaceSelectorMatchExpressions
 */
export interface MeshSpecNamespaceSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema MeshSpecNamespaceSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema MeshSpecNamespaceSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
   *
   * @schema MeshSpecNamespaceSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'MeshSpecNamespaceSelectorMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MeshSpecNamespaceSelectorMatchExpressions(obj: MeshSpecNamespaceSelectorMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * VirtualGateway is the Schema for the virtualgateways API
 *
 * @schema VirtualGateway
 */
export class VirtualGateway extends ApiObject {
  /**
   * Returns the apiVersion and kind for "VirtualGateway"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'appmesh.k8s.aws/v1beta2',
    kind: 'VirtualGateway',
  }

  /**
   * Renders a Kubernetes manifest for "VirtualGateway".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: VirtualGatewayProps = {}): any {
    return {
      ...VirtualGateway.GVK,
      ...toJson_VirtualGatewayProps(props),
    };
  }

  /**
   * Defines a "VirtualGateway" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: VirtualGatewayProps = {}) {
    super(scope, id, {
      ...VirtualGateway.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...VirtualGateway.GVK,
      ...toJson_VirtualGatewayProps(resolved),
    };
  }
}

/**
 * VirtualGateway is the Schema for the virtualgateways API
 *
 * @schema VirtualGateway
 */
export interface VirtualGatewayProps {
  /**
   * @schema VirtualGateway#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * VirtualGatewaySpec defines the desired state of VirtualGateway refers to https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_gateways.html
   *
   * @schema VirtualGateway#spec
   */
  readonly spec?: VirtualGatewaySpec;

}

/**
 * Converts an object of type 'VirtualGatewayProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualGatewayProps(obj: VirtualGatewayProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_VirtualGatewaySpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * VirtualGatewaySpec defines the desired state of VirtualGateway refers to https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_gateways.html
 *
 * @schema VirtualGatewaySpec
 */
export interface VirtualGatewaySpec {
  /**
   * AWSName is the AppMesh VirtualGateway object's name. If unspecified or empty, it defaults to be "${name}_${namespace}" of k8s VirtualGateway
   *
   * @schema VirtualGatewaySpec#awsName
   */
  readonly awsName?: string;

  /**
   * A reference to an object that represents the defaults for backend GatewayRoutes.
   *
   * @schema VirtualGatewaySpec#backendDefaults
   */
  readonly backendDefaults?: VirtualGatewaySpecBackendDefaults;

  /**
   * GatewayRouteSelector selects GatewayRoutes using labels to designate GatewayRoute membership. If not specified it selects all GatewayRoutes in that namespace.
   *
   * @schema VirtualGatewaySpec#gatewayRouteSelector
   */
  readonly gatewayRouteSelector?: VirtualGatewaySpecGatewayRouteSelector;

  /**
   * The listener that the virtual gateway is expected to receive inbound traffic from
   *
   * @schema VirtualGatewaySpec#listeners
   */
  readonly listeners?: VirtualGatewaySpecListeners[];

  /**
   * The inbound and outbound access logging information for the virtual gateway.
   *
   * @schema VirtualGatewaySpec#logging
   */
  readonly logging?: VirtualGatewaySpecLogging;

  /**
   * A reference to k8s Mesh CR that this VirtualGateway belongs to. The admission controller populates it using Meshes's selector, and prevents users from setting this field.
   * Populated by the system. Read-only.
   *
   * @schema VirtualGatewaySpec#meshRef
   */
  readonly meshRef?: VirtualGatewaySpecMeshRef;

  /**
   * NamespaceSelector selects Namespaces using labels to designate GatewayRoute membership. This field follows standard label selector semantics; if present but empty, it selects all namespaces.
   *
   * @schema VirtualGatewaySpec#namespaceSelector
   */
  readonly namespaceSelector?: VirtualGatewaySpecNamespaceSelector;

  /**
   * PodSelector selects Pods using labels to designate VirtualGateway membership. This field follows standard label selector semantics: 	if present but empty, it selects all pods within namespace. 	if absent, it selects no pod.
   *
   * @schema VirtualGatewaySpec#podSelector
   */
  readonly podSelector?: VirtualGatewaySpecPodSelector;

}

/**
 * Converts an object of type 'VirtualGatewaySpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualGatewaySpec(obj: VirtualGatewaySpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'awsName': obj.awsName,
    'backendDefaults': toJson_VirtualGatewaySpecBackendDefaults(obj.backendDefaults),
    'gatewayRouteSelector': toJson_VirtualGatewaySpecGatewayRouteSelector(obj.gatewayRouteSelector),
    'listeners': obj.listeners?.map(y => toJson_VirtualGatewaySpecListeners(y)),
    'logging': toJson_VirtualGatewaySpecLogging(obj.logging),
    'meshRef': toJson_VirtualGatewaySpecMeshRef(obj.meshRef),
    'namespaceSelector': toJson_VirtualGatewaySpecNamespaceSelector(obj.namespaceSelector),
    'podSelector': toJson_VirtualGatewaySpecPodSelector(obj.podSelector),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A reference to an object that represents the defaults for backend GatewayRoutes.
 *
 * @schema VirtualGatewaySpecBackendDefaults
 */
export interface VirtualGatewaySpecBackendDefaults {
  /**
   * A reference to an object that represents a client policy.
   *
   * @schema VirtualGatewaySpecBackendDefaults#clientPolicy
   */
  readonly clientPolicy?: VirtualGatewaySpecBackendDefaultsClientPolicy;

}

/**
 * Converts an object of type 'VirtualGatewaySpecBackendDefaults' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualGatewaySpecBackendDefaults(obj: VirtualGatewaySpecBackendDefaults | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'clientPolicy': toJson_VirtualGatewaySpecBackendDefaultsClientPolicy(obj.clientPolicy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * GatewayRouteSelector selects GatewayRoutes using labels to designate GatewayRoute membership. If not specified it selects all GatewayRoutes in that namespace.
 *
 * @schema VirtualGatewaySpecGatewayRouteSelector
 */
export interface VirtualGatewaySpecGatewayRouteSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema VirtualGatewaySpecGatewayRouteSelector#matchExpressions
   */
  readonly matchExpressions?: VirtualGatewaySpecGatewayRouteSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema VirtualGatewaySpecGatewayRouteSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'VirtualGatewaySpecGatewayRouteSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualGatewaySpecGatewayRouteSelector(obj: VirtualGatewaySpecGatewayRouteSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_VirtualGatewaySpecGatewayRouteSelectorMatchExpressions(y)),
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * VirtualGatewayListener refers to https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_gateways.html
 *
 * @schema VirtualGatewaySpecListeners
 */
export interface VirtualGatewaySpecListeners {
  /**
   * The connection pool settings for the listener
   *
   * @schema VirtualGatewaySpecListeners#connectionPool
   */
  readonly connectionPool?: VirtualGatewaySpecListenersConnectionPool;

  /**
   * The health check information for the listener.
   *
   * @schema VirtualGatewaySpecListeners#healthCheck
   */
  readonly healthCheck?: VirtualGatewaySpecListenersHealthCheck;

  /**
   * The port mapping information for the listener.
   *
   * @schema VirtualGatewaySpecListeners#portMapping
   */
  readonly portMapping: VirtualGatewaySpecListenersPortMapping;

  /**
   * A reference to an object that represents the Transport Layer Security (TLS) properties for a listener.
   *
   * @schema VirtualGatewaySpecListeners#tls
   */
  readonly tls?: VirtualGatewaySpecListenersTls;

}

/**
 * Converts an object of type 'VirtualGatewaySpecListeners' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualGatewaySpecListeners(obj: VirtualGatewaySpecListeners | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'connectionPool': toJson_VirtualGatewaySpecListenersConnectionPool(obj.connectionPool),
    'healthCheck': toJson_VirtualGatewaySpecListenersHealthCheck(obj.healthCheck),
    'portMapping': toJson_VirtualGatewaySpecListenersPortMapping(obj.portMapping),
    'tls': toJson_VirtualGatewaySpecListenersTls(obj.tls),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The inbound and outbound access logging information for the virtual gateway.
 *
 * @schema VirtualGatewaySpecLogging
 */
export interface VirtualGatewaySpecLogging {
  /**
   * The access log configuration for a virtual Gateway.
   *
   * @schema VirtualGatewaySpecLogging#accessLog
   */
  readonly accessLog?: VirtualGatewaySpecLoggingAccessLog;

}

/**
 * Converts an object of type 'VirtualGatewaySpecLogging' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualGatewaySpecLogging(obj: VirtualGatewaySpecLogging | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'accessLog': toJson_VirtualGatewaySpecLoggingAccessLog(obj.accessLog),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A reference to k8s Mesh CR that this VirtualGateway belongs to. The admission controller populates it using Meshes's selector, and prevents users from setting this field.
 * Populated by the system. Read-only.
 *
 * @schema VirtualGatewaySpecMeshRef
 */
export interface VirtualGatewaySpecMeshRef {
  /**
   * Name is the name of Mesh CR
   *
   * @schema VirtualGatewaySpecMeshRef#name
   */
  readonly name: string;

  /**
   * UID is the UID of Mesh CR
   *
   * @schema VirtualGatewaySpecMeshRef#uid
   */
  readonly uid: string;

}

/**
 * Converts an object of type 'VirtualGatewaySpecMeshRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualGatewaySpecMeshRef(obj: VirtualGatewaySpecMeshRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'uid': obj.uid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * NamespaceSelector selects Namespaces using labels to designate GatewayRoute membership. This field follows standard label selector semantics; if present but empty, it selects all namespaces.
 *
 * @schema VirtualGatewaySpecNamespaceSelector
 */
export interface VirtualGatewaySpecNamespaceSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema VirtualGatewaySpecNamespaceSelector#matchExpressions
   */
  readonly matchExpressions?: VirtualGatewaySpecNamespaceSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema VirtualGatewaySpecNamespaceSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'VirtualGatewaySpecNamespaceSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualGatewaySpecNamespaceSelector(obj: VirtualGatewaySpecNamespaceSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_VirtualGatewaySpecNamespaceSelectorMatchExpressions(y)),
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PodSelector selects Pods using labels to designate VirtualGateway membership. This field follows standard label selector semantics: 	if present but empty, it selects all pods within namespace. 	if absent, it selects no pod.
 *
 * @schema VirtualGatewaySpecPodSelector
 */
export interface VirtualGatewaySpecPodSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema VirtualGatewaySpecPodSelector#matchExpressions
   */
  readonly matchExpressions?: VirtualGatewaySpecPodSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema VirtualGatewaySpecPodSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'VirtualGatewaySpecPodSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualGatewaySpecPodSelector(obj: VirtualGatewaySpecPodSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_VirtualGatewaySpecPodSelectorMatchExpressions(y)),
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A reference to an object that represents a client policy.
 *
 * @schema VirtualGatewaySpecBackendDefaultsClientPolicy
 */
export interface VirtualGatewaySpecBackendDefaultsClientPolicy {
  /**
   * A reference to an object that represents a Transport Layer Security (TLS) client policy.
   *
   * @schema VirtualGatewaySpecBackendDefaultsClientPolicy#tls
   */
  readonly tls?: VirtualGatewaySpecBackendDefaultsClientPolicyTls;

}

/**
 * Converts an object of type 'VirtualGatewaySpecBackendDefaultsClientPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualGatewaySpecBackendDefaultsClientPolicy(obj: VirtualGatewaySpecBackendDefaultsClientPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'tls': toJson_VirtualGatewaySpecBackendDefaultsClientPolicyTls(obj.tls),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema VirtualGatewaySpecGatewayRouteSelectorMatchExpressions
 */
export interface VirtualGatewaySpecGatewayRouteSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema VirtualGatewaySpecGatewayRouteSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema VirtualGatewaySpecGatewayRouteSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
   *
   * @schema VirtualGatewaySpecGatewayRouteSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'VirtualGatewaySpecGatewayRouteSelectorMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualGatewaySpecGatewayRouteSelectorMatchExpressions(obj: VirtualGatewaySpecGatewayRouteSelectorMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The connection pool settings for the listener
 *
 * @schema VirtualGatewaySpecListenersConnectionPool
 */
export interface VirtualGatewaySpecListenersConnectionPool {
  /**
   * Specifies grpc connection pool settings for the virtual gateway listener
   *
   * @schema VirtualGatewaySpecListenersConnectionPool#grpc
   */
  readonly grpc?: VirtualGatewaySpecListenersConnectionPoolGrpc;

  /**
   * Specifies http connection pool settings for the virtual gateway listener
   *
   * @schema VirtualGatewaySpecListenersConnectionPool#http
   */
  readonly http?: VirtualGatewaySpecListenersConnectionPoolHttp;

  /**
   * Specifies http2 connection pool settings for the virtual gateway listener
   *
   * @schema VirtualGatewaySpecListenersConnectionPool#http2
   */
  readonly http2?: VirtualGatewaySpecListenersConnectionPoolHttp2;

}

/**
 * Converts an object of type 'VirtualGatewaySpecListenersConnectionPool' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualGatewaySpecListenersConnectionPool(obj: VirtualGatewaySpecListenersConnectionPool | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'grpc': toJson_VirtualGatewaySpecListenersConnectionPoolGrpc(obj.grpc),
    'http': toJson_VirtualGatewaySpecListenersConnectionPoolHttp(obj.http),
    'http2': toJson_VirtualGatewaySpecListenersConnectionPoolHttp2(obj.http2),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The health check information for the listener.
 *
 * @schema VirtualGatewaySpecListenersHealthCheck
 */
export interface VirtualGatewaySpecListenersHealthCheck {
  /**
   * The number of consecutive successful health checks that must occur before declaring listener healthy.
   *
   * @schema VirtualGatewaySpecListenersHealthCheck#healthyThreshold
   */
  readonly healthyThreshold?: number;

  /**
   * The time period in milliseconds between each health check execution.
   *
   * @schema VirtualGatewaySpecListenersHealthCheck#intervalMillis
   */
  readonly intervalMillis: number;

  /**
   * The destination path for the health check request. This value is only used if the specified protocol is http or http2. For any other protocol, this value is ignored.
   *
   * @schema VirtualGatewaySpecListenersHealthCheck#path
   */
  readonly path?: string;

  /**
   * The destination port for the health check request.
   *
   * @schema VirtualGatewaySpecListenersHealthCheck#port
   */
  readonly port?: number;

  /**
   * The protocol for the health check request
   *
   * @schema VirtualGatewaySpecListenersHealthCheck#protocol
   */
  readonly protocol: VirtualGatewaySpecListenersHealthCheckProtocol;

  /**
   * The amount of time to wait when receiving a response from the health check, in milliseconds.
   *
   * @schema VirtualGatewaySpecListenersHealthCheck#timeoutMillis
   */
  readonly timeoutMillis: number;

  /**
   * The number of consecutive failed health checks that must occur before declaring a virtual Gateway unhealthy.
   *
   * @schema VirtualGatewaySpecListenersHealthCheck#unhealthyThreshold
   */
  readonly unhealthyThreshold: number;

}

/**
 * Converts an object of type 'VirtualGatewaySpecListenersHealthCheck' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualGatewaySpecListenersHealthCheck(obj: VirtualGatewaySpecListenersHealthCheck | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'healthyThreshold': obj.healthyThreshold,
    'intervalMillis': obj.intervalMillis,
    'path': obj.path,
    'port': obj.port,
    'protocol': obj.protocol,
    'timeoutMillis': obj.timeoutMillis,
    'unhealthyThreshold': obj.unhealthyThreshold,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The port mapping information for the listener.
 *
 * @schema VirtualGatewaySpecListenersPortMapping
 */
export interface VirtualGatewaySpecListenersPortMapping {
  /**
   * The port used for the port mapping.
   *
   * @schema VirtualGatewaySpecListenersPortMapping#port
   */
  readonly port: number;

  /**
   * The protocol used for the port mapping.
   *
   * @schema VirtualGatewaySpecListenersPortMapping#protocol
   */
  readonly protocol: VirtualGatewaySpecListenersPortMappingProtocol;

}

/**
 * Converts an object of type 'VirtualGatewaySpecListenersPortMapping' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualGatewaySpecListenersPortMapping(obj: VirtualGatewaySpecListenersPortMapping | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'port': obj.port,
    'protocol': obj.protocol,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A reference to an object that represents the Transport Layer Security (TLS) properties for a listener.
 *
 * @schema VirtualGatewaySpecListenersTls
 */
export interface VirtualGatewaySpecListenersTls {
  /**
   * A reference to an object that represents a listener's TLS certificate.
   *
   * @schema VirtualGatewaySpecListenersTls#certificate
   */
  readonly certificate: VirtualGatewaySpecListenersTlsCertificate;

  /**
   * ListenerTLS mode
   *
   * @schema VirtualGatewaySpecListenersTls#mode
   */
  readonly mode: VirtualGatewaySpecListenersTlsMode;

  /**
   * A reference to an object that represents Validation context
   *
   * @schema VirtualGatewaySpecListenersTls#validation
   */
  readonly validation?: VirtualGatewaySpecListenersTlsValidation;

}

/**
 * Converts an object of type 'VirtualGatewaySpecListenersTls' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualGatewaySpecListenersTls(obj: VirtualGatewaySpecListenersTls | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'certificate': toJson_VirtualGatewaySpecListenersTlsCertificate(obj.certificate),
    'mode': obj.mode,
    'validation': toJson_VirtualGatewaySpecListenersTlsValidation(obj.validation),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The access log configuration for a virtual Gateway.
 *
 * @schema VirtualGatewaySpecLoggingAccessLog
 */
export interface VirtualGatewaySpecLoggingAccessLog {
  /**
   * The file object to send virtual gateway access logs to.
   *
   * @schema VirtualGatewaySpecLoggingAccessLog#file
   */
  readonly file?: VirtualGatewaySpecLoggingAccessLogFile;

}

/**
 * Converts an object of type 'VirtualGatewaySpecLoggingAccessLog' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualGatewaySpecLoggingAccessLog(obj: VirtualGatewaySpecLoggingAccessLog | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'file': toJson_VirtualGatewaySpecLoggingAccessLogFile(obj.file),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema VirtualGatewaySpecNamespaceSelectorMatchExpressions
 */
export interface VirtualGatewaySpecNamespaceSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema VirtualGatewaySpecNamespaceSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema VirtualGatewaySpecNamespaceSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
   *
   * @schema VirtualGatewaySpecNamespaceSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'VirtualGatewaySpecNamespaceSelectorMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualGatewaySpecNamespaceSelectorMatchExpressions(obj: VirtualGatewaySpecNamespaceSelectorMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema VirtualGatewaySpecPodSelectorMatchExpressions
 */
export interface VirtualGatewaySpecPodSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema VirtualGatewaySpecPodSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema VirtualGatewaySpecPodSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
   *
   * @schema VirtualGatewaySpecPodSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'VirtualGatewaySpecPodSelectorMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualGatewaySpecPodSelectorMatchExpressions(obj: VirtualGatewaySpecPodSelectorMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A reference to an object that represents a Transport Layer Security (TLS) client policy.
 *
 * @schema VirtualGatewaySpecBackendDefaultsClientPolicyTls
 */
export interface VirtualGatewaySpecBackendDefaultsClientPolicyTls {
  /**
   * A reference to an object that represents TLS certificate.
   *
   * @schema VirtualGatewaySpecBackendDefaultsClientPolicyTls#certificate
   */
  readonly certificate?: VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificate;

  /**
   * Whether the policy is enforced. If unspecified, default settings from AWS API will be applied. Refer to AWS Docs for default settings.
   *
   * @schema VirtualGatewaySpecBackendDefaultsClientPolicyTls#enforce
   */
  readonly enforce?: boolean;

  /**
   * The range of ports that the policy is enforced for.
   *
   * @schema VirtualGatewaySpecBackendDefaultsClientPolicyTls#ports
   */
  readonly ports?: number[];

  /**
   * A reference to an object that represents a TLS validation context.
   *
   * @schema VirtualGatewaySpecBackendDefaultsClientPolicyTls#validation
   */
  readonly validation: VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidation;

}

/**
 * Converts an object of type 'VirtualGatewaySpecBackendDefaultsClientPolicyTls' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualGatewaySpecBackendDefaultsClientPolicyTls(obj: VirtualGatewaySpecBackendDefaultsClientPolicyTls | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'certificate': toJson_VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificate(obj.certificate),
    'enforce': obj.enforce,
    'ports': obj.ports?.map(y => y),
    'validation': toJson_VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidation(obj.validation),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specifies grpc connection pool settings for the virtual gateway listener
 *
 * @schema VirtualGatewaySpecListenersConnectionPoolGrpc
 */
export interface VirtualGatewaySpecListenersConnectionPoolGrpc {
  /**
   * Represents the maximum number of inflight requests that an envoy can concurrently support across all the hosts in the upstream cluster
   *
   * @schema VirtualGatewaySpecListenersConnectionPoolGrpc#maxRequests
   */
  readonly maxRequests: number;

}

/**
 * Converts an object of type 'VirtualGatewaySpecListenersConnectionPoolGrpc' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualGatewaySpecListenersConnectionPoolGrpc(obj: VirtualGatewaySpecListenersConnectionPoolGrpc | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'maxRequests': obj.maxRequests,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specifies http connection pool settings for the virtual gateway listener
 *
 * @schema VirtualGatewaySpecListenersConnectionPoolHttp
 */
export interface VirtualGatewaySpecListenersConnectionPoolHttp {
  /**
   * Represents the maximum number of outbound TCP connections the envoy can establish concurrently with all the hosts in the upstream cluster.
   *
   * @schema VirtualGatewaySpecListenersConnectionPoolHttp#maxConnections
   */
  readonly maxConnections: number;

  /**
   * Represents the number of overflowing requests after max_connections that an envoy will queue to an upstream cluster.
   *
   * @schema VirtualGatewaySpecListenersConnectionPoolHttp#maxPendingRequests
   */
  readonly maxPendingRequests?: number;

}

/**
 * Converts an object of type 'VirtualGatewaySpecListenersConnectionPoolHttp' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualGatewaySpecListenersConnectionPoolHttp(obj: VirtualGatewaySpecListenersConnectionPoolHttp | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'maxConnections': obj.maxConnections,
    'maxPendingRequests': obj.maxPendingRequests,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specifies http2 connection pool settings for the virtual gateway listener
 *
 * @schema VirtualGatewaySpecListenersConnectionPoolHttp2
 */
export interface VirtualGatewaySpecListenersConnectionPoolHttp2 {
  /**
   * Represents the maximum number of inflight requests that an envoy can concurrently support across all the hosts in the upstream cluster
   *
   * @schema VirtualGatewaySpecListenersConnectionPoolHttp2#maxRequests
   */
  readonly maxRequests: number;

}

/**
 * Converts an object of type 'VirtualGatewaySpecListenersConnectionPoolHttp2' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualGatewaySpecListenersConnectionPoolHttp2(obj: VirtualGatewaySpecListenersConnectionPoolHttp2 | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'maxRequests': obj.maxRequests,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The protocol for the health check request
 *
 * @schema VirtualGatewaySpecListenersHealthCheckProtocol
 */
export enum VirtualGatewaySpecListenersHealthCheckProtocol {
  /** grpc */
  GRPC = "grpc",
  /** http */
  HTTP = "http",
  /** http2 */
  HTTP2 = "http2",
}

/**
 * The protocol used for the port mapping.
 *
 * @schema VirtualGatewaySpecListenersPortMappingProtocol
 */
export enum VirtualGatewaySpecListenersPortMappingProtocol {
  /** grpc */
  GRPC = "grpc",
  /** http */
  HTTP = "http",
  /** http2 */
  HTTP2 = "http2",
}

/**
 * A reference to an object that represents a listener's TLS certificate.
 *
 * @schema VirtualGatewaySpecListenersTlsCertificate
 */
export interface VirtualGatewaySpecListenersTlsCertificate {
  /**
   * A reference to an object that represents an AWS Certificate Manager (ACM) certificate.
   *
   * @schema VirtualGatewaySpecListenersTlsCertificate#acm
   */
  readonly acm?: VirtualGatewaySpecListenersTlsCertificateAcm;

  /**
   * A reference to an object that represents a local file certificate.
   *
   * @schema VirtualGatewaySpecListenersTlsCertificate#file
   */
  readonly file?: VirtualGatewaySpecListenersTlsCertificateFile;

  /**
   * A reference to an object that represents an SDS issued certificate
   *
   * @schema VirtualGatewaySpecListenersTlsCertificate#sds
   */
  readonly sds?: VirtualGatewaySpecListenersTlsCertificateSds;

}

/**
 * Converts an object of type 'VirtualGatewaySpecListenersTlsCertificate' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualGatewaySpecListenersTlsCertificate(obj: VirtualGatewaySpecListenersTlsCertificate | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'acm': toJson_VirtualGatewaySpecListenersTlsCertificateAcm(obj.acm),
    'file': toJson_VirtualGatewaySpecListenersTlsCertificateFile(obj.file),
    'sds': toJson_VirtualGatewaySpecListenersTlsCertificateSds(obj.sds),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ListenerTLS mode
 *
 * @schema VirtualGatewaySpecListenersTlsMode
 */
export enum VirtualGatewaySpecListenersTlsMode {
  /** DISABLED */
  DISABLED = "DISABLED",
  /** PERMISSIVE */
  PERMISSIVE = "PERMISSIVE",
  /** STRICT */
  STRICT = "STRICT",
}

/**
 * A reference to an object that represents Validation context
 *
 * @schema VirtualGatewaySpecListenersTlsValidation
 */
export interface VirtualGatewaySpecListenersTlsValidation {
  /**
   * Possible alternate names to consider
   *
   * @schema VirtualGatewaySpecListenersTlsValidation#subjectAlternativeNames
   */
  readonly subjectAlternativeNames?: VirtualGatewaySpecListenersTlsValidationSubjectAlternativeNames;

  /**
   * @schema VirtualGatewaySpecListenersTlsValidation#trust
   */
  readonly trust: VirtualGatewaySpecListenersTlsValidationTrust;

}

/**
 * Converts an object of type 'VirtualGatewaySpecListenersTlsValidation' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualGatewaySpecListenersTlsValidation(obj: VirtualGatewaySpecListenersTlsValidation | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'subjectAlternativeNames': toJson_VirtualGatewaySpecListenersTlsValidationSubjectAlternativeNames(obj.subjectAlternativeNames),
    'trust': toJson_VirtualGatewaySpecListenersTlsValidationTrust(obj.trust),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The file object to send virtual gateway access logs to.
 *
 * @schema VirtualGatewaySpecLoggingAccessLogFile
 */
export interface VirtualGatewaySpecLoggingAccessLogFile {
  /**
   * Structured access log output format
   *
   * @schema VirtualGatewaySpecLoggingAccessLogFile#format
   */
  readonly format?: VirtualGatewaySpecLoggingAccessLogFileFormat;

  /**
   * The file path to write access logs to.
   *
   * @schema VirtualGatewaySpecLoggingAccessLogFile#path
   */
  readonly path: string;

}

/**
 * Converts an object of type 'VirtualGatewaySpecLoggingAccessLogFile' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualGatewaySpecLoggingAccessLogFile(obj: VirtualGatewaySpecLoggingAccessLogFile | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'format': toJson_VirtualGatewaySpecLoggingAccessLogFileFormat(obj.format),
    'path': obj.path,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A reference to an object that represents TLS certificate.
 *
 * @schema VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificate
 */
export interface VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificate {
  /**
   * An object that represents a TLS cert via a local file
   *
   * @schema VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificate#file
   */
  readonly file?: VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFile;

  /**
   * An object that represents a TLS cert via SDS entry
   *
   * @schema VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificate#sds
   */
  readonly sds?: VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateSds;

}

/**
 * Converts an object of type 'VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificate' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificate(obj: VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificate | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'file': toJson_VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFile(obj.file),
    'sds': toJson_VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateSds(obj.sds),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A reference to an object that represents a TLS validation context.
 *
 * @schema VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidation
 */
export interface VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidation {
  /**
   * Possible alternative names to consider
   *
   * @schema VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidation#subjectAlternativeNames
   */
  readonly subjectAlternativeNames?: VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames;

  /**
   * A reference to an object that represents a TLS validation context trust
   *
   * @schema VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidation#trust
   */
  readonly trust: VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrust;

}

/**
 * Converts an object of type 'VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidation' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidation(obj: VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidation | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'subjectAlternativeNames': toJson_VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames(obj.subjectAlternativeNames),
    'trust': toJson_VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrust(obj.trust),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A reference to an object that represents an AWS Certificate Manager (ACM) certificate.
 *
 * @schema VirtualGatewaySpecListenersTlsCertificateAcm
 */
export interface VirtualGatewaySpecListenersTlsCertificateAcm {
  /**
   * The Amazon Resource Name (ARN) for the certificate.
   *
   * @schema VirtualGatewaySpecListenersTlsCertificateAcm#certificateARN
   */
  readonly certificateArn: string;

}

/**
 * Converts an object of type 'VirtualGatewaySpecListenersTlsCertificateAcm' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualGatewaySpecListenersTlsCertificateAcm(obj: VirtualGatewaySpecListenersTlsCertificateAcm | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'certificateARN': obj.certificateArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A reference to an object that represents a local file certificate.
 *
 * @schema VirtualGatewaySpecListenersTlsCertificateFile
 */
export interface VirtualGatewaySpecListenersTlsCertificateFile {
  /**
   * The certificate chain for the certificate.
   *
   * @schema VirtualGatewaySpecListenersTlsCertificateFile#certificateChain
   */
  readonly certificateChain: string;

  /**
   * The private key for a certificate stored on the file system of the virtual Gateway.
   *
   * @schema VirtualGatewaySpecListenersTlsCertificateFile#privateKey
   */
  readonly privateKey: string;

}

/**
 * Converts an object of type 'VirtualGatewaySpecListenersTlsCertificateFile' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualGatewaySpecListenersTlsCertificateFile(obj: VirtualGatewaySpecListenersTlsCertificateFile | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'certificateChain': obj.certificateChain,
    'privateKey': obj.privateKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A reference to an object that represents an SDS issued certificate
 *
 * @schema VirtualGatewaySpecListenersTlsCertificateSds
 */
export interface VirtualGatewaySpecListenersTlsCertificateSds {
  /**
   * The certificate trust chain for a certificate issued via SDS cluster
   *
   * @schema VirtualGatewaySpecListenersTlsCertificateSds#secretName
   */
  readonly secretName: string;

}

/**
 * Converts an object of type 'VirtualGatewaySpecListenersTlsCertificateSds' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualGatewaySpecListenersTlsCertificateSds(obj: VirtualGatewaySpecListenersTlsCertificateSds | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'secretName': obj.secretName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Possible alternate names to consider
 *
 * @schema VirtualGatewaySpecListenersTlsValidationSubjectAlternativeNames
 */
export interface VirtualGatewaySpecListenersTlsValidationSubjectAlternativeNames {
  /**
   * Match is a required field
   *
   * @schema VirtualGatewaySpecListenersTlsValidationSubjectAlternativeNames#match
   */
  readonly match: VirtualGatewaySpecListenersTlsValidationSubjectAlternativeNamesMatch;

}

/**
 * Converts an object of type 'VirtualGatewaySpecListenersTlsValidationSubjectAlternativeNames' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualGatewaySpecListenersTlsValidationSubjectAlternativeNames(obj: VirtualGatewaySpecListenersTlsValidationSubjectAlternativeNames | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'match': toJson_VirtualGatewaySpecListenersTlsValidationSubjectAlternativeNamesMatch(obj.match),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualGatewaySpecListenersTlsValidationTrust
 */
export interface VirtualGatewaySpecListenersTlsValidationTrust {
  /**
   * A reference to an object that represents a TLS validation context trust for an AWS Certicate Manager (ACM) certificate.
   *
   * @schema VirtualGatewaySpecListenersTlsValidationTrust#acm
   */
  readonly acm?: VirtualGatewaySpecListenersTlsValidationTrustAcm;

  /**
   * An object that represents a TLS validation context trust for a local file.
   *
   * @schema VirtualGatewaySpecListenersTlsValidationTrust#file
   */
  readonly file?: VirtualGatewaySpecListenersTlsValidationTrustFile;

  /**
   * An object that represents a TLS validation context trust for an SDS system
   *
   * @schema VirtualGatewaySpecListenersTlsValidationTrust#sds
   */
  readonly sds?: VirtualGatewaySpecListenersTlsValidationTrustSds;

}

/**
 * Converts an object of type 'VirtualGatewaySpecListenersTlsValidationTrust' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualGatewaySpecListenersTlsValidationTrust(obj: VirtualGatewaySpecListenersTlsValidationTrust | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'acm': toJson_VirtualGatewaySpecListenersTlsValidationTrustAcm(obj.acm),
    'file': toJson_VirtualGatewaySpecListenersTlsValidationTrustFile(obj.file),
    'sds': toJson_VirtualGatewaySpecListenersTlsValidationTrustSds(obj.sds),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Structured access log output format
 *
 * @schema VirtualGatewaySpecLoggingAccessLogFileFormat
 */
export interface VirtualGatewaySpecLoggingAccessLogFileFormat {
  /**
   * Output specified fields as a JSON object
   *
   * @schema VirtualGatewaySpecLoggingAccessLogFileFormat#json
   */
  readonly json?: VirtualGatewaySpecLoggingAccessLogFileFormatJson[];

  /**
   * Custom format string
   *
   * @schema VirtualGatewaySpecLoggingAccessLogFileFormat#text
   */
  readonly text?: string;

}

/**
 * Converts an object of type 'VirtualGatewaySpecLoggingAccessLogFileFormat' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualGatewaySpecLoggingAccessLogFileFormat(obj: VirtualGatewaySpecLoggingAccessLogFileFormat | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'json': obj.json?.map(y => toJson_VirtualGatewaySpecLoggingAccessLogFileFormatJson(y)),
    'text': obj.text,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents a TLS cert via a local file
 *
 * @schema VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFile
 */
export interface VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFile {
  /**
   * The certificate chain for the certificate.
   *
   * @schema VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFile#certificateChain
   */
  readonly certificateChain: string;

  /**
   * The private key for a certificate stored on the file system of the virtual Gateway.
   *
   * @schema VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFile#privateKey
   */
  readonly privateKey: string;

}

/**
 * Converts an object of type 'VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFile' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFile(obj: VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateFile | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'certificateChain': obj.certificateChain,
    'privateKey': obj.privateKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents a TLS cert via SDS entry
 *
 * @schema VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateSds
 */
export interface VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateSds {
  /**
   * The certificate trust chain for a certificate issued via SDS cluster
   *
   * @schema VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateSds#secretName
   */
  readonly secretName: string;

}

/**
 * Converts an object of type 'VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateSds' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateSds(obj: VirtualGatewaySpecBackendDefaultsClientPolicyTlsCertificateSds | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'secretName': obj.secretName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Possible alternative names to consider
 *
 * @schema VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames
 */
export interface VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames {
  /**
   * Match is a required field
   *
   * @schema VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames#match
   */
  readonly match: VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch;

}

/**
 * Converts an object of type 'VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames(obj: VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'match': toJson_VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch(obj.match),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A reference to an object that represents a TLS validation context trust
 *
 * @schema VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrust
 */
export interface VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrust {
  /**
   * A reference to an object that represents a TLS validation context trust for an AWS Certicate Manager (ACM) certificate.
   *
   * @schema VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrust#acm
   */
  readonly acm?: VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcm;

  /**
   * An object that represents a TLS validation context trust for a local file.
   *
   * @schema VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrust#file
   */
  readonly file?: VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFile;

  /**
   * An object that represents a TLS validation context trust for a SDS certificate
   *
   * @schema VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrust#sds
   */
  readonly sds?: VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustSds;

}

/**
 * Converts an object of type 'VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrust' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrust(obj: VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrust | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'acm': toJson_VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcm(obj.acm),
    'file': toJson_VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFile(obj.file),
    'sds': toJson_VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustSds(obj.sds),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Match is a required field
 *
 * @schema VirtualGatewaySpecListenersTlsValidationSubjectAlternativeNamesMatch
 */
export interface VirtualGatewaySpecListenersTlsValidationSubjectAlternativeNamesMatch {
  /**
   * Exact is a required field
   *
   * @schema VirtualGatewaySpecListenersTlsValidationSubjectAlternativeNamesMatch#exact
   */
  readonly exact: string[];

}

/**
 * Converts an object of type 'VirtualGatewaySpecListenersTlsValidationSubjectAlternativeNamesMatch' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualGatewaySpecListenersTlsValidationSubjectAlternativeNamesMatch(obj: VirtualGatewaySpecListenersTlsValidationSubjectAlternativeNamesMatch | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exact': obj.exact?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A reference to an object that represents a TLS validation context trust for an AWS Certicate Manager (ACM) certificate.
 *
 * @schema VirtualGatewaySpecListenersTlsValidationTrustAcm
 */
export interface VirtualGatewaySpecListenersTlsValidationTrustAcm {
  /**
   * One or more ACM Amazon Resource Name (ARN)s.
   *
   * @schema VirtualGatewaySpecListenersTlsValidationTrustAcm#certificateAuthorityARNs
   */
  readonly certificateAuthorityArNs: string[];

}

/**
 * Converts an object of type 'VirtualGatewaySpecListenersTlsValidationTrustAcm' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualGatewaySpecListenersTlsValidationTrustAcm(obj: VirtualGatewaySpecListenersTlsValidationTrustAcm | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'certificateAuthorityARNs': obj.certificateAuthorityArNs?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents a TLS validation context trust for a local file.
 *
 * @schema VirtualGatewaySpecListenersTlsValidationTrustFile
 */
export interface VirtualGatewaySpecListenersTlsValidationTrustFile {
  /**
   * The certificate trust chain for a certificate stored on the file system of the virtual Gateway.
   *
   * @schema VirtualGatewaySpecListenersTlsValidationTrustFile#certificateChain
   */
  readonly certificateChain: string;

}

/**
 * Converts an object of type 'VirtualGatewaySpecListenersTlsValidationTrustFile' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualGatewaySpecListenersTlsValidationTrustFile(obj: VirtualGatewaySpecListenersTlsValidationTrustFile | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'certificateChain': obj.certificateChain,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents a TLS validation context trust for an SDS system
 *
 * @schema VirtualGatewaySpecListenersTlsValidationTrustSds
 */
export interface VirtualGatewaySpecListenersTlsValidationTrustSds {
  /**
   * The certificate trust chain for a certificate issued via SDS.
   *
   * @schema VirtualGatewaySpecListenersTlsValidationTrustSds#secretName
   */
  readonly secretName: string;

}

/**
 * Converts an object of type 'VirtualGatewaySpecListenersTlsValidationTrustSds' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualGatewaySpecListenersTlsValidationTrustSds(obj: VirtualGatewaySpecListenersTlsValidationTrustSds | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'secretName': obj.secretName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualGatewaySpecLoggingAccessLogFileFormatJson
 */
export interface VirtualGatewaySpecLoggingAccessLogFileFormatJson {
  /**
   * The name of the field in the JSON object
   *
   * @schema VirtualGatewaySpecLoggingAccessLogFileFormatJson#key
   */
  readonly key: string;

  /**
   * The format string
   *
   * @schema VirtualGatewaySpecLoggingAccessLogFileFormatJson#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'VirtualGatewaySpecLoggingAccessLogFileFormatJson' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualGatewaySpecLoggingAccessLogFileFormatJson(obj: VirtualGatewaySpecLoggingAccessLogFileFormatJson | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Match is a required field
 *
 * @schema VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch
 */
export interface VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch {
  /**
   * Exact is a required field
   *
   * @schema VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch#exact
   */
  readonly exact: string[];

}

/**
 * Converts an object of type 'VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch(obj: VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exact': obj.exact?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A reference to an object that represents a TLS validation context trust for an AWS Certicate Manager (ACM) certificate.
 *
 * @schema VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcm
 */
export interface VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcm {
  /**
   * One or more ACM Amazon Resource Name (ARN)s.
   *
   * @schema VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcm#certificateAuthorityARNs
   */
  readonly certificateAuthorityArNs: string[];

}

/**
 * Converts an object of type 'VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcm' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcm(obj: VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcm | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'certificateAuthorityARNs': obj.certificateAuthorityArNs?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents a TLS validation context trust for a local file.
 *
 * @schema VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFile
 */
export interface VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFile {
  /**
   * The certificate trust chain for a certificate stored on the file system of the virtual Gateway.
   *
   * @schema VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFile#certificateChain
   */
  readonly certificateChain: string;

}

/**
 * Converts an object of type 'VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFile' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFile(obj: VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFile | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'certificateChain': obj.certificateChain,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents a TLS validation context trust for a SDS certificate
 *
 * @schema VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustSds
 */
export interface VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustSds {
  /**
   * The certificate trust chain for a certificate issued via SDS.
   *
   * @schema VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustSds#secretName
   */
  readonly secretName: string;

}

/**
 * Converts an object of type 'VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustSds' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustSds(obj: VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustSds | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'secretName': obj.secretName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * VirtualNode is the Schema for the virtualnodes API
 *
 * @schema VirtualNode
 */
export class VirtualNode extends ApiObject {
  /**
   * Returns the apiVersion and kind for "VirtualNode"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'appmesh.k8s.aws/v1beta2',
    kind: 'VirtualNode',
  }

  /**
   * Renders a Kubernetes manifest for "VirtualNode".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: VirtualNodeProps = {}): any {
    return {
      ...VirtualNode.GVK,
      ...toJson_VirtualNodeProps(props),
    };
  }

  /**
   * Defines a "VirtualNode" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: VirtualNodeProps = {}) {
    super(scope, id, {
      ...VirtualNode.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...VirtualNode.GVK,
      ...toJson_VirtualNodeProps(resolved),
    };
  }
}

/**
 * VirtualNode is the Schema for the virtualnodes API
 *
 * @schema VirtualNode
 */
export interface VirtualNodeProps {
  /**
   * @schema VirtualNode#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * VirtualNodeSpec defines the desired state of VirtualNode refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_VirtualNodeSpec.html
   *
   * @schema VirtualNode#spec
   */
  readonly spec?: VirtualNodeSpec;

}

/**
 * Converts an object of type 'VirtualNodeProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeProps(obj: VirtualNodeProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_VirtualNodeSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * VirtualNodeSpec defines the desired state of VirtualNode refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_VirtualNodeSpec.html
 *
 * @schema VirtualNodeSpec
 */
export interface VirtualNodeSpec {
  /**
   * AWSName is the AppMesh VirtualNode object's name. If unspecified or empty, it defaults to be "${name}_${namespace}" of k8s VirtualNode
   *
   * @schema VirtualNodeSpec#awsName
   */
  readonly awsName?: string;

  /**
   * A reference to an object that represents the defaults for backends.
   *
   * @schema VirtualNodeSpec#backendDefaults
   */
  readonly backendDefaults?: VirtualNodeSpecBackendDefaults;

  /**
   * BackendGroups that define a set of backends the virtual node is expected to send outbound traffic to.
   *
   * @schema VirtualNodeSpec#backendGroups
   */
  readonly backendGroups?: VirtualNodeSpecBackendGroups[];

  /**
   * The backends that the virtual node is expected to send outbound traffic to.
   *
   * @schema VirtualNodeSpec#backends
   */
  readonly backends?: VirtualNodeSpecBackends[];

  /**
   * The listener that the virtual node is expected to receive inbound traffic from
   *
   * @schema VirtualNodeSpec#listeners
   */
  readonly listeners?: VirtualNodeSpecListeners[];

  /**
   * The inbound and outbound access logging information for the virtual node.
   *
   * @schema VirtualNodeSpec#logging
   */
  readonly logging?: VirtualNodeSpecLogging;

  /**
   * A reference to k8s Mesh CR that this VirtualNode belongs to. The admission controller populates it using Meshes's selector, and prevents users from setting this field.
   * Populated by the system. Read-only.
   *
   * @schema VirtualNodeSpec#meshRef
   */
  readonly meshRef?: VirtualNodeSpecMeshRef;

  /**
   * PodSelector selects Pods using labels to designate VirtualNode membership. This field follows standard label selector semantics: 	if present but empty, it selects all pods within namespace. 	if absent, it selects no pod.
   *
   * @schema VirtualNodeSpec#podSelector
   */
  readonly podSelector?: VirtualNodeSpecPodSelector;

  /**
   * The service discovery information for the virtual node. Optional if there is no inbound traffic(no listeners). Mandatory if a listener is specified.
   *
   * @schema VirtualNodeSpec#serviceDiscovery
   */
  readonly serviceDiscovery?: VirtualNodeSpecServiceDiscovery;

}

/**
 * Converts an object of type 'VirtualNodeSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpec(obj: VirtualNodeSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'awsName': obj.awsName,
    'backendDefaults': toJson_VirtualNodeSpecBackendDefaults(obj.backendDefaults),
    'backendGroups': obj.backendGroups?.map(y => toJson_VirtualNodeSpecBackendGroups(y)),
    'backends': obj.backends?.map(y => toJson_VirtualNodeSpecBackends(y)),
    'listeners': obj.listeners?.map(y => toJson_VirtualNodeSpecListeners(y)),
    'logging': toJson_VirtualNodeSpecLogging(obj.logging),
    'meshRef': toJson_VirtualNodeSpecMeshRef(obj.meshRef),
    'podSelector': toJson_VirtualNodeSpecPodSelector(obj.podSelector),
    'serviceDiscovery': toJson_VirtualNodeSpecServiceDiscovery(obj.serviceDiscovery),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A reference to an object that represents the defaults for backends.
 *
 * @schema VirtualNodeSpecBackendDefaults
 */
export interface VirtualNodeSpecBackendDefaults {
  /**
   * A reference to an object that represents a client policy.
   *
   * @schema VirtualNodeSpecBackendDefaults#clientPolicy
   */
  readonly clientPolicy?: VirtualNodeSpecBackendDefaultsClientPolicy;

}

/**
 * Converts an object of type 'VirtualNodeSpecBackendDefaults' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecBackendDefaults(obj: VirtualNodeSpecBackendDefaults | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'clientPolicy': toJson_VirtualNodeSpecBackendDefaultsClientPolicy(obj.clientPolicy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * BackendGroupReference holds a reference to BackendGroup.appmesh.k8s.aws
 *
 * @schema VirtualNodeSpecBackendGroups
 */
export interface VirtualNodeSpecBackendGroups {
  /**
   * Name is the name of BackendGroup CR
   *
   * @schema VirtualNodeSpecBackendGroups#name
   */
  readonly name: string;

  /**
   * Namespace is the namespace of BackendGroup CR. If unspecified, defaults to the referencing object's namespace
   *
   * @schema VirtualNodeSpecBackendGroups#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'VirtualNodeSpecBackendGroups' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecBackendGroups(obj: VirtualNodeSpecBackendGroups | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Backend refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_Backend.html
 *
 * @schema VirtualNodeSpecBackends
 */
export interface VirtualNodeSpecBackends {
  /**
   * Specifies a virtual service to use as a backend for a virtual node.
   *
   * @schema VirtualNodeSpecBackends#virtualService
   */
  readonly virtualService: VirtualNodeSpecBackendsVirtualService;

}

/**
 * Converts an object of type 'VirtualNodeSpecBackends' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecBackends(obj: VirtualNodeSpecBackends | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'virtualService': toJson_VirtualNodeSpecBackendsVirtualService(obj.virtualService),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Listener refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_Listener.html
 *
 * @schema VirtualNodeSpecListeners
 */
export interface VirtualNodeSpecListeners {
  /**
   * The connection pool settings for the listener
   *
   * @schema VirtualNodeSpecListeners#connectionPool
   */
  readonly connectionPool?: VirtualNodeSpecListenersConnectionPool;

  /**
   * The health check information for the listener.
   *
   * @schema VirtualNodeSpecListeners#healthCheck
   */
  readonly healthCheck?: VirtualNodeSpecListenersHealthCheck;

  /**
   * The outlier detection for the listener
   *
   * @schema VirtualNodeSpecListeners#outlierDetection
   */
  readonly outlierDetection?: VirtualNodeSpecListenersOutlierDetection;

  /**
   * The port mapping information for the listener.
   *
   * @schema VirtualNodeSpecListeners#portMapping
   */
  readonly portMapping: VirtualNodeSpecListenersPortMapping;

  /**
   * A reference to an object that represents
   *
   * @schema VirtualNodeSpecListeners#timeout
   */
  readonly timeout?: VirtualNodeSpecListenersTimeout;

  /**
   * A reference to an object that represents the Transport Layer Security (TLS) properties for a listener.
   *
   * @schema VirtualNodeSpecListeners#tls
   */
  readonly tls?: VirtualNodeSpecListenersTls;

}

/**
 * Converts an object of type 'VirtualNodeSpecListeners' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecListeners(obj: VirtualNodeSpecListeners | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'connectionPool': toJson_VirtualNodeSpecListenersConnectionPool(obj.connectionPool),
    'healthCheck': toJson_VirtualNodeSpecListenersHealthCheck(obj.healthCheck),
    'outlierDetection': toJson_VirtualNodeSpecListenersOutlierDetection(obj.outlierDetection),
    'portMapping': toJson_VirtualNodeSpecListenersPortMapping(obj.portMapping),
    'timeout': toJson_VirtualNodeSpecListenersTimeout(obj.timeout),
    'tls': toJson_VirtualNodeSpecListenersTls(obj.tls),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The inbound and outbound access logging information for the virtual node.
 *
 * @schema VirtualNodeSpecLogging
 */
export interface VirtualNodeSpecLogging {
  /**
   * The access log configuration for a virtual node.
   *
   * @schema VirtualNodeSpecLogging#accessLog
   */
  readonly accessLog?: VirtualNodeSpecLoggingAccessLog;

}

/**
 * Converts an object of type 'VirtualNodeSpecLogging' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecLogging(obj: VirtualNodeSpecLogging | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'accessLog': toJson_VirtualNodeSpecLoggingAccessLog(obj.accessLog),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A reference to k8s Mesh CR that this VirtualNode belongs to. The admission controller populates it using Meshes's selector, and prevents users from setting this field.
 * Populated by the system. Read-only.
 *
 * @schema VirtualNodeSpecMeshRef
 */
export interface VirtualNodeSpecMeshRef {
  /**
   * Name is the name of Mesh CR
   *
   * @schema VirtualNodeSpecMeshRef#name
   */
  readonly name: string;

  /**
   * UID is the UID of Mesh CR
   *
   * @schema VirtualNodeSpecMeshRef#uid
   */
  readonly uid: string;

}

/**
 * Converts an object of type 'VirtualNodeSpecMeshRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecMeshRef(obj: VirtualNodeSpecMeshRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'uid': obj.uid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PodSelector selects Pods using labels to designate VirtualNode membership. This field follows standard label selector semantics: 	if present but empty, it selects all pods within namespace. 	if absent, it selects no pod.
 *
 * @schema VirtualNodeSpecPodSelector
 */
export interface VirtualNodeSpecPodSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema VirtualNodeSpecPodSelector#matchExpressions
   */
  readonly matchExpressions?: VirtualNodeSpecPodSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema VirtualNodeSpecPodSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'VirtualNodeSpecPodSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecPodSelector(obj: VirtualNodeSpecPodSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_VirtualNodeSpecPodSelectorMatchExpressions(y)),
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The service discovery information for the virtual node. Optional if there is no inbound traffic(no listeners). Mandatory if a listener is specified.
 *
 * @schema VirtualNodeSpecServiceDiscovery
 */
export interface VirtualNodeSpecServiceDiscovery {
  /**
   * Specifies any AWS Cloud Map information for the virtual node.
   *
   * @schema VirtualNodeSpecServiceDiscovery#awsCloudMap
   */
  readonly awsCloudMap?: VirtualNodeSpecServiceDiscoveryAwsCloudMap;

  /**
   * Specifies the DNS information for the virtual node.
   *
   * @schema VirtualNodeSpecServiceDiscovery#dns
   */
  readonly dns?: VirtualNodeSpecServiceDiscoveryDns;

}

/**
 * Converts an object of type 'VirtualNodeSpecServiceDiscovery' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecServiceDiscovery(obj: VirtualNodeSpecServiceDiscovery | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'awsCloudMap': toJson_VirtualNodeSpecServiceDiscoveryAwsCloudMap(obj.awsCloudMap),
    'dns': toJson_VirtualNodeSpecServiceDiscoveryDns(obj.dns),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A reference to an object that represents a client policy.
 *
 * @schema VirtualNodeSpecBackendDefaultsClientPolicy
 */
export interface VirtualNodeSpecBackendDefaultsClientPolicy {
  /**
   * A reference to an object that represents a Transport Layer Security (TLS) client policy.
   *
   * @schema VirtualNodeSpecBackendDefaultsClientPolicy#tls
   */
  readonly tls?: VirtualNodeSpecBackendDefaultsClientPolicyTls;

}

/**
 * Converts an object of type 'VirtualNodeSpecBackendDefaultsClientPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecBackendDefaultsClientPolicy(obj: VirtualNodeSpecBackendDefaultsClientPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'tls': toJson_VirtualNodeSpecBackendDefaultsClientPolicyTls(obj.tls),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specifies a virtual service to use as a backend for a virtual node.
 *
 * @schema VirtualNodeSpecBackendsVirtualService
 */
export interface VirtualNodeSpecBackendsVirtualService {
  /**
   * A reference to an object that represents the client policy for a backend.
   *
   * @schema VirtualNodeSpecBackendsVirtualService#clientPolicy
   */
  readonly clientPolicy?: VirtualNodeSpecBackendsVirtualServiceClientPolicy;

  /**
   * Amazon Resource Name to AppMesh VirtualService object that is acting as a virtual node backend. Exactly one of 'virtualServiceRef' or 'virtualServiceARN' must be specified.
   *
   * @schema VirtualNodeSpecBackendsVirtualService#virtualServiceARN
   */
  readonly virtualServiceArn?: string;

  /**
   * Reference to Kubernetes VirtualService CR in cluster that is acting as a virtual node backend. Exactly one of 'virtualServiceRef' or 'virtualServiceARN' must be specified.
   *
   * @schema VirtualNodeSpecBackendsVirtualService#virtualServiceRef
   */
  readonly virtualServiceRef?: VirtualNodeSpecBackendsVirtualServiceVirtualServiceRef;

}

/**
 * Converts an object of type 'VirtualNodeSpecBackendsVirtualService' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecBackendsVirtualService(obj: VirtualNodeSpecBackendsVirtualService | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'clientPolicy': toJson_VirtualNodeSpecBackendsVirtualServiceClientPolicy(obj.clientPolicy),
    'virtualServiceARN': obj.virtualServiceArn,
    'virtualServiceRef': toJson_VirtualNodeSpecBackendsVirtualServiceVirtualServiceRef(obj.virtualServiceRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The connection pool settings for the listener
 *
 * @schema VirtualNodeSpecListenersConnectionPool
 */
export interface VirtualNodeSpecListenersConnectionPool {
  /**
   * Specifies grpc connection pool settings for the virtual node listener
   *
   * @schema VirtualNodeSpecListenersConnectionPool#grpc
   */
  readonly grpc?: VirtualNodeSpecListenersConnectionPoolGrpc;

  /**
   * Specifies http connection pool settings for the virtual node listener
   *
   * @schema VirtualNodeSpecListenersConnectionPool#http
   */
  readonly http?: VirtualNodeSpecListenersConnectionPoolHttp;

  /**
   * Specifies http2 connection pool settings for the virtual node listener
   *
   * @schema VirtualNodeSpecListenersConnectionPool#http2
   */
  readonly http2?: VirtualNodeSpecListenersConnectionPoolHttp2;

  /**
   * Specifies tcp connection pool settings for the virtual node listener
   *
   * @schema VirtualNodeSpecListenersConnectionPool#tcp
   */
  readonly tcp?: VirtualNodeSpecListenersConnectionPoolTcp;

}

/**
 * Converts an object of type 'VirtualNodeSpecListenersConnectionPool' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecListenersConnectionPool(obj: VirtualNodeSpecListenersConnectionPool | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'grpc': toJson_VirtualNodeSpecListenersConnectionPoolGrpc(obj.grpc),
    'http': toJson_VirtualNodeSpecListenersConnectionPoolHttp(obj.http),
    'http2': toJson_VirtualNodeSpecListenersConnectionPoolHttp2(obj.http2),
    'tcp': toJson_VirtualNodeSpecListenersConnectionPoolTcp(obj.tcp),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The health check information for the listener.
 *
 * @schema VirtualNodeSpecListenersHealthCheck
 */
export interface VirtualNodeSpecListenersHealthCheck {
  /**
   * The number of consecutive successful health checks that must occur before declaring listener healthy.
   *
   * @schema VirtualNodeSpecListenersHealthCheck#healthyThreshold
   */
  readonly healthyThreshold: number;

  /**
   * The time period in milliseconds between each health check execution.
   *
   * @schema VirtualNodeSpecListenersHealthCheck#intervalMillis
   */
  readonly intervalMillis: number;

  /**
   * The destination path for the health check request. This value is only used if the specified protocol is http or http2. For any other protocol, this value is ignored.
   *
   * @schema VirtualNodeSpecListenersHealthCheck#path
   */
  readonly path?: string;

  /**
   * The destination port for the health check request.
   *
   * @schema VirtualNodeSpecListenersHealthCheck#port
   */
  readonly port?: number;

  /**
   * The protocol for the health check request
   *
   * @schema VirtualNodeSpecListenersHealthCheck#protocol
   */
  readonly protocol: VirtualNodeSpecListenersHealthCheckProtocol;

  /**
   * The amount of time to wait when receiving a response from the health check, in milliseconds.
   *
   * @schema VirtualNodeSpecListenersHealthCheck#timeoutMillis
   */
  readonly timeoutMillis: number;

  /**
   * The number of consecutive failed health checks that must occur before declaring a virtual node unhealthy.
   *
   * @schema VirtualNodeSpecListenersHealthCheck#unhealthyThreshold
   */
  readonly unhealthyThreshold: number;

}

/**
 * Converts an object of type 'VirtualNodeSpecListenersHealthCheck' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecListenersHealthCheck(obj: VirtualNodeSpecListenersHealthCheck | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'healthyThreshold': obj.healthyThreshold,
    'intervalMillis': obj.intervalMillis,
    'path': obj.path,
    'port': obj.port,
    'protocol': obj.protocol,
    'timeoutMillis': obj.timeoutMillis,
    'unhealthyThreshold': obj.unhealthyThreshold,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The outlier detection for the listener
 *
 * @schema VirtualNodeSpecListenersOutlierDetection
 */
export interface VirtualNodeSpecListenersOutlierDetection {
  /**
   * The base time that a host is ejected for. The real time is equal to the base time multiplied by the number of times the host has been ejected
   *
   * @schema VirtualNodeSpecListenersOutlierDetection#baseEjectionDuration
   */
  readonly baseEjectionDuration: VirtualNodeSpecListenersOutlierDetectionBaseEjectionDuration;

  /**
   * The time interval between ejection analysis sweeps. This can result in both new ejections as well as hosts being returned to service
   *
   * @schema VirtualNodeSpecListenersOutlierDetection#interval
   */
  readonly interval: VirtualNodeSpecListenersOutlierDetectionInterval;

  /**
   * The threshold for the max percentage of outlier hosts that can be ejected from the load balancing set. maxEjectionPercent=100 means outlier detection can potentially eject all of the hosts from the upstream service if they are all considered outliers, leaving the load balancing set with zero hosts
   *
   * @schema VirtualNodeSpecListenersOutlierDetection#maxEjectionPercent
   */
  readonly maxEjectionPercent: number;

  /**
   * The threshold for the number of server errors returned by a given host during an outlier detection interval. If the server error count meets/exceeds this threshold the host is ejected. A server error is defined as any HTTP 5xx response (or the equivalent for gRPC and TCP connections)
   *
   * @schema VirtualNodeSpecListenersOutlierDetection#maxServerErrors
   */
  readonly maxServerErrors: number;

}

/**
 * Converts an object of type 'VirtualNodeSpecListenersOutlierDetection' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecListenersOutlierDetection(obj: VirtualNodeSpecListenersOutlierDetection | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'baseEjectionDuration': toJson_VirtualNodeSpecListenersOutlierDetectionBaseEjectionDuration(obj.baseEjectionDuration),
    'interval': toJson_VirtualNodeSpecListenersOutlierDetectionInterval(obj.interval),
    'maxEjectionPercent': obj.maxEjectionPercent,
    'maxServerErrors': obj.maxServerErrors,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The port mapping information for the listener.
 *
 * @schema VirtualNodeSpecListenersPortMapping
 */
export interface VirtualNodeSpecListenersPortMapping {
  /**
   * The port used for the port mapping.
   *
   * @schema VirtualNodeSpecListenersPortMapping#port
   */
  readonly port: number;

  /**
   * The protocol used for the port mapping.
   *
   * @schema VirtualNodeSpecListenersPortMapping#protocol
   */
  readonly protocol: VirtualNodeSpecListenersPortMappingProtocol;

}

/**
 * Converts an object of type 'VirtualNodeSpecListenersPortMapping' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecListenersPortMapping(obj: VirtualNodeSpecListenersPortMapping | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'port': obj.port,
    'protocol': obj.protocol,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A reference to an object that represents
 *
 * @schema VirtualNodeSpecListenersTimeout
 */
export interface VirtualNodeSpecListenersTimeout {
  /**
   * Specifies grpc timeout information for the virtual node.
   *
   * @schema VirtualNodeSpecListenersTimeout#grpc
   */
  readonly grpc?: VirtualNodeSpecListenersTimeoutGrpc;

  /**
   * Specifies http timeout information for the virtual node.
   *
   * @schema VirtualNodeSpecListenersTimeout#http
   */
  readonly http?: VirtualNodeSpecListenersTimeoutHttp;

  /**
   * Specifies http2 information for the virtual node.
   *
   * @schema VirtualNodeSpecListenersTimeout#http2
   */
  readonly http2?: VirtualNodeSpecListenersTimeoutHttp2;

  /**
   * Specifies tcp timeout information for the virtual node.
   *
   * @schema VirtualNodeSpecListenersTimeout#tcp
   */
  readonly tcp?: VirtualNodeSpecListenersTimeoutTcp;

}

/**
 * Converts an object of type 'VirtualNodeSpecListenersTimeout' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecListenersTimeout(obj: VirtualNodeSpecListenersTimeout | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'grpc': toJson_VirtualNodeSpecListenersTimeoutGrpc(obj.grpc),
    'http': toJson_VirtualNodeSpecListenersTimeoutHttp(obj.http),
    'http2': toJson_VirtualNodeSpecListenersTimeoutHttp2(obj.http2),
    'tcp': toJson_VirtualNodeSpecListenersTimeoutTcp(obj.tcp),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A reference to an object that represents the Transport Layer Security (TLS) properties for a listener.
 *
 * @schema VirtualNodeSpecListenersTls
 */
export interface VirtualNodeSpecListenersTls {
  /**
   * A reference to an object that represents a listener's TLS certificate.
   *
   * @schema VirtualNodeSpecListenersTls#certificate
   */
  readonly certificate: VirtualNodeSpecListenersTlsCertificate;

  /**
   * ListenerTLS mode
   *
   * @schema VirtualNodeSpecListenersTls#mode
   */
  readonly mode: VirtualNodeSpecListenersTlsMode;

  /**
   * A reference to an object that represents an SDS Trust Domain
   *
   * @schema VirtualNodeSpecListenersTls#validation
   */
  readonly validation?: VirtualNodeSpecListenersTlsValidation;

}

/**
 * Converts an object of type 'VirtualNodeSpecListenersTls' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecListenersTls(obj: VirtualNodeSpecListenersTls | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'certificate': toJson_VirtualNodeSpecListenersTlsCertificate(obj.certificate),
    'mode': obj.mode,
    'validation': toJson_VirtualNodeSpecListenersTlsValidation(obj.validation),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The access log configuration for a virtual node.
 *
 * @schema VirtualNodeSpecLoggingAccessLog
 */
export interface VirtualNodeSpecLoggingAccessLog {
  /**
   * The file object to send virtual node access logs to.
   *
   * @schema VirtualNodeSpecLoggingAccessLog#file
   */
  readonly file?: VirtualNodeSpecLoggingAccessLogFile;

}

/**
 * Converts an object of type 'VirtualNodeSpecLoggingAccessLog' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecLoggingAccessLog(obj: VirtualNodeSpecLoggingAccessLog | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'file': toJson_VirtualNodeSpecLoggingAccessLogFile(obj.file),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema VirtualNodeSpecPodSelectorMatchExpressions
 */
export interface VirtualNodeSpecPodSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema VirtualNodeSpecPodSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema VirtualNodeSpecPodSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
   *
   * @schema VirtualNodeSpecPodSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'VirtualNodeSpecPodSelectorMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecPodSelectorMatchExpressions(obj: VirtualNodeSpecPodSelectorMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specifies any AWS Cloud Map information for the virtual node.
 *
 * @schema VirtualNodeSpecServiceDiscoveryAwsCloudMap
 */
export interface VirtualNodeSpecServiceDiscoveryAwsCloudMap {
  /**
   * A string map that contains attributes with values that you can use to filter instances by any custom attribute that you specified when you registered the instance
   *
   * @schema VirtualNodeSpecServiceDiscoveryAwsCloudMap#attributes
   */
  readonly attributes?: VirtualNodeSpecServiceDiscoveryAwsCloudMapAttributes[];

  /**
   * The name of the AWS Cloud Map namespace to use.
   *
   * @schema VirtualNodeSpecServiceDiscoveryAwsCloudMap#namespaceName
   */
  readonly namespaceName: string;

  /**
   * The name of the AWS Cloud Map service to use.
   *
   * @schema VirtualNodeSpecServiceDiscoveryAwsCloudMap#serviceName
   */
  readonly serviceName: string;

}

/**
 * Converts an object of type 'VirtualNodeSpecServiceDiscoveryAwsCloudMap' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecServiceDiscoveryAwsCloudMap(obj: VirtualNodeSpecServiceDiscoveryAwsCloudMap | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'attributes': obj.attributes?.map(y => toJson_VirtualNodeSpecServiceDiscoveryAwsCloudMapAttributes(y)),
    'namespaceName': obj.namespaceName,
    'serviceName': obj.serviceName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specifies the DNS information for the virtual node.
 *
 * @schema VirtualNodeSpecServiceDiscoveryDns
 */
export interface VirtualNodeSpecServiceDiscoveryDns {
  /**
   * Specifies the DNS service discovery hostname for the virtual node.
   *
   * @schema VirtualNodeSpecServiceDiscoveryDns#hostname
   */
  readonly hostname: string;

  /**
   * Choose between ENDPOINTS (strict DNS) and LOADBALANCER (logical DNS) mode in Envoy sidecar
   *
   * @schema VirtualNodeSpecServiceDiscoveryDns#responseType
   */
  readonly responseType?: VirtualNodeSpecServiceDiscoveryDnsResponseType;

}

/**
 * Converts an object of type 'VirtualNodeSpecServiceDiscoveryDns' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecServiceDiscoveryDns(obj: VirtualNodeSpecServiceDiscoveryDns | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'hostname': obj.hostname,
    'responseType': obj.responseType,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A reference to an object that represents a Transport Layer Security (TLS) client policy.
 *
 * @schema VirtualNodeSpecBackendDefaultsClientPolicyTls
 */
export interface VirtualNodeSpecBackendDefaultsClientPolicyTls {
  /**
   * A reference to an object that represents TLS certificate.
   *
   * @schema VirtualNodeSpecBackendDefaultsClientPolicyTls#certificate
   */
  readonly certificate?: VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificate;

  /**
   * Whether the policy is enforced. If unspecified, default settings from AWS API will be applied. Refer to AWS Docs for default settings.
   *
   * @schema VirtualNodeSpecBackendDefaultsClientPolicyTls#enforce
   */
  readonly enforce?: boolean;

  /**
   * The range of ports that the policy is enforced for.
   *
   * @schema VirtualNodeSpecBackendDefaultsClientPolicyTls#ports
   */
  readonly ports?: number[];

  /**
   * A reference to an object that represents a TLS validation context.
   *
   * @schema VirtualNodeSpecBackendDefaultsClientPolicyTls#validation
   */
  readonly validation: VirtualNodeSpecBackendDefaultsClientPolicyTlsValidation;

}

/**
 * Converts an object of type 'VirtualNodeSpecBackendDefaultsClientPolicyTls' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecBackendDefaultsClientPolicyTls(obj: VirtualNodeSpecBackendDefaultsClientPolicyTls | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'certificate': toJson_VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificate(obj.certificate),
    'enforce': obj.enforce,
    'ports': obj.ports?.map(y => y),
    'validation': toJson_VirtualNodeSpecBackendDefaultsClientPolicyTlsValidation(obj.validation),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A reference to an object that represents the client policy for a backend.
 *
 * @schema VirtualNodeSpecBackendsVirtualServiceClientPolicy
 */
export interface VirtualNodeSpecBackendsVirtualServiceClientPolicy {
  /**
   * A reference to an object that represents a Transport Layer Security (TLS) client policy.
   *
   * @schema VirtualNodeSpecBackendsVirtualServiceClientPolicy#tls
   */
  readonly tls?: VirtualNodeSpecBackendsVirtualServiceClientPolicyTls;

}

/**
 * Converts an object of type 'VirtualNodeSpecBackendsVirtualServiceClientPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecBackendsVirtualServiceClientPolicy(obj: VirtualNodeSpecBackendsVirtualServiceClientPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'tls': toJson_VirtualNodeSpecBackendsVirtualServiceClientPolicyTls(obj.tls),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to Kubernetes VirtualService CR in cluster that is acting as a virtual node backend. Exactly one of 'virtualServiceRef' or 'virtualServiceARN' must be specified.
 *
 * @schema VirtualNodeSpecBackendsVirtualServiceVirtualServiceRef
 */
export interface VirtualNodeSpecBackendsVirtualServiceVirtualServiceRef {
  /**
   * Name is the name of VirtualService CR
   *
   * @schema VirtualNodeSpecBackendsVirtualServiceVirtualServiceRef#name
   */
  readonly name: string;

  /**
   * Namespace is the namespace of VirtualService CR. If unspecified, defaults to the referencing object's namespace
   *
   * @schema VirtualNodeSpecBackendsVirtualServiceVirtualServiceRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'VirtualNodeSpecBackendsVirtualServiceVirtualServiceRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecBackendsVirtualServiceVirtualServiceRef(obj: VirtualNodeSpecBackendsVirtualServiceVirtualServiceRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specifies grpc connection pool settings for the virtual node listener
 *
 * @schema VirtualNodeSpecListenersConnectionPoolGrpc
 */
export interface VirtualNodeSpecListenersConnectionPoolGrpc {
  /**
   * Represents the maximum number of inflight requests that an envoy can concurrently support across all the hosts in the upstream cluster
   *
   * @schema VirtualNodeSpecListenersConnectionPoolGrpc#maxRequests
   */
  readonly maxRequests: number;

}

/**
 * Converts an object of type 'VirtualNodeSpecListenersConnectionPoolGrpc' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecListenersConnectionPoolGrpc(obj: VirtualNodeSpecListenersConnectionPoolGrpc | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'maxRequests': obj.maxRequests,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specifies http connection pool settings for the virtual node listener
 *
 * @schema VirtualNodeSpecListenersConnectionPoolHttp
 */
export interface VirtualNodeSpecListenersConnectionPoolHttp {
  /**
   * Represents the maximum number of outbound TCP connections the envoy can establish concurrently with all the hosts in the upstream cluster.
   *
   * @schema VirtualNodeSpecListenersConnectionPoolHttp#maxConnections
   */
  readonly maxConnections: number;

  /**
   * Represents the number of overflowing requests after max_connections that an envoy will queue to an upstream cluster.
   *
   * @schema VirtualNodeSpecListenersConnectionPoolHttp#maxPendingRequests
   */
  readonly maxPendingRequests?: number;

}

/**
 * Converts an object of type 'VirtualNodeSpecListenersConnectionPoolHttp' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecListenersConnectionPoolHttp(obj: VirtualNodeSpecListenersConnectionPoolHttp | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'maxConnections': obj.maxConnections,
    'maxPendingRequests': obj.maxPendingRequests,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specifies http2 connection pool settings for the virtual node listener
 *
 * @schema VirtualNodeSpecListenersConnectionPoolHttp2
 */
export interface VirtualNodeSpecListenersConnectionPoolHttp2 {
  /**
   * Represents the maximum number of inflight requests that an envoy can concurrently support across all the hosts in the upstream cluster
   *
   * @schema VirtualNodeSpecListenersConnectionPoolHttp2#maxRequests
   */
  readonly maxRequests: number;

}

/**
 * Converts an object of type 'VirtualNodeSpecListenersConnectionPoolHttp2' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecListenersConnectionPoolHttp2(obj: VirtualNodeSpecListenersConnectionPoolHttp2 | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'maxRequests': obj.maxRequests,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specifies tcp connection pool settings for the virtual node listener
 *
 * @schema VirtualNodeSpecListenersConnectionPoolTcp
 */
export interface VirtualNodeSpecListenersConnectionPoolTcp {
  /**
   * Represents the maximum number of outbound TCP connections the envoy can establish concurrently with all the hosts in the upstream cluster.
   *
   * @schema VirtualNodeSpecListenersConnectionPoolTcp#maxConnections
   */
  readonly maxConnections: number;

}

/**
 * Converts an object of type 'VirtualNodeSpecListenersConnectionPoolTcp' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecListenersConnectionPoolTcp(obj: VirtualNodeSpecListenersConnectionPoolTcp | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'maxConnections': obj.maxConnections,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The protocol for the health check request
 *
 * @schema VirtualNodeSpecListenersHealthCheckProtocol
 */
export enum VirtualNodeSpecListenersHealthCheckProtocol {
  /** grpc */
  GRPC = "grpc",
  /** http */
  HTTP = "http",
  /** http2 */
  HTTP2 = "http2",
  /** tcp */
  TCP = "tcp",
}

/**
 * The base time that a host is ejected for. The real time is equal to the base time multiplied by the number of times the host has been ejected
 *
 * @schema VirtualNodeSpecListenersOutlierDetectionBaseEjectionDuration
 */
export interface VirtualNodeSpecListenersOutlierDetectionBaseEjectionDuration {
  /**
   * A unit of time.
   *
   * @schema VirtualNodeSpecListenersOutlierDetectionBaseEjectionDuration#unit
   */
  readonly unit: VirtualNodeSpecListenersOutlierDetectionBaseEjectionDurationUnit;

  /**
   * A number of time units.
   *
   * @schema VirtualNodeSpecListenersOutlierDetectionBaseEjectionDuration#value
   */
  readonly value: number;

}

/**
 * Converts an object of type 'VirtualNodeSpecListenersOutlierDetectionBaseEjectionDuration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecListenersOutlierDetectionBaseEjectionDuration(obj: VirtualNodeSpecListenersOutlierDetectionBaseEjectionDuration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'unit': obj.unit,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The time interval between ejection analysis sweeps. This can result in both new ejections as well as hosts being returned to service
 *
 * @schema VirtualNodeSpecListenersOutlierDetectionInterval
 */
export interface VirtualNodeSpecListenersOutlierDetectionInterval {
  /**
   * A unit of time.
   *
   * @schema VirtualNodeSpecListenersOutlierDetectionInterval#unit
   */
  readonly unit: VirtualNodeSpecListenersOutlierDetectionIntervalUnit;

  /**
   * A number of time units.
   *
   * @schema VirtualNodeSpecListenersOutlierDetectionInterval#value
   */
  readonly value: number;

}

/**
 * Converts an object of type 'VirtualNodeSpecListenersOutlierDetectionInterval' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecListenersOutlierDetectionInterval(obj: VirtualNodeSpecListenersOutlierDetectionInterval | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'unit': obj.unit,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The protocol used for the port mapping.
 *
 * @schema VirtualNodeSpecListenersPortMappingProtocol
 */
export enum VirtualNodeSpecListenersPortMappingProtocol {
  /** grpc */
  GRPC = "grpc",
  /** http */
  HTTP = "http",
  /** http2 */
  HTTP2 = "http2",
  /** tcp */
  TCP = "tcp",
}

/**
 * Specifies grpc timeout information for the virtual node.
 *
 * @schema VirtualNodeSpecListenersTimeoutGrpc
 */
export interface VirtualNodeSpecListenersTimeoutGrpc {
  /**
   * An object that represents idle timeout duration.
   *
   * @schema VirtualNodeSpecListenersTimeoutGrpc#idle
   */
  readonly idle?: VirtualNodeSpecListenersTimeoutGrpcIdle;

  /**
   * An object that represents per request timeout duration.
   *
   * @schema VirtualNodeSpecListenersTimeoutGrpc#perRequest
   */
  readonly perRequest?: VirtualNodeSpecListenersTimeoutGrpcPerRequest;

}

/**
 * Converts an object of type 'VirtualNodeSpecListenersTimeoutGrpc' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecListenersTimeoutGrpc(obj: VirtualNodeSpecListenersTimeoutGrpc | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'idle': toJson_VirtualNodeSpecListenersTimeoutGrpcIdle(obj.idle),
    'perRequest': toJson_VirtualNodeSpecListenersTimeoutGrpcPerRequest(obj.perRequest),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specifies http timeout information for the virtual node.
 *
 * @schema VirtualNodeSpecListenersTimeoutHttp
 */
export interface VirtualNodeSpecListenersTimeoutHttp {
  /**
   * An object that represents idle timeout duration.
   *
   * @schema VirtualNodeSpecListenersTimeoutHttp#idle
   */
  readonly idle?: VirtualNodeSpecListenersTimeoutHttpIdle;

  /**
   * An object that represents per request timeout duration.
   *
   * @schema VirtualNodeSpecListenersTimeoutHttp#perRequest
   */
  readonly perRequest?: VirtualNodeSpecListenersTimeoutHttpPerRequest;

}

/**
 * Converts an object of type 'VirtualNodeSpecListenersTimeoutHttp' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecListenersTimeoutHttp(obj: VirtualNodeSpecListenersTimeoutHttp | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'idle': toJson_VirtualNodeSpecListenersTimeoutHttpIdle(obj.idle),
    'perRequest': toJson_VirtualNodeSpecListenersTimeoutHttpPerRequest(obj.perRequest),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specifies http2 information for the virtual node.
 *
 * @schema VirtualNodeSpecListenersTimeoutHttp2
 */
export interface VirtualNodeSpecListenersTimeoutHttp2 {
  /**
   * An object that represents idle timeout duration.
   *
   * @schema VirtualNodeSpecListenersTimeoutHttp2#idle
   */
  readonly idle?: VirtualNodeSpecListenersTimeoutHttp2Idle;

  /**
   * An object that represents per request timeout duration.
   *
   * @schema VirtualNodeSpecListenersTimeoutHttp2#perRequest
   */
  readonly perRequest?: VirtualNodeSpecListenersTimeoutHttp2PerRequest;

}

/**
 * Converts an object of type 'VirtualNodeSpecListenersTimeoutHttp2' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecListenersTimeoutHttp2(obj: VirtualNodeSpecListenersTimeoutHttp2 | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'idle': toJson_VirtualNodeSpecListenersTimeoutHttp2Idle(obj.idle),
    'perRequest': toJson_VirtualNodeSpecListenersTimeoutHttp2PerRequest(obj.perRequest),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specifies tcp timeout information for the virtual node.
 *
 * @schema VirtualNodeSpecListenersTimeoutTcp
 */
export interface VirtualNodeSpecListenersTimeoutTcp {
  /**
   * An object that represents idle timeout duration.
   *
   * @schema VirtualNodeSpecListenersTimeoutTcp#idle
   */
  readonly idle?: VirtualNodeSpecListenersTimeoutTcpIdle;

}

/**
 * Converts an object of type 'VirtualNodeSpecListenersTimeoutTcp' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecListenersTimeoutTcp(obj: VirtualNodeSpecListenersTimeoutTcp | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'idle': toJson_VirtualNodeSpecListenersTimeoutTcpIdle(obj.idle),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A reference to an object that represents a listener's TLS certificate.
 *
 * @schema VirtualNodeSpecListenersTlsCertificate
 */
export interface VirtualNodeSpecListenersTlsCertificate {
  /**
   * A reference to an object that represents an AWS Certificate Manager (ACM) certificate.
   *
   * @schema VirtualNodeSpecListenersTlsCertificate#acm
   */
  readonly acm?: VirtualNodeSpecListenersTlsCertificateAcm;

  /**
   * A reference to an object that represents a local file certificate.
   *
   * @schema VirtualNodeSpecListenersTlsCertificate#file
   */
  readonly file?: VirtualNodeSpecListenersTlsCertificateFile;

  /**
   * A reference to an object that represents an SDS certificate.
   *
   * @schema VirtualNodeSpecListenersTlsCertificate#sds
   */
  readonly sds?: VirtualNodeSpecListenersTlsCertificateSds;

}

/**
 * Converts an object of type 'VirtualNodeSpecListenersTlsCertificate' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecListenersTlsCertificate(obj: VirtualNodeSpecListenersTlsCertificate | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'acm': toJson_VirtualNodeSpecListenersTlsCertificateAcm(obj.acm),
    'file': toJson_VirtualNodeSpecListenersTlsCertificateFile(obj.file),
    'sds': toJson_VirtualNodeSpecListenersTlsCertificateSds(obj.sds),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ListenerTLS mode
 *
 * @schema VirtualNodeSpecListenersTlsMode
 */
export enum VirtualNodeSpecListenersTlsMode {
  /** DISABLED */
  DISABLED = "DISABLED",
  /** PERMISSIVE */
  PERMISSIVE = "PERMISSIVE",
  /** STRICT */
  STRICT = "STRICT",
}

/**
 * A reference to an object that represents an SDS Trust Domain
 *
 * @schema VirtualNodeSpecListenersTlsValidation
 */
export interface VirtualNodeSpecListenersTlsValidation {
  /**
   * Possible alternative names to consider
   *
   * @schema VirtualNodeSpecListenersTlsValidation#subjectAlternativeNames
   */
  readonly subjectAlternativeNames?: VirtualNodeSpecListenersTlsValidationSubjectAlternativeNames;

  /**
   * @schema VirtualNodeSpecListenersTlsValidation#trust
   */
  readonly trust: VirtualNodeSpecListenersTlsValidationTrust;

}

/**
 * Converts an object of type 'VirtualNodeSpecListenersTlsValidation' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecListenersTlsValidation(obj: VirtualNodeSpecListenersTlsValidation | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'subjectAlternativeNames': toJson_VirtualNodeSpecListenersTlsValidationSubjectAlternativeNames(obj.subjectAlternativeNames),
    'trust': toJson_VirtualNodeSpecListenersTlsValidationTrust(obj.trust),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The file object to send virtual node access logs to.
 *
 * @schema VirtualNodeSpecLoggingAccessLogFile
 */
export interface VirtualNodeSpecLoggingAccessLogFile {
  /**
   * Structured access log output format
   *
   * @schema VirtualNodeSpecLoggingAccessLogFile#format
   */
  readonly format?: VirtualNodeSpecLoggingAccessLogFileFormat;

  /**
   * The file path to write access logs to.
   *
   * @schema VirtualNodeSpecLoggingAccessLogFile#path
   */
  readonly path: string;

}

/**
 * Converts an object of type 'VirtualNodeSpecLoggingAccessLogFile' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecLoggingAccessLogFile(obj: VirtualNodeSpecLoggingAccessLogFile | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'format': toJson_VirtualNodeSpecLoggingAccessLogFileFormat(obj.format),
    'path': obj.path,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * AWSCloudMapInstanceAttribute refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_AwsCloudMapInstanceAttribute.html
 *
 * @schema VirtualNodeSpecServiceDiscoveryAwsCloudMapAttributes
 */
export interface VirtualNodeSpecServiceDiscoveryAwsCloudMapAttributes {
  /**
   * The name of an AWS Cloud Map service instance attribute key.
   *
   * @schema VirtualNodeSpecServiceDiscoveryAwsCloudMapAttributes#key
   */
  readonly key: string;

  /**
   * The value of an AWS Cloud Map service instance attribute key.
   *
   * @schema VirtualNodeSpecServiceDiscoveryAwsCloudMapAttributes#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'VirtualNodeSpecServiceDiscoveryAwsCloudMapAttributes' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecServiceDiscoveryAwsCloudMapAttributes(obj: VirtualNodeSpecServiceDiscoveryAwsCloudMapAttributes | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Choose between ENDPOINTS (strict DNS) and LOADBALANCER (logical DNS) mode in Envoy sidecar
 *
 * @schema VirtualNodeSpecServiceDiscoveryDnsResponseType
 */
export enum VirtualNodeSpecServiceDiscoveryDnsResponseType {
  /** ENDPOINTS */
  ENDPOINTS = "ENDPOINTS",
  /** LOADBALANCER */
  LOADBALANCER = "LOADBALANCER",
}

/**
 * A reference to an object that represents TLS certificate.
 *
 * @schema VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificate
 */
export interface VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificate {
  /**
   * An object that represents a TLS cert via a local file
   *
   * @schema VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificate#file
   */
  readonly file?: VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFile;

  /**
   * An object that represents a TLS cert via SDS entry
   *
   * @schema VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificate#sds
   */
  readonly sds?: VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSds;

}

/**
 * Converts an object of type 'VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificate' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificate(obj: VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificate | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'file': toJson_VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFile(obj.file),
    'sds': toJson_VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSds(obj.sds),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A reference to an object that represents a TLS validation context.
 *
 * @schema VirtualNodeSpecBackendDefaultsClientPolicyTlsValidation
 */
export interface VirtualNodeSpecBackendDefaultsClientPolicyTlsValidation {
  /**
   * Possible Alternative names to consider
   *
   * @schema VirtualNodeSpecBackendDefaultsClientPolicyTlsValidation#subjectAlternativeNames
   */
  readonly subjectAlternativeNames?: VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames;

  /**
   * A reference to an object that represents a TLS validation context trust
   *
   * @schema VirtualNodeSpecBackendDefaultsClientPolicyTlsValidation#trust
   */
  readonly trust: VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrust;

}

/**
 * Converts an object of type 'VirtualNodeSpecBackendDefaultsClientPolicyTlsValidation' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecBackendDefaultsClientPolicyTlsValidation(obj: VirtualNodeSpecBackendDefaultsClientPolicyTlsValidation | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'subjectAlternativeNames': toJson_VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames(obj.subjectAlternativeNames),
    'trust': toJson_VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrust(obj.trust),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A reference to an object that represents a Transport Layer Security (TLS) client policy.
 *
 * @schema VirtualNodeSpecBackendsVirtualServiceClientPolicyTls
 */
export interface VirtualNodeSpecBackendsVirtualServiceClientPolicyTls {
  /**
   * A reference to an object that represents TLS certificate.
   *
   * @schema VirtualNodeSpecBackendsVirtualServiceClientPolicyTls#certificate
   */
  readonly certificate?: VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsCertificate;

  /**
   * Whether the policy is enforced. If unspecified, default settings from AWS API will be applied. Refer to AWS Docs for default settings.
   *
   * @schema VirtualNodeSpecBackendsVirtualServiceClientPolicyTls#enforce
   */
  readonly enforce?: boolean;

  /**
   * The range of ports that the policy is enforced for.
   *
   * @schema VirtualNodeSpecBackendsVirtualServiceClientPolicyTls#ports
   */
  readonly ports?: number[];

  /**
   * A reference to an object that represents a TLS validation context.
   *
   * @schema VirtualNodeSpecBackendsVirtualServiceClientPolicyTls#validation
   */
  readonly validation: VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidation;

}

/**
 * Converts an object of type 'VirtualNodeSpecBackendsVirtualServiceClientPolicyTls' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecBackendsVirtualServiceClientPolicyTls(obj: VirtualNodeSpecBackendsVirtualServiceClientPolicyTls | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'certificate': toJson_VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsCertificate(obj.certificate),
    'enforce': obj.enforce,
    'ports': obj.ports?.map(y => y),
    'validation': toJson_VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidation(obj.validation),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A unit of time.
 *
 * @schema VirtualNodeSpecListenersOutlierDetectionBaseEjectionDurationUnit
 */
export enum VirtualNodeSpecListenersOutlierDetectionBaseEjectionDurationUnit {
  /** s */
  S = "s",
  /** ms */
  MS = "ms",
}

/**
 * A unit of time.
 *
 * @schema VirtualNodeSpecListenersOutlierDetectionIntervalUnit
 */
export enum VirtualNodeSpecListenersOutlierDetectionIntervalUnit {
  /** s */
  S = "s",
  /** ms */
  MS = "ms",
}

/**
 * An object that represents idle timeout duration.
 *
 * @schema VirtualNodeSpecListenersTimeoutGrpcIdle
 */
export interface VirtualNodeSpecListenersTimeoutGrpcIdle {
  /**
   * A unit of time.
   *
   * @schema VirtualNodeSpecListenersTimeoutGrpcIdle#unit
   */
  readonly unit: VirtualNodeSpecListenersTimeoutGrpcIdleUnit;

  /**
   * A number of time units.
   *
   * @schema VirtualNodeSpecListenersTimeoutGrpcIdle#value
   */
  readonly value: number;

}

/**
 * Converts an object of type 'VirtualNodeSpecListenersTimeoutGrpcIdle' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecListenersTimeoutGrpcIdle(obj: VirtualNodeSpecListenersTimeoutGrpcIdle | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'unit': obj.unit,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents per request timeout duration.
 *
 * @schema VirtualNodeSpecListenersTimeoutGrpcPerRequest
 */
export interface VirtualNodeSpecListenersTimeoutGrpcPerRequest {
  /**
   * A unit of time.
   *
   * @schema VirtualNodeSpecListenersTimeoutGrpcPerRequest#unit
   */
  readonly unit: VirtualNodeSpecListenersTimeoutGrpcPerRequestUnit;

  /**
   * A number of time units.
   *
   * @schema VirtualNodeSpecListenersTimeoutGrpcPerRequest#value
   */
  readonly value: number;

}

/**
 * Converts an object of type 'VirtualNodeSpecListenersTimeoutGrpcPerRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecListenersTimeoutGrpcPerRequest(obj: VirtualNodeSpecListenersTimeoutGrpcPerRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'unit': obj.unit,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents idle timeout duration.
 *
 * @schema VirtualNodeSpecListenersTimeoutHttpIdle
 */
export interface VirtualNodeSpecListenersTimeoutHttpIdle {
  /**
   * A unit of time.
   *
   * @schema VirtualNodeSpecListenersTimeoutHttpIdle#unit
   */
  readonly unit: VirtualNodeSpecListenersTimeoutHttpIdleUnit;

  /**
   * A number of time units.
   *
   * @schema VirtualNodeSpecListenersTimeoutHttpIdle#value
   */
  readonly value: number;

}

/**
 * Converts an object of type 'VirtualNodeSpecListenersTimeoutHttpIdle' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecListenersTimeoutHttpIdle(obj: VirtualNodeSpecListenersTimeoutHttpIdle | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'unit': obj.unit,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents per request timeout duration.
 *
 * @schema VirtualNodeSpecListenersTimeoutHttpPerRequest
 */
export interface VirtualNodeSpecListenersTimeoutHttpPerRequest {
  /**
   * A unit of time.
   *
   * @schema VirtualNodeSpecListenersTimeoutHttpPerRequest#unit
   */
  readonly unit: VirtualNodeSpecListenersTimeoutHttpPerRequestUnit;

  /**
   * A number of time units.
   *
   * @schema VirtualNodeSpecListenersTimeoutHttpPerRequest#value
   */
  readonly value: number;

}

/**
 * Converts an object of type 'VirtualNodeSpecListenersTimeoutHttpPerRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecListenersTimeoutHttpPerRequest(obj: VirtualNodeSpecListenersTimeoutHttpPerRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'unit': obj.unit,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents idle timeout duration.
 *
 * @schema VirtualNodeSpecListenersTimeoutHttp2Idle
 */
export interface VirtualNodeSpecListenersTimeoutHttp2Idle {
  /**
   * A unit of time.
   *
   * @schema VirtualNodeSpecListenersTimeoutHttp2Idle#unit
   */
  readonly unit: VirtualNodeSpecListenersTimeoutHttp2IdleUnit;

  /**
   * A number of time units.
   *
   * @schema VirtualNodeSpecListenersTimeoutHttp2Idle#value
   */
  readonly value: number;

}

/**
 * Converts an object of type 'VirtualNodeSpecListenersTimeoutHttp2Idle' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecListenersTimeoutHttp2Idle(obj: VirtualNodeSpecListenersTimeoutHttp2Idle | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'unit': obj.unit,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents per request timeout duration.
 *
 * @schema VirtualNodeSpecListenersTimeoutHttp2PerRequest
 */
export interface VirtualNodeSpecListenersTimeoutHttp2PerRequest {
  /**
   * A unit of time.
   *
   * @schema VirtualNodeSpecListenersTimeoutHttp2PerRequest#unit
   */
  readonly unit: VirtualNodeSpecListenersTimeoutHttp2PerRequestUnit;

  /**
   * A number of time units.
   *
   * @schema VirtualNodeSpecListenersTimeoutHttp2PerRequest#value
   */
  readonly value: number;

}

/**
 * Converts an object of type 'VirtualNodeSpecListenersTimeoutHttp2PerRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecListenersTimeoutHttp2PerRequest(obj: VirtualNodeSpecListenersTimeoutHttp2PerRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'unit': obj.unit,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents idle timeout duration.
 *
 * @schema VirtualNodeSpecListenersTimeoutTcpIdle
 */
export interface VirtualNodeSpecListenersTimeoutTcpIdle {
  /**
   * A unit of time.
   *
   * @schema VirtualNodeSpecListenersTimeoutTcpIdle#unit
   */
  readonly unit: VirtualNodeSpecListenersTimeoutTcpIdleUnit;

  /**
   * A number of time units.
   *
   * @schema VirtualNodeSpecListenersTimeoutTcpIdle#value
   */
  readonly value: number;

}

/**
 * Converts an object of type 'VirtualNodeSpecListenersTimeoutTcpIdle' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecListenersTimeoutTcpIdle(obj: VirtualNodeSpecListenersTimeoutTcpIdle | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'unit': obj.unit,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A reference to an object that represents an AWS Certificate Manager (ACM) certificate.
 *
 * @schema VirtualNodeSpecListenersTlsCertificateAcm
 */
export interface VirtualNodeSpecListenersTlsCertificateAcm {
  /**
   * The Amazon Resource Name (ARN) for the certificate.
   *
   * @schema VirtualNodeSpecListenersTlsCertificateAcm#certificateARN
   */
  readonly certificateArn: string;

}

/**
 * Converts an object of type 'VirtualNodeSpecListenersTlsCertificateAcm' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecListenersTlsCertificateAcm(obj: VirtualNodeSpecListenersTlsCertificateAcm | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'certificateARN': obj.certificateArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A reference to an object that represents a local file certificate.
 *
 * @schema VirtualNodeSpecListenersTlsCertificateFile
 */
export interface VirtualNodeSpecListenersTlsCertificateFile {
  /**
   * The certificate chain for the certificate.
   *
   * @schema VirtualNodeSpecListenersTlsCertificateFile#certificateChain
   */
  readonly certificateChain: string;

  /**
   * The private key for a certificate stored on the file system of the virtual node that the proxy is running on.
   *
   * @schema VirtualNodeSpecListenersTlsCertificateFile#privateKey
   */
  readonly privateKey: string;

}

/**
 * Converts an object of type 'VirtualNodeSpecListenersTlsCertificateFile' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecListenersTlsCertificateFile(obj: VirtualNodeSpecListenersTlsCertificateFile | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'certificateChain': obj.certificateChain,
    'privateKey': obj.privateKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A reference to an object that represents an SDS certificate.
 *
 * @schema VirtualNodeSpecListenersTlsCertificateSds
 */
export interface VirtualNodeSpecListenersTlsCertificateSds {
  /**
   * The certificate trust chain for a certificate issued via SDS cluster
   *
   * @schema VirtualNodeSpecListenersTlsCertificateSds#secretName
   */
  readonly secretName: string;

}

/**
 * Converts an object of type 'VirtualNodeSpecListenersTlsCertificateSds' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecListenersTlsCertificateSds(obj: VirtualNodeSpecListenersTlsCertificateSds | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'secretName': obj.secretName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Possible alternative names to consider
 *
 * @schema VirtualNodeSpecListenersTlsValidationSubjectAlternativeNames
 */
export interface VirtualNodeSpecListenersTlsValidationSubjectAlternativeNames {
  /**
   * Match is a required field
   *
   * @schema VirtualNodeSpecListenersTlsValidationSubjectAlternativeNames#match
   */
  readonly match: VirtualNodeSpecListenersTlsValidationSubjectAlternativeNamesMatch;

}

/**
 * Converts an object of type 'VirtualNodeSpecListenersTlsValidationSubjectAlternativeNames' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecListenersTlsValidationSubjectAlternativeNames(obj: VirtualNodeSpecListenersTlsValidationSubjectAlternativeNames | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'match': toJson_VirtualNodeSpecListenersTlsValidationSubjectAlternativeNamesMatch(obj.match),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualNodeSpecListenersTlsValidationTrust
 */
export interface VirtualNodeSpecListenersTlsValidationTrust {
  /**
   * An object that represents a TLS validation context trust for a local file.
   *
   * @schema VirtualNodeSpecListenersTlsValidationTrust#file
   */
  readonly file?: VirtualNodeSpecListenersTlsValidationTrustFile;

  /**
   * An object that represents a TLS validation context trust for an SDS server
   *
   * @schema VirtualNodeSpecListenersTlsValidationTrust#sds
   */
  readonly sds?: VirtualNodeSpecListenersTlsValidationTrustSds;

}

/**
 * Converts an object of type 'VirtualNodeSpecListenersTlsValidationTrust' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecListenersTlsValidationTrust(obj: VirtualNodeSpecListenersTlsValidationTrust | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'file': toJson_VirtualNodeSpecListenersTlsValidationTrustFile(obj.file),
    'sds': toJson_VirtualNodeSpecListenersTlsValidationTrustSds(obj.sds),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Structured access log output format
 *
 * @schema VirtualNodeSpecLoggingAccessLogFileFormat
 */
export interface VirtualNodeSpecLoggingAccessLogFileFormat {
  /**
   * Output specified fields as a JSON object
   *
   * @schema VirtualNodeSpecLoggingAccessLogFileFormat#json
   */
  readonly json?: VirtualNodeSpecLoggingAccessLogFileFormatJson[];

  /**
   * Custom format string
   *
   * @schema VirtualNodeSpecLoggingAccessLogFileFormat#text
   */
  readonly text?: string;

}

/**
 * Converts an object of type 'VirtualNodeSpecLoggingAccessLogFileFormat' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecLoggingAccessLogFileFormat(obj: VirtualNodeSpecLoggingAccessLogFileFormat | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'json': obj.json?.map(y => toJson_VirtualNodeSpecLoggingAccessLogFileFormatJson(y)),
    'text': obj.text,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents a TLS cert via a local file
 *
 * @schema VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFile
 */
export interface VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFile {
  /**
   * The certificate chain for the certificate.
   *
   * @schema VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFile#certificateChain
   */
  readonly certificateChain: string;

  /**
   * The private key for a certificate stored on the file system of the virtual node that the proxy is running on.
   *
   * @schema VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFile#privateKey
   */
  readonly privateKey: string;

}

/**
 * Converts an object of type 'VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFile' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFile(obj: VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFile | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'certificateChain': obj.certificateChain,
    'privateKey': obj.privateKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents a TLS cert via SDS entry
 *
 * @schema VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSds
 */
export interface VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSds {
  /**
   * The certificate trust chain for a certificate issued via SDS cluster
   *
   * @schema VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSds#secretName
   */
  readonly secretName: string;

}

/**
 * Converts an object of type 'VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSds' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSds(obj: VirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSds | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'secretName': obj.secretName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Possible Alternative names to consider
 *
 * @schema VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames
 */
export interface VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames {
  /**
   * Match is a required field
   *
   * @schema VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames#match
   */
  readonly match: VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch;

}

/**
 * Converts an object of type 'VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames(obj: VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'match': toJson_VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch(obj.match),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A reference to an object that represents a TLS validation context trust
 *
 * @schema VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrust
 */
export interface VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrust {
  /**
   * A reference to an object that represents a TLS validation context trust for an AWS Certicate Manager (ACM) certificate.
   *
   * @schema VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrust#acm
   */
  readonly acm?: VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcm;

  /**
   * An object that represents a TLS validation context trust for a local file.
   *
   * @schema VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrust#file
   */
  readonly file?: VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFile;

  /**
   * An object that represents a TLS validation context trust for a SDS.
   *
   * @schema VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrust#sds
   */
  readonly sds?: VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSds;

}

/**
 * Converts an object of type 'VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrust' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrust(obj: VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrust | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'acm': toJson_VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcm(obj.acm),
    'file': toJson_VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFile(obj.file),
    'sds': toJson_VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSds(obj.sds),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A reference to an object that represents TLS certificate.
 *
 * @schema VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsCertificate
 */
export interface VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsCertificate {
  /**
   * An object that represents a TLS cert via a local file
   *
   * @schema VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsCertificate#file
   */
  readonly file?: VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsCertificateFile;

  /**
   * An object that represents a TLS cert via SDS entry
   *
   * @schema VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsCertificate#sds
   */
  readonly sds?: VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsCertificateSds;

}

/**
 * Converts an object of type 'VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsCertificate' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsCertificate(obj: VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsCertificate | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'file': toJson_VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsCertificateFile(obj.file),
    'sds': toJson_VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsCertificateSds(obj.sds),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A reference to an object that represents a TLS validation context.
 *
 * @schema VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidation
 */
export interface VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidation {
  /**
   * Possible Alternative names to consider
   *
   * @schema VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidation#subjectAlternativeNames
   */
  readonly subjectAlternativeNames?: VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationSubjectAlternativeNames;

  /**
   * A reference to an object that represents a TLS validation context trust
   *
   * @schema VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidation#trust
   */
  readonly trust: VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationTrust;

}

/**
 * Converts an object of type 'VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidation' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidation(obj: VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidation | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'subjectAlternativeNames': toJson_VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationSubjectAlternativeNames(obj.subjectAlternativeNames),
    'trust': toJson_VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationTrust(obj.trust),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A unit of time.
 *
 * @schema VirtualNodeSpecListenersTimeoutGrpcIdleUnit
 */
export enum VirtualNodeSpecListenersTimeoutGrpcIdleUnit {
  /** s */
  S = "s",
  /** ms */
  MS = "ms",
}

/**
 * A unit of time.
 *
 * @schema VirtualNodeSpecListenersTimeoutGrpcPerRequestUnit
 */
export enum VirtualNodeSpecListenersTimeoutGrpcPerRequestUnit {
  /** s */
  S = "s",
  /** ms */
  MS = "ms",
}

/**
 * A unit of time.
 *
 * @schema VirtualNodeSpecListenersTimeoutHttpIdleUnit
 */
export enum VirtualNodeSpecListenersTimeoutHttpIdleUnit {
  /** s */
  S = "s",
  /** ms */
  MS = "ms",
}

/**
 * A unit of time.
 *
 * @schema VirtualNodeSpecListenersTimeoutHttpPerRequestUnit
 */
export enum VirtualNodeSpecListenersTimeoutHttpPerRequestUnit {
  /** s */
  S = "s",
  /** ms */
  MS = "ms",
}

/**
 * A unit of time.
 *
 * @schema VirtualNodeSpecListenersTimeoutHttp2IdleUnit
 */
export enum VirtualNodeSpecListenersTimeoutHttp2IdleUnit {
  /** s */
  S = "s",
  /** ms */
  MS = "ms",
}

/**
 * A unit of time.
 *
 * @schema VirtualNodeSpecListenersTimeoutHttp2PerRequestUnit
 */
export enum VirtualNodeSpecListenersTimeoutHttp2PerRequestUnit {
  /** s */
  S = "s",
  /** ms */
  MS = "ms",
}

/**
 * A unit of time.
 *
 * @schema VirtualNodeSpecListenersTimeoutTcpIdleUnit
 */
export enum VirtualNodeSpecListenersTimeoutTcpIdleUnit {
  /** s */
  S = "s",
  /** ms */
  MS = "ms",
}

/**
 * Match is a required field
 *
 * @schema VirtualNodeSpecListenersTlsValidationSubjectAlternativeNamesMatch
 */
export interface VirtualNodeSpecListenersTlsValidationSubjectAlternativeNamesMatch {
  /**
   * Exact is a required field
   *
   * @schema VirtualNodeSpecListenersTlsValidationSubjectAlternativeNamesMatch#exact
   */
  readonly exact: string[];

}

/**
 * Converts an object of type 'VirtualNodeSpecListenersTlsValidationSubjectAlternativeNamesMatch' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecListenersTlsValidationSubjectAlternativeNamesMatch(obj: VirtualNodeSpecListenersTlsValidationSubjectAlternativeNamesMatch | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exact': obj.exact?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents a TLS validation context trust for a local file.
 *
 * @schema VirtualNodeSpecListenersTlsValidationTrustFile
 */
export interface VirtualNodeSpecListenersTlsValidationTrustFile {
  /**
   * The certificate trust chain for a certificate stored on the file system of the virtual node that the proxy is running on.
   *
   * @schema VirtualNodeSpecListenersTlsValidationTrustFile#certificateChain
   */
  readonly certificateChain: string;

}

/**
 * Converts an object of type 'VirtualNodeSpecListenersTlsValidationTrustFile' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecListenersTlsValidationTrustFile(obj: VirtualNodeSpecListenersTlsValidationTrustFile | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'certificateChain': obj.certificateChain,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents a TLS validation context trust for an SDS server
 *
 * @schema VirtualNodeSpecListenersTlsValidationTrustSds
 */
export interface VirtualNodeSpecListenersTlsValidationTrustSds {
  /**
   * The certificate trust chain for a certificate obtained via SDS
   *
   * @schema VirtualNodeSpecListenersTlsValidationTrustSds#secretName
   */
  readonly secretName: string;

}

/**
 * Converts an object of type 'VirtualNodeSpecListenersTlsValidationTrustSds' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecListenersTlsValidationTrustSds(obj: VirtualNodeSpecListenersTlsValidationTrustSds | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'secretName': obj.secretName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualNodeSpecLoggingAccessLogFileFormatJson
 */
export interface VirtualNodeSpecLoggingAccessLogFileFormatJson {
  /**
   * The name of the field in the JSON object
   *
   * @schema VirtualNodeSpecLoggingAccessLogFileFormatJson#key
   */
  readonly key: string;

  /**
   * The format string
   *
   * @schema VirtualNodeSpecLoggingAccessLogFileFormatJson#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'VirtualNodeSpecLoggingAccessLogFileFormatJson' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecLoggingAccessLogFileFormatJson(obj: VirtualNodeSpecLoggingAccessLogFileFormatJson | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Match is a required field
 *
 * @schema VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch
 */
export interface VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch {
  /**
   * Exact is a required field
   *
   * @schema VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch#exact
   */
  readonly exact: string[];

}

/**
 * Converts an object of type 'VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch(obj: VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exact': obj.exact?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A reference to an object that represents a TLS validation context trust for an AWS Certicate Manager (ACM) certificate.
 *
 * @schema VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcm
 */
export interface VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcm {
  /**
   * One or more ACM Amazon Resource Name (ARN)s.
   *
   * @schema VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcm#certificateAuthorityARNs
   */
  readonly certificateAuthorityArNs: string[];

}

/**
 * Converts an object of type 'VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcm' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcm(obj: VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcm | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'certificateAuthorityARNs': obj.certificateAuthorityArNs?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents a TLS validation context trust for a local file.
 *
 * @schema VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFile
 */
export interface VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFile {
  /**
   * The certificate trust chain for a certificate stored on the file system of the virtual node that the proxy is running on.
   *
   * @schema VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFile#certificateChain
   */
  readonly certificateChain: string;

}

/**
 * Converts an object of type 'VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFile' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFile(obj: VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFile | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'certificateChain': obj.certificateChain,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents a TLS validation context trust for a SDS.
 *
 * @schema VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSds
 */
export interface VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSds {
  /**
   * The certificate trust chain for a certificate obtained via SDS
   *
   * @schema VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSds#secretName
   */
  readonly secretName: string;

}

/**
 * Converts an object of type 'VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSds' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSds(obj: VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSds | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'secretName': obj.secretName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents a TLS cert via a local file
 *
 * @schema VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsCertificateFile
 */
export interface VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsCertificateFile {
  /**
   * The certificate chain for the certificate.
   *
   * @schema VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsCertificateFile#certificateChain
   */
  readonly certificateChain: string;

  /**
   * The private key for a certificate stored on the file system of the virtual node that the proxy is running on.
   *
   * @schema VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsCertificateFile#privateKey
   */
  readonly privateKey: string;

}

/**
 * Converts an object of type 'VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsCertificateFile' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsCertificateFile(obj: VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsCertificateFile | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'certificateChain': obj.certificateChain,
    'privateKey': obj.privateKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents a TLS cert via SDS entry
 *
 * @schema VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsCertificateSds
 */
export interface VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsCertificateSds {
  /**
   * The certificate trust chain for a certificate issued via SDS cluster
   *
   * @schema VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsCertificateSds#secretName
   */
  readonly secretName: string;

}

/**
 * Converts an object of type 'VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsCertificateSds' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsCertificateSds(obj: VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsCertificateSds | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'secretName': obj.secretName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Possible Alternative names to consider
 *
 * @schema VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationSubjectAlternativeNames
 */
export interface VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationSubjectAlternativeNames {
  /**
   * Match is a required field
   *
   * @schema VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationSubjectAlternativeNames#match
   */
  readonly match: VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatch;

}

/**
 * Converts an object of type 'VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationSubjectAlternativeNames' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationSubjectAlternativeNames(obj: VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationSubjectAlternativeNames | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'match': toJson_VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatch(obj.match),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A reference to an object that represents a TLS validation context trust
 *
 * @schema VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationTrust
 */
export interface VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationTrust {
  /**
   * A reference to an object that represents a TLS validation context trust for an AWS Certicate Manager (ACM) certificate.
   *
   * @schema VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationTrust#acm
   */
  readonly acm?: VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationTrustAcm;

  /**
   * An object that represents a TLS validation context trust for a local file.
   *
   * @schema VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationTrust#file
   */
  readonly file?: VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationTrustFile;

  /**
   * An object that represents a TLS validation context trust for a SDS.
   *
   * @schema VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationTrust#sds
   */
  readonly sds?: VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationTrustSds;

}

/**
 * Converts an object of type 'VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationTrust' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationTrust(obj: VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationTrust | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'acm': toJson_VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationTrustAcm(obj.acm),
    'file': toJson_VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationTrustFile(obj.file),
    'sds': toJson_VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationTrustSds(obj.sds),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Match is a required field
 *
 * @schema VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatch
 */
export interface VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatch {
  /**
   * Exact is a required field
   *
   * @schema VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatch#exact
   */
  readonly exact: string[];

}

/**
 * Converts an object of type 'VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatch' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatch(obj: VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatch | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exact': obj.exact?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A reference to an object that represents a TLS validation context trust for an AWS Certicate Manager (ACM) certificate.
 *
 * @schema VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationTrustAcm
 */
export interface VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationTrustAcm {
  /**
   * One or more ACM Amazon Resource Name (ARN)s.
   *
   * @schema VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationTrustAcm#certificateAuthorityARNs
   */
  readonly certificateAuthorityArNs: string[];

}

/**
 * Converts an object of type 'VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationTrustAcm' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationTrustAcm(obj: VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationTrustAcm | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'certificateAuthorityARNs': obj.certificateAuthorityArNs?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents a TLS validation context trust for a local file.
 *
 * @schema VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationTrustFile
 */
export interface VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationTrustFile {
  /**
   * The certificate trust chain for a certificate stored on the file system of the virtual node that the proxy is running on.
   *
   * @schema VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationTrustFile#certificateChain
   */
  readonly certificateChain: string;

}

/**
 * Converts an object of type 'VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationTrustFile' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationTrustFile(obj: VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationTrustFile | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'certificateChain': obj.certificateChain,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents a TLS validation context trust for a SDS.
 *
 * @schema VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationTrustSds
 */
export interface VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationTrustSds {
  /**
   * The certificate trust chain for a certificate obtained via SDS
   *
   * @schema VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationTrustSds#secretName
   */
  readonly secretName: string;

}

/**
 * Converts an object of type 'VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationTrustSds' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationTrustSds(obj: VirtualNodeSpecBackendsVirtualServiceClientPolicyTlsValidationTrustSds | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'secretName': obj.secretName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * VirtualRouter is the Schema for the virtualrouters API
 *
 * @schema VirtualRouter
 */
export class VirtualRouter extends ApiObject {
  /**
   * Returns the apiVersion and kind for "VirtualRouter"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'appmesh.k8s.aws/v1beta2',
    kind: 'VirtualRouter',
  }

  /**
   * Renders a Kubernetes manifest for "VirtualRouter".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: VirtualRouterProps = {}): any {
    return {
      ...VirtualRouter.GVK,
      ...toJson_VirtualRouterProps(props),
    };
  }

  /**
   * Defines a "VirtualRouter" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: VirtualRouterProps = {}) {
    super(scope, id, {
      ...VirtualRouter.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...VirtualRouter.GVK,
      ...toJson_VirtualRouterProps(resolved),
    };
  }
}

/**
 * VirtualRouter is the Schema for the virtualrouters API
 *
 * @schema VirtualRouter
 */
export interface VirtualRouterProps {
  /**
   * @schema VirtualRouter#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * VirtualRouterSpec defines the desired state of VirtualRouter refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_VirtualRouterSpec.html
   *
   * @schema VirtualRouter#spec
   */
  readonly spec?: VirtualRouterSpec;

}

/**
 * Converts an object of type 'VirtualRouterProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterProps(obj: VirtualRouterProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_VirtualRouterSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * VirtualRouterSpec defines the desired state of VirtualRouter refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_VirtualRouterSpec.html
 *
 * @schema VirtualRouterSpec
 */
export interface VirtualRouterSpec {
  /**
   * AWSName is the AppMesh VirtualRouter object's name. If unspecified or empty, it defaults to be "${name}_${namespace}" of k8s VirtualRouter
   *
   * @schema VirtualRouterSpec#awsName
   */
  readonly awsName?: string;

  /**
   * The listeners that the virtual router is expected to receive inbound traffic from
   *
   * @schema VirtualRouterSpec#listeners
   */
  readonly listeners?: VirtualRouterSpecListeners[];

  /**
   * A reference to k8s Mesh CR that this VirtualRouter belongs to. The admission controller populates it using Meshes's selector, and prevents users from setting this field.
   * Populated by the system. Read-only.
   *
   * @schema VirtualRouterSpec#meshRef
   */
  readonly meshRef?: VirtualRouterSpecMeshRef;

  /**
   * The routes associated with VirtualRouter
   *
   * @schema VirtualRouterSpec#routes
   */
  readonly routes?: VirtualRouterSpecRoutes[];

}

/**
 * Converts an object of type 'VirtualRouterSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpec(obj: VirtualRouterSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'awsName': obj.awsName,
    'listeners': obj.listeners?.map(y => toJson_VirtualRouterSpecListeners(y)),
    'meshRef': toJson_VirtualRouterSpecMeshRef(obj.meshRef),
    'routes': obj.routes?.map(y => toJson_VirtualRouterSpecRoutes(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * VirtualRouterListener refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_VirtualRouterListener.html
 *
 * @schema VirtualRouterSpecListeners
 */
export interface VirtualRouterSpecListeners {
  /**
   * The port mapping information for the listener.
   *
   * @schema VirtualRouterSpecListeners#portMapping
   */
  readonly portMapping: VirtualRouterSpecListenersPortMapping;

}

/**
 * Converts an object of type 'VirtualRouterSpecListeners' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecListeners(obj: VirtualRouterSpecListeners | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'portMapping': toJson_VirtualRouterSpecListenersPortMapping(obj.portMapping),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A reference to k8s Mesh CR that this VirtualRouter belongs to. The admission controller populates it using Meshes's selector, and prevents users from setting this field.
 * Populated by the system. Read-only.
 *
 * @schema VirtualRouterSpecMeshRef
 */
export interface VirtualRouterSpecMeshRef {
  /**
   * Name is the name of Mesh CR
   *
   * @schema VirtualRouterSpecMeshRef#name
   */
  readonly name: string;

  /**
   * UID is the UID of Mesh CR
   *
   * @schema VirtualRouterSpecMeshRef#uid
   */
  readonly uid: string;

}

/**
 * Converts an object of type 'VirtualRouterSpecMeshRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecMeshRef(obj: VirtualRouterSpecMeshRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'uid': obj.uid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Route refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_RouteSpec.html
 *
 * @schema VirtualRouterSpecRoutes
 */
export interface VirtualRouterSpecRoutes {
  /**
   * An object that represents the specification of a gRPC route.
   *
   * @schema VirtualRouterSpecRoutes#grpcRoute
   */
  readonly grpcRoute?: VirtualRouterSpecRoutesGrpcRoute;

  /**
   * An object that represents the specification of an HTTP/2 route.
   *
   * @schema VirtualRouterSpecRoutes#http2Route
   */
  readonly http2Route?: VirtualRouterSpecRoutesHttp2Route;

  /**
   * An object that represents the specification of an HTTP route.
   *
   * @schema VirtualRouterSpecRoutes#httpRoute
   */
  readonly httpRoute?: VirtualRouterSpecRoutesHttpRoute;

  /**
   * Route's name
   *
   * @schema VirtualRouterSpecRoutes#name
   */
  readonly name: string;

  /**
   * The priority for the route.
   *
   * @schema VirtualRouterSpecRoutes#priority
   */
  readonly priority?: number;

  /**
   * An object that represents the specification of a TCP route.
   *
   * @schema VirtualRouterSpecRoutes#tcpRoute
   */
  readonly tcpRoute?: VirtualRouterSpecRoutesTcpRoute;

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutes' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutes(obj: VirtualRouterSpecRoutes | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'grpcRoute': toJson_VirtualRouterSpecRoutesGrpcRoute(obj.grpcRoute),
    'http2Route': toJson_VirtualRouterSpecRoutesHttp2Route(obj.http2Route),
    'httpRoute': toJson_VirtualRouterSpecRoutesHttpRoute(obj.httpRoute),
    'name': obj.name,
    'priority': obj.priority,
    'tcpRoute': toJson_VirtualRouterSpecRoutesTcpRoute(obj.tcpRoute),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The port mapping information for the listener.
 *
 * @schema VirtualRouterSpecListenersPortMapping
 */
export interface VirtualRouterSpecListenersPortMapping {
  /**
   * The port used for the port mapping.
   *
   * @schema VirtualRouterSpecListenersPortMapping#port
   */
  readonly port: number;

  /**
   * The protocol used for the port mapping.
   *
   * @schema VirtualRouterSpecListenersPortMapping#protocol
   */
  readonly protocol: VirtualRouterSpecListenersPortMappingProtocol;

}

/**
 * Converts an object of type 'VirtualRouterSpecListenersPortMapping' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecListenersPortMapping(obj: VirtualRouterSpecListenersPortMapping | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'port': obj.port,
    'protocol': obj.protocol,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents the specification of a gRPC route.
 *
 * @schema VirtualRouterSpecRoutesGrpcRoute
 */
export interface VirtualRouterSpecRoutesGrpcRoute {
  /**
   * An object that represents the action to take if a match is determined.
   *
   * @schema VirtualRouterSpecRoutesGrpcRoute#action
   */
  readonly action: VirtualRouterSpecRoutesGrpcRouteAction;

  /**
   * An object that represents the criteria for determining a request match.
   *
   * @schema VirtualRouterSpecRoutesGrpcRoute#match
   */
  readonly match: VirtualRouterSpecRoutesGrpcRouteMatch;

  /**
   * An object that represents a retry policy.
   *
   * @schema VirtualRouterSpecRoutesGrpcRoute#retryPolicy
   */
  readonly retryPolicy?: VirtualRouterSpecRoutesGrpcRouteRetryPolicy;

  /**
   * An object that represents a grpc timeout.
   *
   * @schema VirtualRouterSpecRoutesGrpcRoute#timeout
   */
  readonly timeout?: VirtualRouterSpecRoutesGrpcRouteTimeout;

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesGrpcRoute' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesGrpcRoute(obj: VirtualRouterSpecRoutesGrpcRoute | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'action': toJson_VirtualRouterSpecRoutesGrpcRouteAction(obj.action),
    'match': toJson_VirtualRouterSpecRoutesGrpcRouteMatch(obj.match),
    'retryPolicy': toJson_VirtualRouterSpecRoutesGrpcRouteRetryPolicy(obj.retryPolicy),
    'timeout': toJson_VirtualRouterSpecRoutesGrpcRouteTimeout(obj.timeout),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents the specification of an HTTP/2 route.
 *
 * @schema VirtualRouterSpecRoutesHttp2Route
 */
export interface VirtualRouterSpecRoutesHttp2Route {
  /**
   * An object that represents the action to take if a match is determined.
   *
   * @schema VirtualRouterSpecRoutesHttp2Route#action
   */
  readonly action: VirtualRouterSpecRoutesHttp2RouteAction;

  /**
   * An object that represents the criteria for determining a request match.
   *
   * @schema VirtualRouterSpecRoutesHttp2Route#match
   */
  readonly match: VirtualRouterSpecRoutesHttp2RouteMatch;

  /**
   * An object that represents a retry policy.
   *
   * @schema VirtualRouterSpecRoutesHttp2Route#retryPolicy
   */
  readonly retryPolicy?: VirtualRouterSpecRoutesHttp2RouteRetryPolicy;

  /**
   * An object that represents a http timeout.
   *
   * @schema VirtualRouterSpecRoutesHttp2Route#timeout
   */
  readonly timeout?: VirtualRouterSpecRoutesHttp2RouteTimeout;

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesHttp2Route' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesHttp2Route(obj: VirtualRouterSpecRoutesHttp2Route | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'action': toJson_VirtualRouterSpecRoutesHttp2RouteAction(obj.action),
    'match': toJson_VirtualRouterSpecRoutesHttp2RouteMatch(obj.match),
    'retryPolicy': toJson_VirtualRouterSpecRoutesHttp2RouteRetryPolicy(obj.retryPolicy),
    'timeout': toJson_VirtualRouterSpecRoutesHttp2RouteTimeout(obj.timeout),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents the specification of an HTTP route.
 *
 * @schema VirtualRouterSpecRoutesHttpRoute
 */
export interface VirtualRouterSpecRoutesHttpRoute {
  /**
   * An object that represents the action to take if a match is determined.
   *
   * @schema VirtualRouterSpecRoutesHttpRoute#action
   */
  readonly action: VirtualRouterSpecRoutesHttpRouteAction;

  /**
   * An object that represents the criteria for determining a request match.
   *
   * @schema VirtualRouterSpecRoutesHttpRoute#match
   */
  readonly match: VirtualRouterSpecRoutesHttpRouteMatch;

  /**
   * An object that represents a retry policy.
   *
   * @schema VirtualRouterSpecRoutesHttpRoute#retryPolicy
   */
  readonly retryPolicy?: VirtualRouterSpecRoutesHttpRouteRetryPolicy;

  /**
   * An object that represents a http timeout.
   *
   * @schema VirtualRouterSpecRoutesHttpRoute#timeout
   */
  readonly timeout?: VirtualRouterSpecRoutesHttpRouteTimeout;

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesHttpRoute' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesHttpRoute(obj: VirtualRouterSpecRoutesHttpRoute | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'action': toJson_VirtualRouterSpecRoutesHttpRouteAction(obj.action),
    'match': toJson_VirtualRouterSpecRoutesHttpRouteMatch(obj.match),
    'retryPolicy': toJson_VirtualRouterSpecRoutesHttpRouteRetryPolicy(obj.retryPolicy),
    'timeout': toJson_VirtualRouterSpecRoutesHttpRouteTimeout(obj.timeout),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents the specification of a TCP route.
 *
 * @schema VirtualRouterSpecRoutesTcpRoute
 */
export interface VirtualRouterSpecRoutesTcpRoute {
  /**
   * The action to take if a match is determined.
   *
   * @schema VirtualRouterSpecRoutesTcpRoute#action
   */
  readonly action: VirtualRouterSpecRoutesTcpRouteAction;

  /**
   * An object that represents the criteria for determining a request match.
   *
   * @schema VirtualRouterSpecRoutesTcpRoute#match
   */
  readonly match?: VirtualRouterSpecRoutesTcpRouteMatch;

  /**
   * An object that represents a tcp timeout.
   *
   * @schema VirtualRouterSpecRoutesTcpRoute#timeout
   */
  readonly timeout?: VirtualRouterSpecRoutesTcpRouteTimeout;

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesTcpRoute' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesTcpRoute(obj: VirtualRouterSpecRoutesTcpRoute | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'action': toJson_VirtualRouterSpecRoutesTcpRouteAction(obj.action),
    'match': toJson_VirtualRouterSpecRoutesTcpRouteMatch(obj.match),
    'timeout': toJson_VirtualRouterSpecRoutesTcpRouteTimeout(obj.timeout),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The protocol used for the port mapping.
 *
 * @schema VirtualRouterSpecListenersPortMappingProtocol
 */
export enum VirtualRouterSpecListenersPortMappingProtocol {
  /** grpc */
  GRPC = "grpc",
  /** http */
  HTTP = "http",
  /** http2 */
  HTTP2 = "http2",
  /** tcp */
  TCP = "tcp",
}

/**
 * An object that represents the action to take if a match is determined.
 *
 * @schema VirtualRouterSpecRoutesGrpcRouteAction
 */
export interface VirtualRouterSpecRoutesGrpcRouteAction {
  /**
   * An object that represents the targets that traffic is routed to when a request matches the route.
   *
   * @schema VirtualRouterSpecRoutesGrpcRouteAction#weightedTargets
   */
  readonly weightedTargets: VirtualRouterSpecRoutesGrpcRouteActionWeightedTargets[];

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesGrpcRouteAction' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesGrpcRouteAction(obj: VirtualRouterSpecRoutesGrpcRouteAction | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'weightedTargets': obj.weightedTargets?.map(y => toJson_VirtualRouterSpecRoutesGrpcRouteActionWeightedTargets(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents the criteria for determining a request match.
 *
 * @schema VirtualRouterSpecRoutesGrpcRouteMatch
 */
export interface VirtualRouterSpecRoutesGrpcRouteMatch {
  /**
   * An object that represents the data to match from the request.
   *
   * @schema VirtualRouterSpecRoutesGrpcRouteMatch#metadata
   */
  readonly metadata?: VirtualRouterSpecRoutesGrpcRouteMatchMetadata[];

  /**
   * The method name to match from the request. If you specify a name, you must also specify a serviceName.
   *
   * @schema VirtualRouterSpecRoutesGrpcRouteMatch#methodName
   */
  readonly methodName?: string;

  /**
   * Specifies the port to match requests with
   *
   * @schema VirtualRouterSpecRoutesGrpcRouteMatch#port
   */
  readonly port?: number;

  /**
   * The fully qualified domain name for the service to match from the request.
   *
   * @schema VirtualRouterSpecRoutesGrpcRouteMatch#serviceName
   */
  readonly serviceName?: string;

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesGrpcRouteMatch' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesGrpcRouteMatch(obj: VirtualRouterSpecRoutesGrpcRouteMatch | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata?.map(y => toJson_VirtualRouterSpecRoutesGrpcRouteMatchMetadata(y)),
    'methodName': obj.methodName,
    'port': obj.port,
    'serviceName': obj.serviceName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents a retry policy.
 *
 * @schema VirtualRouterSpecRoutesGrpcRouteRetryPolicy
 */
export interface VirtualRouterSpecRoutesGrpcRouteRetryPolicy {
  /**
   * @schema VirtualRouterSpecRoutesGrpcRouteRetryPolicy#grpcRetryEvents
   */
  readonly grpcRetryEvents?: VirtualRouterSpecRoutesGrpcRouteRetryPolicyGrpcRetryEvents[];

  /**
   * @schema VirtualRouterSpecRoutesGrpcRouteRetryPolicy#httpRetryEvents
   */
  readonly httpRetryEvents?: VirtualRouterSpecRoutesGrpcRouteRetryPolicyHttpRetryEvents[];

  /**
   * The maximum number of retry attempts.
   *
   * @schema VirtualRouterSpecRoutesGrpcRouteRetryPolicy#maxRetries
   */
  readonly maxRetries: number;

  /**
   * An object that represents a duration of time.
   *
   * @schema VirtualRouterSpecRoutesGrpcRouteRetryPolicy#perRetryTimeout
   */
  readonly perRetryTimeout: VirtualRouterSpecRoutesGrpcRouteRetryPolicyPerRetryTimeout;

  /**
   * @schema VirtualRouterSpecRoutesGrpcRouteRetryPolicy#tcpRetryEvents
   */
  readonly tcpRetryEvents?: VirtualRouterSpecRoutesGrpcRouteRetryPolicyTcpRetryEvents[];

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesGrpcRouteRetryPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesGrpcRouteRetryPolicy(obj: VirtualRouterSpecRoutesGrpcRouteRetryPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'grpcRetryEvents': obj.grpcRetryEvents?.map(y => y),
    'httpRetryEvents': obj.httpRetryEvents?.map(y => y),
    'maxRetries': obj.maxRetries,
    'perRetryTimeout': toJson_VirtualRouterSpecRoutesGrpcRouteRetryPolicyPerRetryTimeout(obj.perRetryTimeout),
    'tcpRetryEvents': obj.tcpRetryEvents?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents a grpc timeout.
 *
 * @schema VirtualRouterSpecRoutesGrpcRouteTimeout
 */
export interface VirtualRouterSpecRoutesGrpcRouteTimeout {
  /**
   * An object that represents idle timeout duration.
   *
   * @schema VirtualRouterSpecRoutesGrpcRouteTimeout#idle
   */
  readonly idle?: VirtualRouterSpecRoutesGrpcRouteTimeoutIdle;

  /**
   * An object that represents per request timeout duration.
   *
   * @schema VirtualRouterSpecRoutesGrpcRouteTimeout#perRequest
   */
  readonly perRequest?: VirtualRouterSpecRoutesGrpcRouteTimeoutPerRequest;

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesGrpcRouteTimeout' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesGrpcRouteTimeout(obj: VirtualRouterSpecRoutesGrpcRouteTimeout | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'idle': toJson_VirtualRouterSpecRoutesGrpcRouteTimeoutIdle(obj.idle),
    'perRequest': toJson_VirtualRouterSpecRoutesGrpcRouteTimeoutPerRequest(obj.perRequest),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents the action to take if a match is determined.
 *
 * @schema VirtualRouterSpecRoutesHttp2RouteAction
 */
export interface VirtualRouterSpecRoutesHttp2RouteAction {
  /**
   * An object that represents the targets that traffic is routed to when a request matches the route.
   *
   * @schema VirtualRouterSpecRoutesHttp2RouteAction#weightedTargets
   */
  readonly weightedTargets: VirtualRouterSpecRoutesHttp2RouteActionWeightedTargets[];

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesHttp2RouteAction' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesHttp2RouteAction(obj: VirtualRouterSpecRoutesHttp2RouteAction | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'weightedTargets': obj.weightedTargets?.map(y => toJson_VirtualRouterSpecRoutesHttp2RouteActionWeightedTargets(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents the criteria for determining a request match.
 *
 * @schema VirtualRouterSpecRoutesHttp2RouteMatch
 */
export interface VirtualRouterSpecRoutesHttp2RouteMatch {
  /**
   * An object that represents the client request headers to match on.
   *
   * @schema VirtualRouterSpecRoutesHttp2RouteMatch#headers
   */
  readonly headers?: VirtualRouterSpecRoutesHttp2RouteMatchHeaders[];

  /**
   * The client request method to match on.
   *
   * @schema VirtualRouterSpecRoutesHttp2RouteMatch#method
   */
  readonly method?: VirtualRouterSpecRoutesHttp2RouteMatchMethod;

  /**
   * The client specified Path to match on.
   *
   * @schema VirtualRouterSpecRoutesHttp2RouteMatch#path
   */
  readonly path?: VirtualRouterSpecRoutesHttp2RouteMatchPath;

  /**
   * Specifies the port to match requests with
   *
   * @schema VirtualRouterSpecRoutesHttp2RouteMatch#port
   */
  readonly port?: number;

  /**
   * Specifies the prefix to match requests with
   *
   * @schema VirtualRouterSpecRoutesHttp2RouteMatch#prefix
   */
  readonly prefix?: string;

  /**
   * The client specified queryParameters to match on
   *
   * @schema VirtualRouterSpecRoutesHttp2RouteMatch#queryParameters
   */
  readonly queryParameters?: VirtualRouterSpecRoutesHttp2RouteMatchQueryParameters[];

  /**
   * The client request scheme to match on
   *
   * @schema VirtualRouterSpecRoutesHttp2RouteMatch#scheme
   */
  readonly scheme?: VirtualRouterSpecRoutesHttp2RouteMatchScheme;

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesHttp2RouteMatch' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesHttp2RouteMatch(obj: VirtualRouterSpecRoutesHttp2RouteMatch | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'headers': obj.headers?.map(y => toJson_VirtualRouterSpecRoutesHttp2RouteMatchHeaders(y)),
    'method': obj.method,
    'path': toJson_VirtualRouterSpecRoutesHttp2RouteMatchPath(obj.path),
    'port': obj.port,
    'prefix': obj.prefix,
    'queryParameters': obj.queryParameters?.map(y => toJson_VirtualRouterSpecRoutesHttp2RouteMatchQueryParameters(y)),
    'scheme': obj.scheme,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents a retry policy.
 *
 * @schema VirtualRouterSpecRoutesHttp2RouteRetryPolicy
 */
export interface VirtualRouterSpecRoutesHttp2RouteRetryPolicy {
  /**
   * @schema VirtualRouterSpecRoutesHttp2RouteRetryPolicy#httpRetryEvents
   */
  readonly httpRetryEvents?: VirtualRouterSpecRoutesHttp2RouteRetryPolicyHttpRetryEvents[];

  /**
   * The maximum number of retry attempts.
   *
   * @schema VirtualRouterSpecRoutesHttp2RouteRetryPolicy#maxRetries
   */
  readonly maxRetries: number;

  /**
   * An object that represents a duration of time
   *
   * @schema VirtualRouterSpecRoutesHttp2RouteRetryPolicy#perRetryTimeout
   */
  readonly perRetryTimeout: VirtualRouterSpecRoutesHttp2RouteRetryPolicyPerRetryTimeout;

  /**
   * @schema VirtualRouterSpecRoutesHttp2RouteRetryPolicy#tcpRetryEvents
   */
  readonly tcpRetryEvents?: VirtualRouterSpecRoutesHttp2RouteRetryPolicyTcpRetryEvents[];

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesHttp2RouteRetryPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesHttp2RouteRetryPolicy(obj: VirtualRouterSpecRoutesHttp2RouteRetryPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'httpRetryEvents': obj.httpRetryEvents?.map(y => y),
    'maxRetries': obj.maxRetries,
    'perRetryTimeout': toJson_VirtualRouterSpecRoutesHttp2RouteRetryPolicyPerRetryTimeout(obj.perRetryTimeout),
    'tcpRetryEvents': obj.tcpRetryEvents?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents a http timeout.
 *
 * @schema VirtualRouterSpecRoutesHttp2RouteTimeout
 */
export interface VirtualRouterSpecRoutesHttp2RouteTimeout {
  /**
   * An object that represents idle timeout duration.
   *
   * @schema VirtualRouterSpecRoutesHttp2RouteTimeout#idle
   */
  readonly idle?: VirtualRouterSpecRoutesHttp2RouteTimeoutIdle;

  /**
   * An object that represents per request timeout duration.
   *
   * @schema VirtualRouterSpecRoutesHttp2RouteTimeout#perRequest
   */
  readonly perRequest?: VirtualRouterSpecRoutesHttp2RouteTimeoutPerRequest;

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesHttp2RouteTimeout' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesHttp2RouteTimeout(obj: VirtualRouterSpecRoutesHttp2RouteTimeout | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'idle': toJson_VirtualRouterSpecRoutesHttp2RouteTimeoutIdle(obj.idle),
    'perRequest': toJson_VirtualRouterSpecRoutesHttp2RouteTimeoutPerRequest(obj.perRequest),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents the action to take if a match is determined.
 *
 * @schema VirtualRouterSpecRoutesHttpRouteAction
 */
export interface VirtualRouterSpecRoutesHttpRouteAction {
  /**
   * An object that represents the targets that traffic is routed to when a request matches the route.
   *
   * @schema VirtualRouterSpecRoutesHttpRouteAction#weightedTargets
   */
  readonly weightedTargets: VirtualRouterSpecRoutesHttpRouteActionWeightedTargets[];

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesHttpRouteAction' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesHttpRouteAction(obj: VirtualRouterSpecRoutesHttpRouteAction | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'weightedTargets': obj.weightedTargets?.map(y => toJson_VirtualRouterSpecRoutesHttpRouteActionWeightedTargets(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents the criteria for determining a request match.
 *
 * @schema VirtualRouterSpecRoutesHttpRouteMatch
 */
export interface VirtualRouterSpecRoutesHttpRouteMatch {
  /**
   * An object that represents the client request headers to match on.
   *
   * @schema VirtualRouterSpecRoutesHttpRouteMatch#headers
   */
  readonly headers?: VirtualRouterSpecRoutesHttpRouteMatchHeaders[];

  /**
   * The client request method to match on.
   *
   * @schema VirtualRouterSpecRoutesHttpRouteMatch#method
   */
  readonly method?: VirtualRouterSpecRoutesHttpRouteMatchMethod;

  /**
   * The client specified Path to match on.
   *
   * @schema VirtualRouterSpecRoutesHttpRouteMatch#path
   */
  readonly path?: VirtualRouterSpecRoutesHttpRouteMatchPath;

  /**
   * Specifies the port to match requests with
   *
   * @schema VirtualRouterSpecRoutesHttpRouteMatch#port
   */
  readonly port?: number;

  /**
   * Specifies the prefix to match requests with
   *
   * @schema VirtualRouterSpecRoutesHttpRouteMatch#prefix
   */
  readonly prefix?: string;

  /**
   * The client specified queryParameters to match on
   *
   * @schema VirtualRouterSpecRoutesHttpRouteMatch#queryParameters
   */
  readonly queryParameters?: VirtualRouterSpecRoutesHttpRouteMatchQueryParameters[];

  /**
   * The client request scheme to match on
   *
   * @schema VirtualRouterSpecRoutesHttpRouteMatch#scheme
   */
  readonly scheme?: VirtualRouterSpecRoutesHttpRouteMatchScheme;

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesHttpRouteMatch' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesHttpRouteMatch(obj: VirtualRouterSpecRoutesHttpRouteMatch | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'headers': obj.headers?.map(y => toJson_VirtualRouterSpecRoutesHttpRouteMatchHeaders(y)),
    'method': obj.method,
    'path': toJson_VirtualRouterSpecRoutesHttpRouteMatchPath(obj.path),
    'port': obj.port,
    'prefix': obj.prefix,
    'queryParameters': obj.queryParameters?.map(y => toJson_VirtualRouterSpecRoutesHttpRouteMatchQueryParameters(y)),
    'scheme': obj.scheme,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents a retry policy.
 *
 * @schema VirtualRouterSpecRoutesHttpRouteRetryPolicy
 */
export interface VirtualRouterSpecRoutesHttpRouteRetryPolicy {
  /**
   * @schema VirtualRouterSpecRoutesHttpRouteRetryPolicy#httpRetryEvents
   */
  readonly httpRetryEvents?: VirtualRouterSpecRoutesHttpRouteRetryPolicyHttpRetryEvents[];

  /**
   * The maximum number of retry attempts.
   *
   * @schema VirtualRouterSpecRoutesHttpRouteRetryPolicy#maxRetries
   */
  readonly maxRetries: number;

  /**
   * An object that represents a duration of time
   *
   * @schema VirtualRouterSpecRoutesHttpRouteRetryPolicy#perRetryTimeout
   */
  readonly perRetryTimeout: VirtualRouterSpecRoutesHttpRouteRetryPolicyPerRetryTimeout;

  /**
   * @schema VirtualRouterSpecRoutesHttpRouteRetryPolicy#tcpRetryEvents
   */
  readonly tcpRetryEvents?: VirtualRouterSpecRoutesHttpRouteRetryPolicyTcpRetryEvents[];

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesHttpRouteRetryPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesHttpRouteRetryPolicy(obj: VirtualRouterSpecRoutesHttpRouteRetryPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'httpRetryEvents': obj.httpRetryEvents?.map(y => y),
    'maxRetries': obj.maxRetries,
    'perRetryTimeout': toJson_VirtualRouterSpecRoutesHttpRouteRetryPolicyPerRetryTimeout(obj.perRetryTimeout),
    'tcpRetryEvents': obj.tcpRetryEvents?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents a http timeout.
 *
 * @schema VirtualRouterSpecRoutesHttpRouteTimeout
 */
export interface VirtualRouterSpecRoutesHttpRouteTimeout {
  /**
   * An object that represents idle timeout duration.
   *
   * @schema VirtualRouterSpecRoutesHttpRouteTimeout#idle
   */
  readonly idle?: VirtualRouterSpecRoutesHttpRouteTimeoutIdle;

  /**
   * An object that represents per request timeout duration.
   *
   * @schema VirtualRouterSpecRoutesHttpRouteTimeout#perRequest
   */
  readonly perRequest?: VirtualRouterSpecRoutesHttpRouteTimeoutPerRequest;

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesHttpRouteTimeout' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesHttpRouteTimeout(obj: VirtualRouterSpecRoutesHttpRouteTimeout | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'idle': toJson_VirtualRouterSpecRoutesHttpRouteTimeoutIdle(obj.idle),
    'perRequest': toJson_VirtualRouterSpecRoutesHttpRouteTimeoutPerRequest(obj.perRequest),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The action to take if a match is determined.
 *
 * @schema VirtualRouterSpecRoutesTcpRouteAction
 */
export interface VirtualRouterSpecRoutesTcpRouteAction {
  /**
   * An object that represents the targets that traffic is routed to when a request matches the route.
   *
   * @schema VirtualRouterSpecRoutesTcpRouteAction#weightedTargets
   */
  readonly weightedTargets: VirtualRouterSpecRoutesTcpRouteActionWeightedTargets[];

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesTcpRouteAction' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesTcpRouteAction(obj: VirtualRouterSpecRoutesTcpRouteAction | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'weightedTargets': obj.weightedTargets?.map(y => toJson_VirtualRouterSpecRoutesTcpRouteActionWeightedTargets(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents the criteria for determining a request match.
 *
 * @schema VirtualRouterSpecRoutesTcpRouteMatch
 */
export interface VirtualRouterSpecRoutesTcpRouteMatch {
  /**
   * Specifies the port to match requests with
   *
   * @schema VirtualRouterSpecRoutesTcpRouteMatch#port
   */
  readonly port?: number;

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesTcpRouteMatch' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesTcpRouteMatch(obj: VirtualRouterSpecRoutesTcpRouteMatch | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'port': obj.port,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents a tcp timeout.
 *
 * @schema VirtualRouterSpecRoutesTcpRouteTimeout
 */
export interface VirtualRouterSpecRoutesTcpRouteTimeout {
  /**
   * An object that represents idle timeout duration.
   *
   * @schema VirtualRouterSpecRoutesTcpRouteTimeout#idle
   */
  readonly idle?: VirtualRouterSpecRoutesTcpRouteTimeoutIdle;

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesTcpRouteTimeout' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesTcpRouteTimeout(obj: VirtualRouterSpecRoutesTcpRouteTimeout | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'idle': toJson_VirtualRouterSpecRoutesTcpRouteTimeoutIdle(obj.idle),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WeightedTarget refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_WeightedTarget.html
 *
 * @schema VirtualRouterSpecRoutesGrpcRouteActionWeightedTargets
 */
export interface VirtualRouterSpecRoutesGrpcRouteActionWeightedTargets {
  /**
   * Specifies the targeted port of the weighted object
   *
   * @schema VirtualRouterSpecRoutesGrpcRouteActionWeightedTargets#port
   */
  readonly port?: number;

  /**
   * Amazon Resource Name to AppMesh VirtualNode object to associate with the weighted target. Exactly one of 'virtualNodeRef' or 'virtualNodeARN' must be specified.
   *
   * @schema VirtualRouterSpecRoutesGrpcRouteActionWeightedTargets#virtualNodeARN
   */
  readonly virtualNodeArn?: string;

  /**
   * Reference to Kubernetes VirtualNode CR in cluster to associate with the weighted target. Exactly one of 'virtualNodeRef' or 'virtualNodeARN' must be specified.
   *
   * @schema VirtualRouterSpecRoutesGrpcRouteActionWeightedTargets#virtualNodeRef
   */
  readonly virtualNodeRef?: VirtualRouterSpecRoutesGrpcRouteActionWeightedTargetsVirtualNodeRef;

  /**
   * The relative weight of the weighted target.
   *
   * @schema VirtualRouterSpecRoutesGrpcRouteActionWeightedTargets#weight
   */
  readonly weight: number;

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesGrpcRouteActionWeightedTargets' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesGrpcRouteActionWeightedTargets(obj: VirtualRouterSpecRoutesGrpcRouteActionWeightedTargets | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'port': obj.port,
    'virtualNodeARN': obj.virtualNodeArn,
    'virtualNodeRef': toJson_VirtualRouterSpecRoutesGrpcRouteActionWeightedTargetsVirtualNodeRef(obj.virtualNodeRef),
    'weight': obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * GRPCRouteMetadata refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_GrpcRouteMetadata.html
 *
 * @schema VirtualRouterSpecRoutesGrpcRouteMatchMetadata
 */
export interface VirtualRouterSpecRoutesGrpcRouteMatchMetadata {
  /**
   * Specify True to match anything except the match criteria. The default value is False.
   *
   * @schema VirtualRouterSpecRoutesGrpcRouteMatchMetadata#invert
   */
  readonly invert?: boolean;

  /**
   * An object that represents the data to match from the request.
   *
   * @schema VirtualRouterSpecRoutesGrpcRouteMatchMetadata#match
   */
  readonly match?: VirtualRouterSpecRoutesGrpcRouteMatchMetadataMatch;

  /**
   * The name of the route.
   *
   * @schema VirtualRouterSpecRoutesGrpcRouteMatchMetadata#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesGrpcRouteMatchMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesGrpcRouteMatchMetadata(obj: VirtualRouterSpecRoutesGrpcRouteMatchMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'invert': obj.invert,
    'match': toJson_VirtualRouterSpecRoutesGrpcRouteMatchMetadataMatch(obj.match),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualRouterSpecRoutesGrpcRouteRetryPolicyGrpcRetryEvents
 */
export enum VirtualRouterSpecRoutesGrpcRouteRetryPolicyGrpcRetryEvents {
  /** cancelled */
  CANCELLED = "cancelled",
  /** deadline-exceeded */
  DEADLINE_HYPHEN_EXCEEDED = "deadline-exceeded",
  /** internal */
  INTERNAL = "internal",
  /** resource-exhausted */
  RESOURCE_HYPHEN_EXHAUSTED = "resource-exhausted",
  /** unavailable */
  UNAVAILABLE = "unavailable",
}

/**
 * @schema VirtualRouterSpecRoutesGrpcRouteRetryPolicyHttpRetryEvents
 */
export enum VirtualRouterSpecRoutesGrpcRouteRetryPolicyHttpRetryEvents {
  /** server-error */
  SERVER_HYPHEN_ERROR = "server-error",
  /** gateway-error */
  GATEWAY_HYPHEN_ERROR = "gateway-error",
  /** client-error */
  CLIENT_HYPHEN_ERROR = "client-error",
  /** stream-error */
  STREAM_HYPHEN_ERROR = "stream-error",
}

/**
 * An object that represents a duration of time.
 *
 * @schema VirtualRouterSpecRoutesGrpcRouteRetryPolicyPerRetryTimeout
 */
export interface VirtualRouterSpecRoutesGrpcRouteRetryPolicyPerRetryTimeout {
  /**
   * A unit of time.
   *
   * @schema VirtualRouterSpecRoutesGrpcRouteRetryPolicyPerRetryTimeout#unit
   */
  readonly unit: VirtualRouterSpecRoutesGrpcRouteRetryPolicyPerRetryTimeoutUnit;

  /**
   * A number of time units.
   *
   * @schema VirtualRouterSpecRoutesGrpcRouteRetryPolicyPerRetryTimeout#value
   */
  readonly value: number;

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesGrpcRouteRetryPolicyPerRetryTimeout' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesGrpcRouteRetryPolicyPerRetryTimeout(obj: VirtualRouterSpecRoutesGrpcRouteRetryPolicyPerRetryTimeout | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'unit': obj.unit,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualRouterSpecRoutesGrpcRouteRetryPolicyTcpRetryEvents
 */
export enum VirtualRouterSpecRoutesGrpcRouteRetryPolicyTcpRetryEvents {
  /** connection-error */
  CONNECTION_HYPHEN_ERROR = "connection-error",
}

/**
 * An object that represents idle timeout duration.
 *
 * @schema VirtualRouterSpecRoutesGrpcRouteTimeoutIdle
 */
export interface VirtualRouterSpecRoutesGrpcRouteTimeoutIdle {
  /**
   * A unit of time.
   *
   * @schema VirtualRouterSpecRoutesGrpcRouteTimeoutIdle#unit
   */
  readonly unit: VirtualRouterSpecRoutesGrpcRouteTimeoutIdleUnit;

  /**
   * A number of time units.
   *
   * @schema VirtualRouterSpecRoutesGrpcRouteTimeoutIdle#value
   */
  readonly value: number;

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesGrpcRouteTimeoutIdle' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesGrpcRouteTimeoutIdle(obj: VirtualRouterSpecRoutesGrpcRouteTimeoutIdle | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'unit': obj.unit,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents per request timeout duration.
 *
 * @schema VirtualRouterSpecRoutesGrpcRouteTimeoutPerRequest
 */
export interface VirtualRouterSpecRoutesGrpcRouteTimeoutPerRequest {
  /**
   * A unit of time.
   *
   * @schema VirtualRouterSpecRoutesGrpcRouteTimeoutPerRequest#unit
   */
  readonly unit: VirtualRouterSpecRoutesGrpcRouteTimeoutPerRequestUnit;

  /**
   * A number of time units.
   *
   * @schema VirtualRouterSpecRoutesGrpcRouteTimeoutPerRequest#value
   */
  readonly value: number;

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesGrpcRouteTimeoutPerRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesGrpcRouteTimeoutPerRequest(obj: VirtualRouterSpecRoutesGrpcRouteTimeoutPerRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'unit': obj.unit,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WeightedTarget refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_WeightedTarget.html
 *
 * @schema VirtualRouterSpecRoutesHttp2RouteActionWeightedTargets
 */
export interface VirtualRouterSpecRoutesHttp2RouteActionWeightedTargets {
  /**
   * Specifies the targeted port of the weighted object
   *
   * @schema VirtualRouterSpecRoutesHttp2RouteActionWeightedTargets#port
   */
  readonly port?: number;

  /**
   * Amazon Resource Name to AppMesh VirtualNode object to associate with the weighted target. Exactly one of 'virtualNodeRef' or 'virtualNodeARN' must be specified.
   *
   * @schema VirtualRouterSpecRoutesHttp2RouteActionWeightedTargets#virtualNodeARN
   */
  readonly virtualNodeArn?: string;

  /**
   * Reference to Kubernetes VirtualNode CR in cluster to associate with the weighted target. Exactly one of 'virtualNodeRef' or 'virtualNodeARN' must be specified.
   *
   * @schema VirtualRouterSpecRoutesHttp2RouteActionWeightedTargets#virtualNodeRef
   */
  readonly virtualNodeRef?: VirtualRouterSpecRoutesHttp2RouteActionWeightedTargetsVirtualNodeRef;

  /**
   * The relative weight of the weighted target.
   *
   * @schema VirtualRouterSpecRoutesHttp2RouteActionWeightedTargets#weight
   */
  readonly weight: number;

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesHttp2RouteActionWeightedTargets' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesHttp2RouteActionWeightedTargets(obj: VirtualRouterSpecRoutesHttp2RouteActionWeightedTargets | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'port': obj.port,
    'virtualNodeARN': obj.virtualNodeArn,
    'virtualNodeRef': toJson_VirtualRouterSpecRoutesHttp2RouteActionWeightedTargetsVirtualNodeRef(obj.virtualNodeRef),
    'weight': obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPRouteHeader refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HttpRouteHeader.html
 *
 * @schema VirtualRouterSpecRoutesHttp2RouteMatchHeaders
 */
export interface VirtualRouterSpecRoutesHttp2RouteMatchHeaders {
  /**
   * Specify True to match anything except the match criteria. The default value is False.
   *
   * @schema VirtualRouterSpecRoutesHttp2RouteMatchHeaders#invert
   */
  readonly invert?: boolean;

  /**
   * The HeaderMatchMethod object.
   *
   * @schema VirtualRouterSpecRoutesHttp2RouteMatchHeaders#match
   */
  readonly match?: VirtualRouterSpecRoutesHttp2RouteMatchHeadersMatch;

  /**
   * A name for the HTTP header in the client request that will be matched on.
   *
   * @schema VirtualRouterSpecRoutesHttp2RouteMatchHeaders#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesHttp2RouteMatchHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesHttp2RouteMatchHeaders(obj: VirtualRouterSpecRoutesHttp2RouteMatchHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'invert': obj.invert,
    'match': toJson_VirtualRouterSpecRoutesHttp2RouteMatchHeadersMatch(obj.match),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The client request method to match on.
 *
 * @schema VirtualRouterSpecRoutesHttp2RouteMatchMethod
 */
export enum VirtualRouterSpecRoutesHttp2RouteMatchMethod {
  /** CONNECT */
  CONNECT = "CONNECT",
  /** DELETE */
  DELETE = "DELETE",
  /** GET */
  GET = "GET",
  /** HEAD */
  HEAD = "HEAD",
  /** OPTIONS */
  OPTIONS = "OPTIONS",
  /** PATCH */
  PATCH = "PATCH",
  /** POST */
  POST = "POST",
  /** PUT */
  PUT = "PUT",
  /** TRACE */
  TRACE = "TRACE",
}

/**
 * The client specified Path to match on.
 *
 * @schema VirtualRouterSpecRoutesHttp2RouteMatchPath
 */
export interface VirtualRouterSpecRoutesHttp2RouteMatchPath {
  /**
   * The value sent by the client must match the specified value exactly.
   *
   * @schema VirtualRouterSpecRoutesHttp2RouteMatchPath#exact
   */
  readonly exact?: string;

  /**
   * The value sent by the client must end with the specified characters.
   *
   * @schema VirtualRouterSpecRoutesHttp2RouteMatchPath#regex
   */
  readonly regex?: string;

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesHttp2RouteMatchPath' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesHttp2RouteMatchPath(obj: VirtualRouterSpecRoutesHttp2RouteMatchPath | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exact': obj.exact,
    'regex': obj.regex,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPQueryParameters refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HttpQueryParameter.html
 *
 * @schema VirtualRouterSpecRoutesHttp2RouteMatchQueryParameters
 */
export interface VirtualRouterSpecRoutesHttp2RouteMatchQueryParameters {
  /**
   * The QueryMatchMethod object.
   *
   * @schema VirtualRouterSpecRoutesHttp2RouteMatchQueryParameters#match
   */
  readonly match?: VirtualRouterSpecRoutesHttp2RouteMatchQueryParametersMatch;

  /**
   * @schema VirtualRouterSpecRoutesHttp2RouteMatchQueryParameters#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesHttp2RouteMatchQueryParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesHttp2RouteMatchQueryParameters(obj: VirtualRouterSpecRoutesHttp2RouteMatchQueryParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'match': toJson_VirtualRouterSpecRoutesHttp2RouteMatchQueryParametersMatch(obj.match),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The client request scheme to match on
 *
 * @schema VirtualRouterSpecRoutesHttp2RouteMatchScheme
 */
export enum VirtualRouterSpecRoutesHttp2RouteMatchScheme {
  /** http */
  HTTP = "http",
  /** https */
  HTTPS = "https",
}

/**
 * @schema VirtualRouterSpecRoutesHttp2RouteRetryPolicyHttpRetryEvents
 */
export enum VirtualRouterSpecRoutesHttp2RouteRetryPolicyHttpRetryEvents {
  /** server-error */
  SERVER_HYPHEN_ERROR = "server-error",
  /** gateway-error */
  GATEWAY_HYPHEN_ERROR = "gateway-error",
  /** client-error */
  CLIENT_HYPHEN_ERROR = "client-error",
  /** stream-error */
  STREAM_HYPHEN_ERROR = "stream-error",
}

/**
 * An object that represents a duration of time
 *
 * @schema VirtualRouterSpecRoutesHttp2RouteRetryPolicyPerRetryTimeout
 */
export interface VirtualRouterSpecRoutesHttp2RouteRetryPolicyPerRetryTimeout {
  /**
   * A unit of time.
   *
   * @schema VirtualRouterSpecRoutesHttp2RouteRetryPolicyPerRetryTimeout#unit
   */
  readonly unit: VirtualRouterSpecRoutesHttp2RouteRetryPolicyPerRetryTimeoutUnit;

  /**
   * A number of time units.
   *
   * @schema VirtualRouterSpecRoutesHttp2RouteRetryPolicyPerRetryTimeout#value
   */
  readonly value: number;

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesHttp2RouteRetryPolicyPerRetryTimeout' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesHttp2RouteRetryPolicyPerRetryTimeout(obj: VirtualRouterSpecRoutesHttp2RouteRetryPolicyPerRetryTimeout | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'unit': obj.unit,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualRouterSpecRoutesHttp2RouteRetryPolicyTcpRetryEvents
 */
export enum VirtualRouterSpecRoutesHttp2RouteRetryPolicyTcpRetryEvents {
  /** connection-error */
  CONNECTION_HYPHEN_ERROR = "connection-error",
}

/**
 * An object that represents idle timeout duration.
 *
 * @schema VirtualRouterSpecRoutesHttp2RouteTimeoutIdle
 */
export interface VirtualRouterSpecRoutesHttp2RouteTimeoutIdle {
  /**
   * A unit of time.
   *
   * @schema VirtualRouterSpecRoutesHttp2RouteTimeoutIdle#unit
   */
  readonly unit: VirtualRouterSpecRoutesHttp2RouteTimeoutIdleUnit;

  /**
   * A number of time units.
   *
   * @schema VirtualRouterSpecRoutesHttp2RouteTimeoutIdle#value
   */
  readonly value: number;

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesHttp2RouteTimeoutIdle' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesHttp2RouteTimeoutIdle(obj: VirtualRouterSpecRoutesHttp2RouteTimeoutIdle | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'unit': obj.unit,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents per request timeout duration.
 *
 * @schema VirtualRouterSpecRoutesHttp2RouteTimeoutPerRequest
 */
export interface VirtualRouterSpecRoutesHttp2RouteTimeoutPerRequest {
  /**
   * A unit of time.
   *
   * @schema VirtualRouterSpecRoutesHttp2RouteTimeoutPerRequest#unit
   */
  readonly unit: VirtualRouterSpecRoutesHttp2RouteTimeoutPerRequestUnit;

  /**
   * A number of time units.
   *
   * @schema VirtualRouterSpecRoutesHttp2RouteTimeoutPerRequest#value
   */
  readonly value: number;

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesHttp2RouteTimeoutPerRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesHttp2RouteTimeoutPerRequest(obj: VirtualRouterSpecRoutesHttp2RouteTimeoutPerRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'unit': obj.unit,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WeightedTarget refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_WeightedTarget.html
 *
 * @schema VirtualRouterSpecRoutesHttpRouteActionWeightedTargets
 */
export interface VirtualRouterSpecRoutesHttpRouteActionWeightedTargets {
  /**
   * Specifies the targeted port of the weighted object
   *
   * @schema VirtualRouterSpecRoutesHttpRouteActionWeightedTargets#port
   */
  readonly port?: number;

  /**
   * Amazon Resource Name to AppMesh VirtualNode object to associate with the weighted target. Exactly one of 'virtualNodeRef' or 'virtualNodeARN' must be specified.
   *
   * @schema VirtualRouterSpecRoutesHttpRouteActionWeightedTargets#virtualNodeARN
   */
  readonly virtualNodeArn?: string;

  /**
   * Reference to Kubernetes VirtualNode CR in cluster to associate with the weighted target. Exactly one of 'virtualNodeRef' or 'virtualNodeARN' must be specified.
   *
   * @schema VirtualRouterSpecRoutesHttpRouteActionWeightedTargets#virtualNodeRef
   */
  readonly virtualNodeRef?: VirtualRouterSpecRoutesHttpRouteActionWeightedTargetsVirtualNodeRef;

  /**
   * The relative weight of the weighted target.
   *
   * @schema VirtualRouterSpecRoutesHttpRouteActionWeightedTargets#weight
   */
  readonly weight: number;

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesHttpRouteActionWeightedTargets' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesHttpRouteActionWeightedTargets(obj: VirtualRouterSpecRoutesHttpRouteActionWeightedTargets | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'port': obj.port,
    'virtualNodeARN': obj.virtualNodeArn,
    'virtualNodeRef': toJson_VirtualRouterSpecRoutesHttpRouteActionWeightedTargetsVirtualNodeRef(obj.virtualNodeRef),
    'weight': obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPRouteHeader refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HttpRouteHeader.html
 *
 * @schema VirtualRouterSpecRoutesHttpRouteMatchHeaders
 */
export interface VirtualRouterSpecRoutesHttpRouteMatchHeaders {
  /**
   * Specify True to match anything except the match criteria. The default value is False.
   *
   * @schema VirtualRouterSpecRoutesHttpRouteMatchHeaders#invert
   */
  readonly invert?: boolean;

  /**
   * The HeaderMatchMethod object.
   *
   * @schema VirtualRouterSpecRoutesHttpRouteMatchHeaders#match
   */
  readonly match?: VirtualRouterSpecRoutesHttpRouteMatchHeadersMatch;

  /**
   * A name for the HTTP header in the client request that will be matched on.
   *
   * @schema VirtualRouterSpecRoutesHttpRouteMatchHeaders#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesHttpRouteMatchHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesHttpRouteMatchHeaders(obj: VirtualRouterSpecRoutesHttpRouteMatchHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'invert': obj.invert,
    'match': toJson_VirtualRouterSpecRoutesHttpRouteMatchHeadersMatch(obj.match),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The client request method to match on.
 *
 * @schema VirtualRouterSpecRoutesHttpRouteMatchMethod
 */
export enum VirtualRouterSpecRoutesHttpRouteMatchMethod {
  /** CONNECT */
  CONNECT = "CONNECT",
  /** DELETE */
  DELETE = "DELETE",
  /** GET */
  GET = "GET",
  /** HEAD */
  HEAD = "HEAD",
  /** OPTIONS */
  OPTIONS = "OPTIONS",
  /** PATCH */
  PATCH = "PATCH",
  /** POST */
  POST = "POST",
  /** PUT */
  PUT = "PUT",
  /** TRACE */
  TRACE = "TRACE",
}

/**
 * The client specified Path to match on.
 *
 * @schema VirtualRouterSpecRoutesHttpRouteMatchPath
 */
export interface VirtualRouterSpecRoutesHttpRouteMatchPath {
  /**
   * The value sent by the client must match the specified value exactly.
   *
   * @schema VirtualRouterSpecRoutesHttpRouteMatchPath#exact
   */
  readonly exact?: string;

  /**
   * The value sent by the client must end with the specified characters.
   *
   * @schema VirtualRouterSpecRoutesHttpRouteMatchPath#regex
   */
  readonly regex?: string;

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesHttpRouteMatchPath' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesHttpRouteMatchPath(obj: VirtualRouterSpecRoutesHttpRouteMatchPath | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exact': obj.exact,
    'regex': obj.regex,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPQueryParameters refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HttpQueryParameter.html
 *
 * @schema VirtualRouterSpecRoutesHttpRouteMatchQueryParameters
 */
export interface VirtualRouterSpecRoutesHttpRouteMatchQueryParameters {
  /**
   * The QueryMatchMethod object.
   *
   * @schema VirtualRouterSpecRoutesHttpRouteMatchQueryParameters#match
   */
  readonly match?: VirtualRouterSpecRoutesHttpRouteMatchQueryParametersMatch;

  /**
   * @schema VirtualRouterSpecRoutesHttpRouteMatchQueryParameters#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesHttpRouteMatchQueryParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesHttpRouteMatchQueryParameters(obj: VirtualRouterSpecRoutesHttpRouteMatchQueryParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'match': toJson_VirtualRouterSpecRoutesHttpRouteMatchQueryParametersMatch(obj.match),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The client request scheme to match on
 *
 * @schema VirtualRouterSpecRoutesHttpRouteMatchScheme
 */
export enum VirtualRouterSpecRoutesHttpRouteMatchScheme {
  /** http */
  HTTP = "http",
  /** https */
  HTTPS = "https",
}

/**
 * @schema VirtualRouterSpecRoutesHttpRouteRetryPolicyHttpRetryEvents
 */
export enum VirtualRouterSpecRoutesHttpRouteRetryPolicyHttpRetryEvents {
  /** server-error */
  SERVER_HYPHEN_ERROR = "server-error",
  /** gateway-error */
  GATEWAY_HYPHEN_ERROR = "gateway-error",
  /** client-error */
  CLIENT_HYPHEN_ERROR = "client-error",
  /** stream-error */
  STREAM_HYPHEN_ERROR = "stream-error",
}

/**
 * An object that represents a duration of time
 *
 * @schema VirtualRouterSpecRoutesHttpRouteRetryPolicyPerRetryTimeout
 */
export interface VirtualRouterSpecRoutesHttpRouteRetryPolicyPerRetryTimeout {
  /**
   * A unit of time.
   *
   * @schema VirtualRouterSpecRoutesHttpRouteRetryPolicyPerRetryTimeout#unit
   */
  readonly unit: VirtualRouterSpecRoutesHttpRouteRetryPolicyPerRetryTimeoutUnit;

  /**
   * A number of time units.
   *
   * @schema VirtualRouterSpecRoutesHttpRouteRetryPolicyPerRetryTimeout#value
   */
  readonly value: number;

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesHttpRouteRetryPolicyPerRetryTimeout' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesHttpRouteRetryPolicyPerRetryTimeout(obj: VirtualRouterSpecRoutesHttpRouteRetryPolicyPerRetryTimeout | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'unit': obj.unit,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualRouterSpecRoutesHttpRouteRetryPolicyTcpRetryEvents
 */
export enum VirtualRouterSpecRoutesHttpRouteRetryPolicyTcpRetryEvents {
  /** connection-error */
  CONNECTION_HYPHEN_ERROR = "connection-error",
}

/**
 * An object that represents idle timeout duration.
 *
 * @schema VirtualRouterSpecRoutesHttpRouteTimeoutIdle
 */
export interface VirtualRouterSpecRoutesHttpRouteTimeoutIdle {
  /**
   * A unit of time.
   *
   * @schema VirtualRouterSpecRoutesHttpRouteTimeoutIdle#unit
   */
  readonly unit: VirtualRouterSpecRoutesHttpRouteTimeoutIdleUnit;

  /**
   * A number of time units.
   *
   * @schema VirtualRouterSpecRoutesHttpRouteTimeoutIdle#value
   */
  readonly value: number;

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesHttpRouteTimeoutIdle' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesHttpRouteTimeoutIdle(obj: VirtualRouterSpecRoutesHttpRouteTimeoutIdle | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'unit': obj.unit,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents per request timeout duration.
 *
 * @schema VirtualRouterSpecRoutesHttpRouteTimeoutPerRequest
 */
export interface VirtualRouterSpecRoutesHttpRouteTimeoutPerRequest {
  /**
   * A unit of time.
   *
   * @schema VirtualRouterSpecRoutesHttpRouteTimeoutPerRequest#unit
   */
  readonly unit: VirtualRouterSpecRoutesHttpRouteTimeoutPerRequestUnit;

  /**
   * A number of time units.
   *
   * @schema VirtualRouterSpecRoutesHttpRouteTimeoutPerRequest#value
   */
  readonly value: number;

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesHttpRouteTimeoutPerRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesHttpRouteTimeoutPerRequest(obj: VirtualRouterSpecRoutesHttpRouteTimeoutPerRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'unit': obj.unit,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WeightedTarget refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_WeightedTarget.html
 *
 * @schema VirtualRouterSpecRoutesTcpRouteActionWeightedTargets
 */
export interface VirtualRouterSpecRoutesTcpRouteActionWeightedTargets {
  /**
   * Specifies the targeted port of the weighted object
   *
   * @schema VirtualRouterSpecRoutesTcpRouteActionWeightedTargets#port
   */
  readonly port?: number;

  /**
   * Amazon Resource Name to AppMesh VirtualNode object to associate with the weighted target. Exactly one of 'virtualNodeRef' or 'virtualNodeARN' must be specified.
   *
   * @schema VirtualRouterSpecRoutesTcpRouteActionWeightedTargets#virtualNodeARN
   */
  readonly virtualNodeArn?: string;

  /**
   * Reference to Kubernetes VirtualNode CR in cluster to associate with the weighted target. Exactly one of 'virtualNodeRef' or 'virtualNodeARN' must be specified.
   *
   * @schema VirtualRouterSpecRoutesTcpRouteActionWeightedTargets#virtualNodeRef
   */
  readonly virtualNodeRef?: VirtualRouterSpecRoutesTcpRouteActionWeightedTargetsVirtualNodeRef;

  /**
   * The relative weight of the weighted target.
   *
   * @schema VirtualRouterSpecRoutesTcpRouteActionWeightedTargets#weight
   */
  readonly weight: number;

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesTcpRouteActionWeightedTargets' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesTcpRouteActionWeightedTargets(obj: VirtualRouterSpecRoutesTcpRouteActionWeightedTargets | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'port': obj.port,
    'virtualNodeARN': obj.virtualNodeArn,
    'virtualNodeRef': toJson_VirtualRouterSpecRoutesTcpRouteActionWeightedTargetsVirtualNodeRef(obj.virtualNodeRef),
    'weight': obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents idle timeout duration.
 *
 * @schema VirtualRouterSpecRoutesTcpRouteTimeoutIdle
 */
export interface VirtualRouterSpecRoutesTcpRouteTimeoutIdle {
  /**
   * A unit of time.
   *
   * @schema VirtualRouterSpecRoutesTcpRouteTimeoutIdle#unit
   */
  readonly unit: VirtualRouterSpecRoutesTcpRouteTimeoutIdleUnit;

  /**
   * A number of time units.
   *
   * @schema VirtualRouterSpecRoutesTcpRouteTimeoutIdle#value
   */
  readonly value: number;

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesTcpRouteTimeoutIdle' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesTcpRouteTimeoutIdle(obj: VirtualRouterSpecRoutesTcpRouteTimeoutIdle | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'unit': obj.unit,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to Kubernetes VirtualNode CR in cluster to associate with the weighted target. Exactly one of 'virtualNodeRef' or 'virtualNodeARN' must be specified.
 *
 * @schema VirtualRouterSpecRoutesGrpcRouteActionWeightedTargetsVirtualNodeRef
 */
export interface VirtualRouterSpecRoutesGrpcRouteActionWeightedTargetsVirtualNodeRef {
  /**
   * Name is the name of VirtualNode CR
   *
   * @schema VirtualRouterSpecRoutesGrpcRouteActionWeightedTargetsVirtualNodeRef#name
   */
  readonly name: string;

  /**
   * Namespace is the namespace of VirtualNode CR. If unspecified, defaults to the referencing object's namespace
   *
   * @schema VirtualRouterSpecRoutesGrpcRouteActionWeightedTargetsVirtualNodeRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesGrpcRouteActionWeightedTargetsVirtualNodeRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesGrpcRouteActionWeightedTargetsVirtualNodeRef(obj: VirtualRouterSpecRoutesGrpcRouteActionWeightedTargetsVirtualNodeRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents the data to match from the request.
 *
 * @schema VirtualRouterSpecRoutesGrpcRouteMatchMetadataMatch
 */
export interface VirtualRouterSpecRoutesGrpcRouteMatchMetadataMatch {
  /**
   * The value sent by the client must match the specified value exactly.
   *
   * @schema VirtualRouterSpecRoutesGrpcRouteMatchMetadataMatch#exact
   */
  readonly exact?: string;

  /**
   * The value sent by the client must begin with the specified characters.
   *
   * @schema VirtualRouterSpecRoutesGrpcRouteMatchMetadataMatch#prefix
   */
  readonly prefix?: string;

  /**
   * An object that represents the range of values to match on
   *
   * @schema VirtualRouterSpecRoutesGrpcRouteMatchMetadataMatch#range
   */
  readonly range?: VirtualRouterSpecRoutesGrpcRouteMatchMetadataMatchRange;

  /**
   * The value sent by the client must include the specified characters.
   *
   * @schema VirtualRouterSpecRoutesGrpcRouteMatchMetadataMatch#regex
   */
  readonly regex?: string;

  /**
   * The value sent by the client must end with the specified characters.
   *
   * @schema VirtualRouterSpecRoutesGrpcRouteMatchMetadataMatch#suffix
   */
  readonly suffix?: string;

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesGrpcRouteMatchMetadataMatch' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesGrpcRouteMatchMetadataMatch(obj: VirtualRouterSpecRoutesGrpcRouteMatchMetadataMatch | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exact': obj.exact,
    'prefix': obj.prefix,
    'range': toJson_VirtualRouterSpecRoutesGrpcRouteMatchMetadataMatchRange(obj.range),
    'regex': obj.regex,
    'suffix': obj.suffix,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A unit of time.
 *
 * @schema VirtualRouterSpecRoutesGrpcRouteRetryPolicyPerRetryTimeoutUnit
 */
export enum VirtualRouterSpecRoutesGrpcRouteRetryPolicyPerRetryTimeoutUnit {
  /** s */
  S = "s",
  /** ms */
  MS = "ms",
}

/**
 * A unit of time.
 *
 * @schema VirtualRouterSpecRoutesGrpcRouteTimeoutIdleUnit
 */
export enum VirtualRouterSpecRoutesGrpcRouteTimeoutIdleUnit {
  /** s */
  S = "s",
  /** ms */
  MS = "ms",
}

/**
 * A unit of time.
 *
 * @schema VirtualRouterSpecRoutesGrpcRouteTimeoutPerRequestUnit
 */
export enum VirtualRouterSpecRoutesGrpcRouteTimeoutPerRequestUnit {
  /** s */
  S = "s",
  /** ms */
  MS = "ms",
}

/**
 * Reference to Kubernetes VirtualNode CR in cluster to associate with the weighted target. Exactly one of 'virtualNodeRef' or 'virtualNodeARN' must be specified.
 *
 * @schema VirtualRouterSpecRoutesHttp2RouteActionWeightedTargetsVirtualNodeRef
 */
export interface VirtualRouterSpecRoutesHttp2RouteActionWeightedTargetsVirtualNodeRef {
  /**
   * Name is the name of VirtualNode CR
   *
   * @schema VirtualRouterSpecRoutesHttp2RouteActionWeightedTargetsVirtualNodeRef#name
   */
  readonly name: string;

  /**
   * Namespace is the namespace of VirtualNode CR. If unspecified, defaults to the referencing object's namespace
   *
   * @schema VirtualRouterSpecRoutesHttp2RouteActionWeightedTargetsVirtualNodeRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesHttp2RouteActionWeightedTargetsVirtualNodeRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesHttp2RouteActionWeightedTargetsVirtualNodeRef(obj: VirtualRouterSpecRoutesHttp2RouteActionWeightedTargetsVirtualNodeRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The HeaderMatchMethod object.
 *
 * @schema VirtualRouterSpecRoutesHttp2RouteMatchHeadersMatch
 */
export interface VirtualRouterSpecRoutesHttp2RouteMatchHeadersMatch {
  /**
   * The value sent by the client must match the specified value exactly.
   *
   * @schema VirtualRouterSpecRoutesHttp2RouteMatchHeadersMatch#exact
   */
  readonly exact?: string;

  /**
   * The value sent by the client must begin with the specified characters.
   *
   * @schema VirtualRouterSpecRoutesHttp2RouteMatchHeadersMatch#prefix
   */
  readonly prefix?: string;

  /**
   * An object that represents the range of values to match on.
   *
   * @schema VirtualRouterSpecRoutesHttp2RouteMatchHeadersMatch#range
   */
  readonly range?: VirtualRouterSpecRoutesHttp2RouteMatchHeadersMatchRange;

  /**
   * The value sent by the client must include the specified characters.
   *
   * @schema VirtualRouterSpecRoutesHttp2RouteMatchHeadersMatch#regex
   */
  readonly regex?: string;

  /**
   * The value sent by the client must end with the specified characters.
   *
   * @schema VirtualRouterSpecRoutesHttp2RouteMatchHeadersMatch#suffix
   */
  readonly suffix?: string;

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesHttp2RouteMatchHeadersMatch' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesHttp2RouteMatchHeadersMatch(obj: VirtualRouterSpecRoutesHttp2RouteMatchHeadersMatch | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exact': obj.exact,
    'prefix': obj.prefix,
    'range': toJson_VirtualRouterSpecRoutesHttp2RouteMatchHeadersMatchRange(obj.range),
    'regex': obj.regex,
    'suffix': obj.suffix,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The QueryMatchMethod object.
 *
 * @schema VirtualRouterSpecRoutesHttp2RouteMatchQueryParametersMatch
 */
export interface VirtualRouterSpecRoutesHttp2RouteMatchQueryParametersMatch {
  /**
   * @schema VirtualRouterSpecRoutesHttp2RouteMatchQueryParametersMatch#exact
   */
  readonly exact?: string;

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesHttp2RouteMatchQueryParametersMatch' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesHttp2RouteMatchQueryParametersMatch(obj: VirtualRouterSpecRoutesHttp2RouteMatchQueryParametersMatch | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exact': obj.exact,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A unit of time.
 *
 * @schema VirtualRouterSpecRoutesHttp2RouteRetryPolicyPerRetryTimeoutUnit
 */
export enum VirtualRouterSpecRoutesHttp2RouteRetryPolicyPerRetryTimeoutUnit {
  /** s */
  S = "s",
  /** ms */
  MS = "ms",
}

/**
 * A unit of time.
 *
 * @schema VirtualRouterSpecRoutesHttp2RouteTimeoutIdleUnit
 */
export enum VirtualRouterSpecRoutesHttp2RouteTimeoutIdleUnit {
  /** s */
  S = "s",
  /** ms */
  MS = "ms",
}

/**
 * A unit of time.
 *
 * @schema VirtualRouterSpecRoutesHttp2RouteTimeoutPerRequestUnit
 */
export enum VirtualRouterSpecRoutesHttp2RouteTimeoutPerRequestUnit {
  /** s */
  S = "s",
  /** ms */
  MS = "ms",
}

/**
 * Reference to Kubernetes VirtualNode CR in cluster to associate with the weighted target. Exactly one of 'virtualNodeRef' or 'virtualNodeARN' must be specified.
 *
 * @schema VirtualRouterSpecRoutesHttpRouteActionWeightedTargetsVirtualNodeRef
 */
export interface VirtualRouterSpecRoutesHttpRouteActionWeightedTargetsVirtualNodeRef {
  /**
   * Name is the name of VirtualNode CR
   *
   * @schema VirtualRouterSpecRoutesHttpRouteActionWeightedTargetsVirtualNodeRef#name
   */
  readonly name: string;

  /**
   * Namespace is the namespace of VirtualNode CR. If unspecified, defaults to the referencing object's namespace
   *
   * @schema VirtualRouterSpecRoutesHttpRouteActionWeightedTargetsVirtualNodeRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesHttpRouteActionWeightedTargetsVirtualNodeRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesHttpRouteActionWeightedTargetsVirtualNodeRef(obj: VirtualRouterSpecRoutesHttpRouteActionWeightedTargetsVirtualNodeRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The HeaderMatchMethod object.
 *
 * @schema VirtualRouterSpecRoutesHttpRouteMatchHeadersMatch
 */
export interface VirtualRouterSpecRoutesHttpRouteMatchHeadersMatch {
  /**
   * The value sent by the client must match the specified value exactly.
   *
   * @schema VirtualRouterSpecRoutesHttpRouteMatchHeadersMatch#exact
   */
  readonly exact?: string;

  /**
   * The value sent by the client must begin with the specified characters.
   *
   * @schema VirtualRouterSpecRoutesHttpRouteMatchHeadersMatch#prefix
   */
  readonly prefix?: string;

  /**
   * An object that represents the range of values to match on.
   *
   * @schema VirtualRouterSpecRoutesHttpRouteMatchHeadersMatch#range
   */
  readonly range?: VirtualRouterSpecRoutesHttpRouteMatchHeadersMatchRange;

  /**
   * The value sent by the client must include the specified characters.
   *
   * @schema VirtualRouterSpecRoutesHttpRouteMatchHeadersMatch#regex
   */
  readonly regex?: string;

  /**
   * The value sent by the client must end with the specified characters.
   *
   * @schema VirtualRouterSpecRoutesHttpRouteMatchHeadersMatch#suffix
   */
  readonly suffix?: string;

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesHttpRouteMatchHeadersMatch' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesHttpRouteMatchHeadersMatch(obj: VirtualRouterSpecRoutesHttpRouteMatchHeadersMatch | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exact': obj.exact,
    'prefix': obj.prefix,
    'range': toJson_VirtualRouterSpecRoutesHttpRouteMatchHeadersMatchRange(obj.range),
    'regex': obj.regex,
    'suffix': obj.suffix,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The QueryMatchMethod object.
 *
 * @schema VirtualRouterSpecRoutesHttpRouteMatchQueryParametersMatch
 */
export interface VirtualRouterSpecRoutesHttpRouteMatchQueryParametersMatch {
  /**
   * @schema VirtualRouterSpecRoutesHttpRouteMatchQueryParametersMatch#exact
   */
  readonly exact?: string;

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesHttpRouteMatchQueryParametersMatch' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesHttpRouteMatchQueryParametersMatch(obj: VirtualRouterSpecRoutesHttpRouteMatchQueryParametersMatch | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exact': obj.exact,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A unit of time.
 *
 * @schema VirtualRouterSpecRoutesHttpRouteRetryPolicyPerRetryTimeoutUnit
 */
export enum VirtualRouterSpecRoutesHttpRouteRetryPolicyPerRetryTimeoutUnit {
  /** s */
  S = "s",
  /** ms */
  MS = "ms",
}

/**
 * A unit of time.
 *
 * @schema VirtualRouterSpecRoutesHttpRouteTimeoutIdleUnit
 */
export enum VirtualRouterSpecRoutesHttpRouteTimeoutIdleUnit {
  /** s */
  S = "s",
  /** ms */
  MS = "ms",
}

/**
 * A unit of time.
 *
 * @schema VirtualRouterSpecRoutesHttpRouteTimeoutPerRequestUnit
 */
export enum VirtualRouterSpecRoutesHttpRouteTimeoutPerRequestUnit {
  /** s */
  S = "s",
  /** ms */
  MS = "ms",
}

/**
 * Reference to Kubernetes VirtualNode CR in cluster to associate with the weighted target. Exactly one of 'virtualNodeRef' or 'virtualNodeARN' must be specified.
 *
 * @schema VirtualRouterSpecRoutesTcpRouteActionWeightedTargetsVirtualNodeRef
 */
export interface VirtualRouterSpecRoutesTcpRouteActionWeightedTargetsVirtualNodeRef {
  /**
   * Name is the name of VirtualNode CR
   *
   * @schema VirtualRouterSpecRoutesTcpRouteActionWeightedTargetsVirtualNodeRef#name
   */
  readonly name: string;

  /**
   * Namespace is the namespace of VirtualNode CR. If unspecified, defaults to the referencing object's namespace
   *
   * @schema VirtualRouterSpecRoutesTcpRouteActionWeightedTargetsVirtualNodeRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesTcpRouteActionWeightedTargetsVirtualNodeRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesTcpRouteActionWeightedTargetsVirtualNodeRef(obj: VirtualRouterSpecRoutesTcpRouteActionWeightedTargetsVirtualNodeRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A unit of time.
 *
 * @schema VirtualRouterSpecRoutesTcpRouteTimeoutIdleUnit
 */
export enum VirtualRouterSpecRoutesTcpRouteTimeoutIdleUnit {
  /** s */
  S = "s",
  /** ms */
  MS = "ms",
}

/**
 * An object that represents the range of values to match on
 *
 * @schema VirtualRouterSpecRoutesGrpcRouteMatchMetadataMatchRange
 */
export interface VirtualRouterSpecRoutesGrpcRouteMatchMetadataMatchRange {
  /**
   * The end of the range.
   *
   * @schema VirtualRouterSpecRoutesGrpcRouteMatchMetadataMatchRange#end
   */
  readonly end: number;

  /**
   * The start of the range.
   *
   * @schema VirtualRouterSpecRoutesGrpcRouteMatchMetadataMatchRange#start
   */
  readonly start: number;

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesGrpcRouteMatchMetadataMatchRange' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesGrpcRouteMatchMetadataMatchRange(obj: VirtualRouterSpecRoutesGrpcRouteMatchMetadataMatchRange | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'end': obj.end,
    'start': obj.start,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents the range of values to match on.
 *
 * @schema VirtualRouterSpecRoutesHttp2RouteMatchHeadersMatchRange
 */
export interface VirtualRouterSpecRoutesHttp2RouteMatchHeadersMatchRange {
  /**
   * The end of the range.
   *
   * @schema VirtualRouterSpecRoutesHttp2RouteMatchHeadersMatchRange#end
   */
  readonly end: number;

  /**
   * The start of the range.
   *
   * @schema VirtualRouterSpecRoutesHttp2RouteMatchHeadersMatchRange#start
   */
  readonly start: number;

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesHttp2RouteMatchHeadersMatchRange' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesHttp2RouteMatchHeadersMatchRange(obj: VirtualRouterSpecRoutesHttp2RouteMatchHeadersMatchRange | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'end': obj.end,
    'start': obj.start,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents the range of values to match on.
 *
 * @schema VirtualRouterSpecRoutesHttpRouteMatchHeadersMatchRange
 */
export interface VirtualRouterSpecRoutesHttpRouteMatchHeadersMatchRange {
  /**
   * The end of the range.
   *
   * @schema VirtualRouterSpecRoutesHttpRouteMatchHeadersMatchRange#end
   */
  readonly end: number;

  /**
   * The start of the range.
   *
   * @schema VirtualRouterSpecRoutesHttpRouteMatchHeadersMatchRange#start
   */
  readonly start: number;

}

/**
 * Converts an object of type 'VirtualRouterSpecRoutesHttpRouteMatchHeadersMatchRange' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualRouterSpecRoutesHttpRouteMatchHeadersMatchRange(obj: VirtualRouterSpecRoutesHttpRouteMatchHeadersMatchRange | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'end': obj.end,
    'start': obj.start,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * VirtualService is the Schema for the virtualservices API
 *
 * @schema VirtualService
 */
export class VirtualService extends ApiObject {
  /**
   * Returns the apiVersion and kind for "VirtualService"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'appmesh.k8s.aws/v1beta2',
    kind: 'VirtualService',
  }

  /**
   * Renders a Kubernetes manifest for "VirtualService".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: VirtualServiceProps = {}): any {
    return {
      ...VirtualService.GVK,
      ...toJson_VirtualServiceProps(props),
    };
  }

  /**
   * Defines a "VirtualService" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: VirtualServiceProps = {}) {
    super(scope, id, {
      ...VirtualService.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...VirtualService.GVK,
      ...toJson_VirtualServiceProps(resolved),
    };
  }
}

/**
 * VirtualService is the Schema for the virtualservices API
 *
 * @schema VirtualService
 */
export interface VirtualServiceProps {
  /**
   * @schema VirtualService#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * VirtualServiceSpec defines the desired state of VirtualService refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_VirtualServiceSpec.html
   *
   * @schema VirtualService#spec
   */
  readonly spec?: VirtualServiceSpec;

}

/**
 * Converts an object of type 'VirtualServiceProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceProps(obj: VirtualServiceProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_VirtualServiceSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * VirtualServiceSpec defines the desired state of VirtualService refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_VirtualServiceSpec.html
 *
 * @schema VirtualServiceSpec
 */
export interface VirtualServiceSpec {
  /**
   * AWSName is the AppMesh VirtualService object's name. If unspecified or empty, it defaults to be "${name}.${namespace}" of k8s VirtualService
   *
   * @schema VirtualServiceSpec#awsName
   */
  readonly awsName?: string;

  /**
   * A reference to k8s Mesh CR that this VirtualService belongs to. The admission controller populates it using Meshes's selector, and prevents users from setting this field.
   * Populated by the system. Read-only.
   *
   * @schema VirtualServiceSpec#meshRef
   */
  readonly meshRef?: VirtualServiceSpecMeshRef;

  /**
   * The provider for virtual services. You can specify a single virtual node or virtual router.
   *
   * @schema VirtualServiceSpec#provider
   */
  readonly provider?: VirtualServiceSpecProvider;

}

/**
 * Converts an object of type 'VirtualServiceSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpec(obj: VirtualServiceSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'awsName': obj.awsName,
    'meshRef': toJson_VirtualServiceSpecMeshRef(obj.meshRef),
    'provider': toJson_VirtualServiceSpecProvider(obj.provider),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A reference to k8s Mesh CR that this VirtualService belongs to. The admission controller populates it using Meshes's selector, and prevents users from setting this field.
 * Populated by the system. Read-only.
 *
 * @schema VirtualServiceSpecMeshRef
 */
export interface VirtualServiceSpecMeshRef {
  /**
   * Name is the name of Mesh CR
   *
   * @schema VirtualServiceSpecMeshRef#name
   */
  readonly name: string;

  /**
   * UID is the UID of Mesh CR
   *
   * @schema VirtualServiceSpecMeshRef#uid
   */
  readonly uid: string;

}

/**
 * Converts an object of type 'VirtualServiceSpecMeshRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecMeshRef(obj: VirtualServiceSpecMeshRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'uid': obj.uid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The provider for virtual services. You can specify a single virtual node or virtual router.
 *
 * @schema VirtualServiceSpecProvider
 */
export interface VirtualServiceSpecProvider {
  /**
   * The virtual node associated with a virtual service.
   *
   * @schema VirtualServiceSpecProvider#virtualNode
   */
  readonly virtualNode?: VirtualServiceSpecProviderVirtualNode;

  /**
   * The virtual router associated with a virtual service.
   *
   * @schema VirtualServiceSpecProvider#virtualRouter
   */
  readonly virtualRouter?: VirtualServiceSpecProviderVirtualRouter;

}

/**
 * Converts an object of type 'VirtualServiceSpecProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecProvider(obj: VirtualServiceSpecProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'virtualNode': toJson_VirtualServiceSpecProviderVirtualNode(obj.virtualNode),
    'virtualRouter': toJson_VirtualServiceSpecProviderVirtualRouter(obj.virtualRouter),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The virtual node associated with a virtual service.
 *
 * @schema VirtualServiceSpecProviderVirtualNode
 */
export interface VirtualServiceSpecProviderVirtualNode {
  /**
   * Amazon Resource Name to AppMesh VirtualNode object that is acting as a service provider. Exactly one of 'virtualNodeRef' or 'virtualNodeARN' must be specified.
   *
   * @schema VirtualServiceSpecProviderVirtualNode#virtualNodeARN
   */
  readonly virtualNodeArn?: string;

  /**
   * Reference to Kubernetes VirtualNode CR in cluster that is acting as a service provider. Exactly one of 'virtualNodeRef' or 'virtualNodeARN' must be specified.
   *
   * @schema VirtualServiceSpecProviderVirtualNode#virtualNodeRef
   */
  readonly virtualNodeRef?: VirtualServiceSpecProviderVirtualNodeVirtualNodeRef;

}

/**
 * Converts an object of type 'VirtualServiceSpecProviderVirtualNode' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecProviderVirtualNode(obj: VirtualServiceSpecProviderVirtualNode | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'virtualNodeARN': obj.virtualNodeArn,
    'virtualNodeRef': toJson_VirtualServiceSpecProviderVirtualNodeVirtualNodeRef(obj.virtualNodeRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The virtual router associated with a virtual service.
 *
 * @schema VirtualServiceSpecProviderVirtualRouter
 */
export interface VirtualServiceSpecProviderVirtualRouter {
  /**
   * Amazon Resource Name to AppMesh VirtualRouter object that is acting as a service provider. Exactly one of 'virtualRouterRef' or 'virtualRouterARN' must be specified.
   *
   * @schema VirtualServiceSpecProviderVirtualRouter#virtualRouterARN
   */
  readonly virtualRouterArn?: string;

  /**
   * Reference to Kubernetes VirtualRouter CR in cluster that is acting as a service provider. Exactly one of 'virtualRouterRef' or 'virtualRouterARN' must be specified.
   *
   * @schema VirtualServiceSpecProviderVirtualRouter#virtualRouterRef
   */
  readonly virtualRouterRef?: VirtualServiceSpecProviderVirtualRouterVirtualRouterRef;

}

/**
 * Converts an object of type 'VirtualServiceSpecProviderVirtualRouter' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecProviderVirtualRouter(obj: VirtualServiceSpecProviderVirtualRouter | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'virtualRouterARN': obj.virtualRouterArn,
    'virtualRouterRef': toJson_VirtualServiceSpecProviderVirtualRouterVirtualRouterRef(obj.virtualRouterRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to Kubernetes VirtualNode CR in cluster that is acting as a service provider. Exactly one of 'virtualNodeRef' or 'virtualNodeARN' must be specified.
 *
 * @schema VirtualServiceSpecProviderVirtualNodeVirtualNodeRef
 */
export interface VirtualServiceSpecProviderVirtualNodeVirtualNodeRef {
  /**
   * Name is the name of VirtualNode CR
   *
   * @schema VirtualServiceSpecProviderVirtualNodeVirtualNodeRef#name
   */
  readonly name: string;

  /**
   * Namespace is the namespace of VirtualNode CR. If unspecified, defaults to the referencing object's namespace
   *
   * @schema VirtualServiceSpecProviderVirtualNodeVirtualNodeRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'VirtualServiceSpecProviderVirtualNodeVirtualNodeRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecProviderVirtualNodeVirtualNodeRef(obj: VirtualServiceSpecProviderVirtualNodeVirtualNodeRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to Kubernetes VirtualRouter CR in cluster that is acting as a service provider. Exactly one of 'virtualRouterRef' or 'virtualRouterARN' must be specified.
 *
 * @schema VirtualServiceSpecProviderVirtualRouterVirtualRouterRef
 */
export interface VirtualServiceSpecProviderVirtualRouterVirtualRouterRef {
  /**
   * Name is the name of VirtualRouter CR
   *
   * @schema VirtualServiceSpecProviderVirtualRouterVirtualRouterRef#name
   */
  readonly name: string;

  /**
   * Namespace is the namespace of VirtualRouter CR. If unspecified, defaults to the referencing object's namespace
   *
   * @schema VirtualServiceSpecProviderVirtualRouterVirtualRouterRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'VirtualServiceSpecProviderVirtualRouterVirtualRouterRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecProviderVirtualRouterVirtualRouterRef(obj: VirtualServiceSpecProviderVirtualRouterVirtualRouterRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

