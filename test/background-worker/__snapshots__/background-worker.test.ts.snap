// Vitest Snapshot v1

exports[`BackgroundWorker > Custom stop signal > Either stopSignal or lifecycle.preStop can be specified 1`] = `"stopSignal and lifecycle.preStop are mutually exclusive"`;

exports[`BackgroundWorker > Custom stop signal > Merge stopSignal and postStart hook 1`] = `
{
  "postStart": {
    "exec": {
      "command": [
        "/bin/sh",
        "-c",
        "echo hello",
      ],
    },
  },
  "preStop": {
    "exec": {
      "command": [
        "/bin/sh",
        "-c",
        "kill -QUIT 1 && while kill -0 1; do sleep 1; done",
      ],
    },
  },
}
`;

exports[`BackgroundWorker > Custom stop signal > Setting stopSignal creates a preStop hook 1`] = `
{
  "preStop": {
    "exec": {
      "command": [
        "/bin/sh",
        "-c",
        "kill -QUIT 1 && while kill -0 1; do sleep 1; done",
      ],
    },
  },
}
`;

exports[`BackgroundWorker > Props > All the props 1`] = `
[
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app": "my-app",
        "environment": "test",
        "instance": "test",
        "region": "local",
        "release": "v1",
        "role": "worker",
      },
      "name": "test-worker-test-c860ab13",
      "namespace": "test",
    },
    "spec": {
      "replicas": 4,
      "revisionHistoryLimit": 5,
      "selector": {
        "matchLabels": {
          "app": "my-app",
          "instance": "test",
          "role": "worker",
        },
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "my-app",
            "environment": "test",
            "instance": "test",
            "region": "local",
            "release": "v1",
            "role": "worker",
          },
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app": "my-app",
                        "instance": "test",
                      },
                    },
                    "topologyKey": "topology.kubernetes.io/zone",
                  },
                  "weight": 100,
                },
              ],
            },
          },
          "automountServiceAccountToken": true,
          "containers": [
            {
              "args": [
                "--foo",
                "bar",
              ],
              "command": [
                "/bin/sh",
                "-c",
                "echo hello",
              ],
              "env": [
                {
                  "name": "FOO",
                  "value": "bar",
                },
              ],
              "envFrom": [
                {
                  "configMapRef": {
                    "name": "foo-config",
                  },
                },
              ],
              "image": "talis/app:worker-v1",
              "imagePullPolicy": "Always",
              "lifecycle": {
                "postStart": {
                  "exec": {
                    "command": [
                      "/bin/sh",
                      "-c",
                      "echo hello",
                    ],
                  },
                },
                "preStop": {
                  "exec": {
                    "command": [
                      "/bin/sh",
                      "-c",
                      "echo goodbye",
                    ],
                  },
                },
              },
              "livenessProbe": {
                "exec": {
                  "command": [
                    "/bin/sh",
                    "-c",
                    "test $(stat -c %Y /tmp/live) -gt $(($(date +%s) - 60))",
                  ],
                },
                "failureThreshold": 3,
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 2,
              },
              "name": "worker",
              "resources": {
                "limits": {
                  "cpu": 1,
                  "memory": "1Gi",
                },
                "requests": {
                  "cpu": 0.1,
                  "memory": "100Mi",
                },
              },
              "securityContext": {
                "runAsGroup": 1000,
                "runAsNonRoot": true,
                "runAsUser": 1000,
              },
              "startupProbe": {
                "exec": {
                  "command": [
                    "/bin/sh",
                    "-c",
                    "test $(stat -c %Y /tmp/live) -gt $(($(date +%s) - 60))",
                  ],
                },
                "failureThreshold": 30,
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 2,
              },
              "volumeMounts": [
                {
                  "mountPath": "/tmp",
                  "name": "tmp-dir",
                },
              ],
              "workingDir": "/some/path",
            },
          ],
          "hostAliases": [
            {
              "hostnames": [
                "foo.example.com",
                "bar.example.com",
              ],
              "ip": "127.0.0.1",
            },
          ],
          "imagePullSecrets": [
            {
              "name": "foo-secret",
            },
          ],
          "initContainers": [
            {
              "command": [
                "/bin/sh",
                "-c",
                "echo hello",
              ],
              "image": "busybox:1.35.0",
              "name": "init-container",
            },
          ],
          "priorityClassName": "high-priority",
          "restartPolicy": "OnFailure",
          "terminationGracePeriodSeconds": 300,
          "volumes": [
            {
              "emptyDir": {},
              "name": "tmp-dir",
            },
          ],
        },
      },
    },
  },
]
`;

exports[`BackgroundWorker > Props > Allows specifying custom logic to make affinity 1`] = `
{
  "podAffinity": {
    "requiredDuringSchedulingIgnoredDuringExecution": [
      {
        "labelSelector": {
          "matchExpressions": [
            {
              "key": "role",
              "operator": "In",
              "values": [
                "worker",
              ],
            },
          ],
        },
        "topologyKey": "kubernetes.io/hostname",
      },
    ],
  },
}
`;

exports[`BackgroundWorker > Props > Minimal required props 1`] = `
[
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "instance": "worker-test",
        "release": "v1",
        "role": "worker",
      },
      "name": "test-worker-test-c860ab13",
    },
    "spec": {
      "revisionHistoryLimit": 1,
      "selector": {
        "matchLabels": {
          "instance": "worker-test",
          "role": "worker",
        },
      },
      "template": {
        "metadata": {
          "labels": {
            "instance": "worker-test",
            "release": "v1",
            "role": "worker",
          },
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "instance": "worker-test",
                        "role": "worker",
                      },
                    },
                    "topologyKey": "topology.kubernetes.io/zone",
                  },
                  "weight": 100,
                },
              ],
            },
          },
          "automountServiceAccountToken": false,
          "containers": [
            {
              "image": "talis/app:worker-v1",
              "imagePullPolicy": "IfNotPresent",
              "name": "app",
              "resources": {
                "requests": {
                  "cpu": "100m",
                  "memory": "100Mi",
                },
              },
            },
          ],
        },
      },
    },
  },
]
`;
